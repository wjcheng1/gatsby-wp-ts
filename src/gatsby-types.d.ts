/* eslint-disable */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {
	type Maybe<T> = T | null;
	type InputMaybe<T> = T | null;
	type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
	type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
		[SubKey in K]?: Maybe<T[SubKey]>;
	};
	type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
		[SubKey in K]: Maybe<T[SubKey]>;
	};
	/** All built-in and custom scalars, mapped to their actual values */
	type Scalars = {
		/** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
		ID: string;
		/** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
		String: string;
		/** The `Boolean` scalar type represents `true` or `false`. */
		Boolean: boolean;
		/** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
		Int: number;
		/** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
		Float: number;
		/** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
		Date: string;
		GatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData;
		/** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
		JSON: Record<string, unknown>;
	};

	type AVIFOptions = {
		readonly lossless: InputMaybe<Scalars['Boolean']>;
		readonly quality: InputMaybe<Scalars['Int']>;
		readonly speed: InputMaybe<Scalars['Int']>;
	};

	type BlurredOptions = {
		/** Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this */
		readonly toFormat: InputMaybe<ImageFormat>;
		/** Width of the generated low-res preview. Default is 20px */
		readonly width: InputMaybe<Scalars['Int']>;
	};

	type BooleanQueryOperatorInput = {
		readonly eq: InputMaybe<Scalars['Boolean']>;
		readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
		readonly ne: InputMaybe<Scalars['Boolean']>;
		readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
	};

	type DateQueryOperatorInput = {
		readonly eq: InputMaybe<Scalars['Date']>;
		readonly gt: InputMaybe<Scalars['Date']>;
		readonly gte: InputMaybe<Scalars['Date']>;
		readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
		readonly lt: InputMaybe<Scalars['Date']>;
		readonly lte: InputMaybe<Scalars['Date']>;
		readonly ne: InputMaybe<Scalars['Date']>;
		readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
	};

	type Directory = Node & {
		readonly absolutePath: Scalars['String'];
		readonly accessTime: Scalars['Date'];
		readonly atime: Scalars['Date'];
		readonly atimeMs: Scalars['Float'];
		readonly base: Scalars['String'];
		readonly birthTime: Scalars['Date'];
		/** @deprecated Use `birthTime` instead */
		readonly birthtime: Maybe<Scalars['Date']>;
		/** @deprecated Use `birthTime` instead */
		readonly birthtimeMs: Maybe<Scalars['Float']>;
		readonly changeTime: Scalars['Date'];
		readonly children: ReadonlyArray<Node>;
		readonly ctime: Scalars['Date'];
		readonly ctimeMs: Scalars['Float'];
		readonly dev: Scalars['Int'];
		readonly dir: Scalars['String'];
		readonly ext: Scalars['String'];
		readonly extension: Scalars['String'];
		readonly gid: Scalars['Int'];
		readonly id: Scalars['ID'];
		readonly ino: Scalars['Float'];
		readonly internal: Internal;
		readonly mode: Scalars['Int'];
		readonly modifiedTime: Scalars['Date'];
		readonly mtime: Scalars['Date'];
		readonly mtimeMs: Scalars['Float'];
		readonly name: Scalars['String'];
		readonly nlink: Scalars['Int'];
		readonly parent: Maybe<Node>;
		readonly prettySize: Scalars['String'];
		readonly rdev: Scalars['Int'];
		readonly relativeDirectory: Scalars['String'];
		readonly relativePath: Scalars['String'];
		readonly root: Scalars['String'];
		readonly size: Scalars['Int'];
		readonly sourceInstanceName: Scalars['String'];
		readonly uid: Scalars['Int'];
	};

	type Directory_accessTimeArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type Directory_atimeArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type Directory_birthTimeArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type Directory_changeTimeArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type Directory_ctimeArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type Directory_modifiedTimeArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type Directory_mtimeArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type DirectoryConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<DirectoryEdge>;
		readonly group: ReadonlyArray<DirectoryGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<Directory>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type DirectoryConnection_distinctArgs = {
		field: DirectoryFieldsEnum;
	};

	type DirectoryConnection_groupArgs = {
		field: DirectoryFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type DirectoryConnection_maxArgs = {
		field: DirectoryFieldsEnum;
	};

	type DirectoryConnection_minArgs = {
		field: DirectoryFieldsEnum;
	};

	type DirectoryConnection_sumArgs = {
		field: DirectoryFieldsEnum;
	};

	type DirectoryEdge = {
		readonly next: Maybe<Directory>;
		readonly node: Directory;
		readonly previous: Maybe<Directory>;
	};

	type DirectoryFieldsEnum =
		| 'absolutePath'
		| 'accessTime'
		| 'atime'
		| 'atimeMs'
		| 'base'
		| 'birthTime'
		| 'birthtime'
		| 'birthtimeMs'
		| 'changeTime'
		| 'children'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'ctime'
		| 'ctimeMs'
		| 'dev'
		| 'dir'
		| 'ext'
		| 'extension'
		| 'gid'
		| 'id'
		| 'ino'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'mode'
		| 'modifiedTime'
		| 'mtime'
		| 'mtimeMs'
		| 'name'
		| 'nlink'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id'
		| 'prettySize'
		| 'rdev'
		| 'relativeDirectory'
		| 'relativePath'
		| 'root'
		| 'size'
		| 'sourceInstanceName'
		| 'uid';

	type DirectoryFilterInput = {
		readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
		readonly accessTime: InputMaybe<DateQueryOperatorInput>;
		readonly atime: InputMaybe<DateQueryOperatorInput>;
		readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
		readonly base: InputMaybe<StringQueryOperatorInput>;
		readonly birthTime: InputMaybe<DateQueryOperatorInput>;
		readonly birthtime: InputMaybe<DateQueryOperatorInput>;
		readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
		readonly changeTime: InputMaybe<DateQueryOperatorInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly ctime: InputMaybe<DateQueryOperatorInput>;
		readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
		readonly dev: InputMaybe<IntQueryOperatorInput>;
		readonly dir: InputMaybe<StringQueryOperatorInput>;
		readonly ext: InputMaybe<StringQueryOperatorInput>;
		readonly extension: InputMaybe<StringQueryOperatorInput>;
		readonly gid: InputMaybe<IntQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly ino: InputMaybe<FloatQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly mode: InputMaybe<IntQueryOperatorInput>;
		readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
		readonly mtime: InputMaybe<DateQueryOperatorInput>;
		readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
		readonly name: InputMaybe<StringQueryOperatorInput>;
		readonly nlink: InputMaybe<IntQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly prettySize: InputMaybe<StringQueryOperatorInput>;
		readonly rdev: InputMaybe<IntQueryOperatorInput>;
		readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
		readonly relativePath: InputMaybe<StringQueryOperatorInput>;
		readonly root: InputMaybe<StringQueryOperatorInput>;
		readonly size: InputMaybe<IntQueryOperatorInput>;
		readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
		readonly uid: InputMaybe<IntQueryOperatorInput>;
	};

	type DirectoryGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<DirectoryEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<DirectoryGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<Directory>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type DirectoryGroupConnection_distinctArgs = {
		field: DirectoryFieldsEnum;
	};

	type DirectoryGroupConnection_groupArgs = {
		field: DirectoryFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type DirectoryGroupConnection_maxArgs = {
		field: DirectoryFieldsEnum;
	};

	type DirectoryGroupConnection_minArgs = {
		field: DirectoryFieldsEnum;
	};

	type DirectoryGroupConnection_sumArgs = {
		field: DirectoryFieldsEnum;
	};

	type DirectorySortInput = {
		readonly fields: InputMaybe<ReadonlyArray<InputMaybe<DirectoryFieldsEnum>>>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	type DuotoneGradient = {
		readonly highlight: Scalars['String'];
		readonly opacity: InputMaybe<Scalars['Int']>;
		readonly shadow: Scalars['String'];
	};

	type File = Node & {
		readonly absolutePath: Scalars['String'];
		readonly accessTime: Scalars['Date'];
		readonly atime: Scalars['Date'];
		readonly atimeMs: Scalars['Float'];
		readonly base: Scalars['String'];
		readonly birthTime: Scalars['Date'];
		/** @deprecated Use `birthTime` instead */
		readonly birthtime: Maybe<Scalars['Date']>;
		/** @deprecated Use `birthTime` instead */
		readonly birthtimeMs: Maybe<Scalars['Float']>;
		readonly blksize: Maybe<Scalars['Int']>;
		readonly blocks: Maybe<Scalars['Int']>;
		readonly changeTime: Scalars['Date'];
		/** Returns the first child node of type ImageSharp or null if there are no children of given type on this node */
		readonly childImageSharp: Maybe<ImageSharp>;
		readonly children: ReadonlyArray<Node>;
		/** Returns all children nodes filtered by type ImageSharp */
		readonly childrenImageSharp: Maybe<ReadonlyArray<Maybe<ImageSharp>>>;
		readonly ctime: Scalars['Date'];
		readonly ctimeMs: Scalars['Float'];
		readonly dev: Scalars['Int'];
		readonly dir: Scalars['String'];
		readonly ext: Scalars['String'];
		readonly extension: Scalars['String'];
		readonly gid: Scalars['Int'];
		readonly id: Scalars['ID'];
		readonly ino: Scalars['Float'];
		readonly internal: Internal;
		readonly mode: Scalars['Int'];
		readonly modifiedTime: Scalars['Date'];
		readonly mtime: Scalars['Date'];
		readonly mtimeMs: Scalars['Float'];
		readonly name: Scalars['String'];
		readonly nlink: Scalars['Int'];
		readonly parent: Maybe<Node>;
		readonly prettySize: Scalars['String'];
		/** Copy file to static directory and return public url to it */
		readonly publicURL: Maybe<Scalars['String']>;
		readonly rdev: Scalars['Int'];
		readonly relativeDirectory: Scalars['String'];
		readonly relativePath: Scalars['String'];
		readonly root: Scalars['String'];
		readonly size: Scalars['Int'];
		readonly sourceInstanceName: Scalars['String'];
		readonly uid: Scalars['Int'];
		readonly url: Maybe<Scalars['String']>;
	};

	type File_accessTimeArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type File_atimeArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type File_birthTimeArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type File_changeTimeArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type File_ctimeArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type File_modifiedTimeArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type File_mtimeArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type FileConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<FileEdge>;
		readonly group: ReadonlyArray<FileGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<File>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type FileConnection_distinctArgs = {
		field: FileFieldsEnum;
	};

	type FileConnection_groupArgs = {
		field: FileFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type FileConnection_maxArgs = {
		field: FileFieldsEnum;
	};

	type FileConnection_minArgs = {
		field: FileFieldsEnum;
	};

	type FileConnection_sumArgs = {
		field: FileFieldsEnum;
	};

	type FileEdge = {
		readonly next: Maybe<File>;
		readonly node: File;
		readonly previous: Maybe<File>;
	};

	type FileFieldsEnum =
		| 'absolutePath'
		| 'accessTime'
		| 'atime'
		| 'atimeMs'
		| 'base'
		| 'birthTime'
		| 'birthtime'
		| 'birthtimeMs'
		| 'blksize'
		| 'blocks'
		| 'changeTime'
		| 'childImageSharp.children'
		| 'childImageSharp.children.children'
		| 'childImageSharp.children.children.children'
		| 'childImageSharp.children.children.id'
		| 'childImageSharp.children.id'
		| 'childImageSharp.children.internal.content'
		| 'childImageSharp.children.internal.contentDigest'
		| 'childImageSharp.children.internal.contentFilePath'
		| 'childImageSharp.children.internal.description'
		| 'childImageSharp.children.internal.fieldOwners'
		| 'childImageSharp.children.internal.ignoreType'
		| 'childImageSharp.children.internal.mediaType'
		| 'childImageSharp.children.internal.owner'
		| 'childImageSharp.children.internal.type'
		| 'childImageSharp.children.parent.children'
		| 'childImageSharp.children.parent.id'
		| 'childImageSharp.fixed.aspectRatio'
		| 'childImageSharp.fixed.base64'
		| 'childImageSharp.fixed.height'
		| 'childImageSharp.fixed.originalName'
		| 'childImageSharp.fixed.src'
		| 'childImageSharp.fixed.srcSet'
		| 'childImageSharp.fixed.srcSetWebp'
		| 'childImageSharp.fixed.srcWebp'
		| 'childImageSharp.fixed.tracedSVG'
		| 'childImageSharp.fixed.width'
		| 'childImageSharp.fluid.aspectRatio'
		| 'childImageSharp.fluid.base64'
		| 'childImageSharp.fluid.originalImg'
		| 'childImageSharp.fluid.originalName'
		| 'childImageSharp.fluid.presentationHeight'
		| 'childImageSharp.fluid.presentationWidth'
		| 'childImageSharp.fluid.sizes'
		| 'childImageSharp.fluid.src'
		| 'childImageSharp.fluid.srcSet'
		| 'childImageSharp.fluid.srcSetWebp'
		| 'childImageSharp.fluid.srcWebp'
		| 'childImageSharp.fluid.tracedSVG'
		| 'childImageSharp.gatsbyImageData'
		| 'childImageSharp.id'
		| 'childImageSharp.internal.content'
		| 'childImageSharp.internal.contentDigest'
		| 'childImageSharp.internal.contentFilePath'
		| 'childImageSharp.internal.description'
		| 'childImageSharp.internal.fieldOwners'
		| 'childImageSharp.internal.ignoreType'
		| 'childImageSharp.internal.mediaType'
		| 'childImageSharp.internal.owner'
		| 'childImageSharp.internal.type'
		| 'childImageSharp.original.height'
		| 'childImageSharp.original.src'
		| 'childImageSharp.original.width'
		| 'childImageSharp.parent.children'
		| 'childImageSharp.parent.children.children'
		| 'childImageSharp.parent.children.id'
		| 'childImageSharp.parent.id'
		| 'childImageSharp.parent.internal.content'
		| 'childImageSharp.parent.internal.contentDigest'
		| 'childImageSharp.parent.internal.contentFilePath'
		| 'childImageSharp.parent.internal.description'
		| 'childImageSharp.parent.internal.fieldOwners'
		| 'childImageSharp.parent.internal.ignoreType'
		| 'childImageSharp.parent.internal.mediaType'
		| 'childImageSharp.parent.internal.owner'
		| 'childImageSharp.parent.internal.type'
		| 'childImageSharp.parent.parent.children'
		| 'childImageSharp.parent.parent.id'
		| 'childImageSharp.resize.aspectRatio'
		| 'childImageSharp.resize.height'
		| 'childImageSharp.resize.originalName'
		| 'childImageSharp.resize.src'
		| 'childImageSharp.resize.tracedSVG'
		| 'childImageSharp.resize.width'
		| 'children'
		| 'childrenImageSharp'
		| 'childrenImageSharp.children'
		| 'childrenImageSharp.children.children'
		| 'childrenImageSharp.children.children.children'
		| 'childrenImageSharp.children.children.id'
		| 'childrenImageSharp.children.id'
		| 'childrenImageSharp.children.internal.content'
		| 'childrenImageSharp.children.internal.contentDigest'
		| 'childrenImageSharp.children.internal.contentFilePath'
		| 'childrenImageSharp.children.internal.description'
		| 'childrenImageSharp.children.internal.fieldOwners'
		| 'childrenImageSharp.children.internal.ignoreType'
		| 'childrenImageSharp.children.internal.mediaType'
		| 'childrenImageSharp.children.internal.owner'
		| 'childrenImageSharp.children.internal.type'
		| 'childrenImageSharp.children.parent.children'
		| 'childrenImageSharp.children.parent.id'
		| 'childrenImageSharp.fixed.aspectRatio'
		| 'childrenImageSharp.fixed.base64'
		| 'childrenImageSharp.fixed.height'
		| 'childrenImageSharp.fixed.originalName'
		| 'childrenImageSharp.fixed.src'
		| 'childrenImageSharp.fixed.srcSet'
		| 'childrenImageSharp.fixed.srcSetWebp'
		| 'childrenImageSharp.fixed.srcWebp'
		| 'childrenImageSharp.fixed.tracedSVG'
		| 'childrenImageSharp.fixed.width'
		| 'childrenImageSharp.fluid.aspectRatio'
		| 'childrenImageSharp.fluid.base64'
		| 'childrenImageSharp.fluid.originalImg'
		| 'childrenImageSharp.fluid.originalName'
		| 'childrenImageSharp.fluid.presentationHeight'
		| 'childrenImageSharp.fluid.presentationWidth'
		| 'childrenImageSharp.fluid.sizes'
		| 'childrenImageSharp.fluid.src'
		| 'childrenImageSharp.fluid.srcSet'
		| 'childrenImageSharp.fluid.srcSetWebp'
		| 'childrenImageSharp.fluid.srcWebp'
		| 'childrenImageSharp.fluid.tracedSVG'
		| 'childrenImageSharp.gatsbyImageData'
		| 'childrenImageSharp.id'
		| 'childrenImageSharp.internal.content'
		| 'childrenImageSharp.internal.contentDigest'
		| 'childrenImageSharp.internal.contentFilePath'
		| 'childrenImageSharp.internal.description'
		| 'childrenImageSharp.internal.fieldOwners'
		| 'childrenImageSharp.internal.ignoreType'
		| 'childrenImageSharp.internal.mediaType'
		| 'childrenImageSharp.internal.owner'
		| 'childrenImageSharp.internal.type'
		| 'childrenImageSharp.original.height'
		| 'childrenImageSharp.original.src'
		| 'childrenImageSharp.original.width'
		| 'childrenImageSharp.parent.children'
		| 'childrenImageSharp.parent.children.children'
		| 'childrenImageSharp.parent.children.id'
		| 'childrenImageSharp.parent.id'
		| 'childrenImageSharp.parent.internal.content'
		| 'childrenImageSharp.parent.internal.contentDigest'
		| 'childrenImageSharp.parent.internal.contentFilePath'
		| 'childrenImageSharp.parent.internal.description'
		| 'childrenImageSharp.parent.internal.fieldOwners'
		| 'childrenImageSharp.parent.internal.ignoreType'
		| 'childrenImageSharp.parent.internal.mediaType'
		| 'childrenImageSharp.parent.internal.owner'
		| 'childrenImageSharp.parent.internal.type'
		| 'childrenImageSharp.parent.parent.children'
		| 'childrenImageSharp.parent.parent.id'
		| 'childrenImageSharp.resize.aspectRatio'
		| 'childrenImageSharp.resize.height'
		| 'childrenImageSharp.resize.originalName'
		| 'childrenImageSharp.resize.src'
		| 'childrenImageSharp.resize.tracedSVG'
		| 'childrenImageSharp.resize.width'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'ctime'
		| 'ctimeMs'
		| 'dev'
		| 'dir'
		| 'ext'
		| 'extension'
		| 'gid'
		| 'id'
		| 'ino'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'mode'
		| 'modifiedTime'
		| 'mtime'
		| 'mtimeMs'
		| 'name'
		| 'nlink'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id'
		| 'prettySize'
		| 'publicURL'
		| 'rdev'
		| 'relativeDirectory'
		| 'relativePath'
		| 'root'
		| 'size'
		| 'sourceInstanceName'
		| 'uid'
		| 'url';

	type FileFilterInput = {
		readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
		readonly accessTime: InputMaybe<DateQueryOperatorInput>;
		readonly atime: InputMaybe<DateQueryOperatorInput>;
		readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
		readonly base: InputMaybe<StringQueryOperatorInput>;
		readonly birthTime: InputMaybe<DateQueryOperatorInput>;
		readonly birthtime: InputMaybe<DateQueryOperatorInput>;
		readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
		readonly blksize: InputMaybe<IntQueryOperatorInput>;
		readonly blocks: InputMaybe<IntQueryOperatorInput>;
		readonly changeTime: InputMaybe<DateQueryOperatorInput>;
		readonly childImageSharp: InputMaybe<ImageSharpFilterInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
		readonly ctime: InputMaybe<DateQueryOperatorInput>;
		readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
		readonly dev: InputMaybe<IntQueryOperatorInput>;
		readonly dir: InputMaybe<StringQueryOperatorInput>;
		readonly ext: InputMaybe<StringQueryOperatorInput>;
		readonly extension: InputMaybe<StringQueryOperatorInput>;
		readonly gid: InputMaybe<IntQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly ino: InputMaybe<FloatQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly mode: InputMaybe<IntQueryOperatorInput>;
		readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
		readonly mtime: InputMaybe<DateQueryOperatorInput>;
		readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
		readonly name: InputMaybe<StringQueryOperatorInput>;
		readonly nlink: InputMaybe<IntQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly prettySize: InputMaybe<StringQueryOperatorInput>;
		readonly publicURL: InputMaybe<StringQueryOperatorInput>;
		readonly rdev: InputMaybe<IntQueryOperatorInput>;
		readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
		readonly relativePath: InputMaybe<StringQueryOperatorInput>;
		readonly root: InputMaybe<StringQueryOperatorInput>;
		readonly size: InputMaybe<IntQueryOperatorInput>;
		readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
		readonly uid: InputMaybe<IntQueryOperatorInput>;
		readonly url: InputMaybe<StringQueryOperatorInput>;
	};

	type FileGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<FileEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<FileGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<File>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type FileGroupConnection_distinctArgs = {
		field: FileFieldsEnum;
	};

	type FileGroupConnection_groupArgs = {
		field: FileFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type FileGroupConnection_maxArgs = {
		field: FileFieldsEnum;
	};

	type FileGroupConnection_minArgs = {
		field: FileFieldsEnum;
	};

	type FileGroupConnection_sumArgs = {
		field: FileFieldsEnum;
	};

	type FileSortInput = {
		readonly fields: InputMaybe<ReadonlyArray<InputMaybe<FileFieldsEnum>>>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	type FloatQueryOperatorInput = {
		readonly eq: InputMaybe<Scalars['Float']>;
		readonly gt: InputMaybe<Scalars['Float']>;
		readonly gte: InputMaybe<Scalars['Float']>;
		readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
		readonly lt: InputMaybe<Scalars['Float']>;
		readonly lte: InputMaybe<Scalars['Float']>;
		readonly ne: InputMaybe<Scalars['Float']>;
		readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
	};

	type GatsbyImageDataQueryOperatorInput = {
		readonly eq: InputMaybe<Scalars['GatsbyImageData']>;
		readonly in: InputMaybe<
			ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>
		>;
		readonly ne: InputMaybe<Scalars['GatsbyImageData']>;
		readonly nin: InputMaybe<
			ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>
		>;
	};

	type GatsbyImageFormat = 'auto' | 'avif' | 'jpg' | '' | 'png' | 'webp';

	type GatsbyImageLayout = 'constrained' | 'fixed' | 'fullWidth';

	type GatsbyImagePlaceholder =
		| 'blurred'
		| 'dominantColor'
		| 'none'
		| 'tracedSVG';

	type IDQueryOperatorInput = {
		readonly eq: InputMaybe<Scalars['ID']>;
		readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['ID']>>>;
		readonly ne: InputMaybe<Scalars['ID']>;
		readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['ID']>>>;
	};

	type ImageCropFocus = 17 | 0 | 2 | 16 | 1 | 5 | 8 | 3 | 6 | 7 | 4;

	type ImageFit = 'contain' | 'cover' | 'fill' | 'inside' | 'outside';

	type ImageFormat = '' | 'avif' | 'jpg' | '' | 'png' | 'webp';

	type ImageLayout = 'constrained' | 'fixed' | 'fullWidth';

	type ImagePlaceholder = 'blurred' | 'dominantColor' | 'none' | 'tracedSVG';

	type ImageSharp = Node & {
		readonly children: ReadonlyArray<Node>;
		readonly fixed: Maybe<ImageSharpFixed>;
		readonly fluid: Maybe<ImageSharpFluid>;
		readonly gatsbyImageData: Scalars['GatsbyImageData'];
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly original: Maybe<ImageSharpOriginal>;
		readonly parent: Maybe<Node>;
		readonly resize: Maybe<ImageSharpResize>;
	};

	type ImageSharp_fixedArgs = {
		background?: InputMaybe<Scalars['String']>;
		base64Width: InputMaybe<Scalars['Int']>;
		cropFocus?: InputMaybe<ImageCropFocus>;
		duotone: InputMaybe<DuotoneGradient>;
		fit?: InputMaybe<ImageFit>;
		grayscale?: InputMaybe<Scalars['Boolean']>;
		height: InputMaybe<Scalars['Int']>;
		jpegProgressive?: InputMaybe<Scalars['Boolean']>;
		jpegQuality: InputMaybe<Scalars['Int']>;
		pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
		pngQuality: InputMaybe<Scalars['Int']>;
		quality: InputMaybe<Scalars['Int']>;
		rotate?: InputMaybe<Scalars['Int']>;
		toFormat?: InputMaybe<ImageFormat>;
		toFormatBase64?: InputMaybe<ImageFormat>;
		traceSVG: InputMaybe<Potrace>;
		trim?: InputMaybe<Scalars['Float']>;
		webpQuality: InputMaybe<Scalars['Int']>;
		width: InputMaybe<Scalars['Int']>;
	};

	type ImageSharp_fluidArgs = {
		background?: InputMaybe<Scalars['String']>;
		base64Width: InputMaybe<Scalars['Int']>;
		cropFocus?: InputMaybe<ImageCropFocus>;
		duotone: InputMaybe<DuotoneGradient>;
		fit?: InputMaybe<ImageFit>;
		grayscale?: InputMaybe<Scalars['Boolean']>;
		jpegProgressive?: InputMaybe<Scalars['Boolean']>;
		jpegQuality: InputMaybe<Scalars['Int']>;
		maxHeight: InputMaybe<Scalars['Int']>;
		maxWidth: InputMaybe<Scalars['Int']>;
		pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
		pngQuality: InputMaybe<Scalars['Int']>;
		quality: InputMaybe<Scalars['Int']>;
		rotate?: InputMaybe<Scalars['Int']>;
		sizes?: InputMaybe<Scalars['String']>;
		srcSetBreakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
		toFormat?: InputMaybe<ImageFormat>;
		toFormatBase64?: InputMaybe<ImageFormat>;
		traceSVG: InputMaybe<Potrace>;
		trim?: InputMaybe<Scalars['Float']>;
		webpQuality: InputMaybe<Scalars['Int']>;
	};

	type ImageSharp_gatsbyImageDataArgs = {
		aspectRatio: InputMaybe<Scalars['Float']>;
		avifOptions: InputMaybe<AVIFOptions>;
		backgroundColor: InputMaybe<Scalars['String']>;
		blurredOptions: InputMaybe<BlurredOptions>;
		breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
		formats: InputMaybe<ReadonlyArray<InputMaybe<ImageFormat>>>;
		height: InputMaybe<Scalars['Int']>;
		jpgOptions: InputMaybe<JPGOptions>;
		layout?: InputMaybe<ImageLayout>;
		outputPixelDensities: InputMaybe<
			ReadonlyArray<InputMaybe<Scalars['Float']>>
		>;
		placeholder: InputMaybe<ImagePlaceholder>;
		pngOptions: InputMaybe<PNGOptions>;
		quality: InputMaybe<Scalars['Int']>;
		sizes: InputMaybe<Scalars['String']>;
		tracedSVGOptions: InputMaybe<Potrace>;
		transformOptions: InputMaybe<TransformOptions>;
		webpOptions: InputMaybe<WebPOptions>;
		width: InputMaybe<Scalars['Int']>;
	};

	type ImageSharp_resizeArgs = {
		background?: InputMaybe<Scalars['String']>;
		base64?: InputMaybe<Scalars['Boolean']>;
		cropFocus?: InputMaybe<ImageCropFocus>;
		duotone: InputMaybe<DuotoneGradient>;
		fit?: InputMaybe<ImageFit>;
		grayscale?: InputMaybe<Scalars['Boolean']>;
		height: InputMaybe<Scalars['Int']>;
		jpegProgressive?: InputMaybe<Scalars['Boolean']>;
		jpegQuality: InputMaybe<Scalars['Int']>;
		pngCompressionLevel?: InputMaybe<Scalars['Int']>;
		pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
		pngQuality: InputMaybe<Scalars['Int']>;
		quality: InputMaybe<Scalars['Int']>;
		rotate?: InputMaybe<Scalars['Int']>;
		toFormat?: InputMaybe<ImageFormat>;
		traceSVG: InputMaybe<Potrace>;
		trim?: InputMaybe<Scalars['Float']>;
		webpQuality: InputMaybe<Scalars['Int']>;
		width: InputMaybe<Scalars['Int']>;
	};

	type ImageSharpConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ImageSharpEdge>;
		readonly group: ReadonlyArray<ImageSharpGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ImageSharp>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ImageSharpConnection_distinctArgs = {
		field: ImageSharpFieldsEnum;
	};

	type ImageSharpConnection_groupArgs = {
		field: ImageSharpFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ImageSharpConnection_maxArgs = {
		field: ImageSharpFieldsEnum;
	};

	type ImageSharpConnection_minArgs = {
		field: ImageSharpFieldsEnum;
	};

	type ImageSharpConnection_sumArgs = {
		field: ImageSharpFieldsEnum;
	};

	type ImageSharpEdge = {
		readonly next: Maybe<ImageSharp>;
		readonly node: ImageSharp;
		readonly previous: Maybe<ImageSharp>;
	};

	type ImageSharpFieldsEnum =
		| 'children'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'fixed.aspectRatio'
		| 'fixed.base64'
		| 'fixed.height'
		| 'fixed.originalName'
		| 'fixed.src'
		| 'fixed.srcSet'
		| 'fixed.srcSetWebp'
		| 'fixed.srcWebp'
		| 'fixed.tracedSVG'
		| 'fixed.width'
		| 'fluid.aspectRatio'
		| 'fluid.base64'
		| 'fluid.originalImg'
		| 'fluid.originalName'
		| 'fluid.presentationHeight'
		| 'fluid.presentationWidth'
		| 'fluid.sizes'
		| 'fluid.src'
		| 'fluid.srcSet'
		| 'fluid.srcSetWebp'
		| 'fluid.srcWebp'
		| 'fluid.tracedSVG'
		| 'gatsbyImageData'
		| 'id'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'original.height'
		| 'original.src'
		| 'original.width'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id'
		| 'resize.aspectRatio'
		| 'resize.height'
		| 'resize.originalName'
		| 'resize.src'
		| 'resize.tracedSVG'
		| 'resize.width';

	type ImageSharpFilterInput = {
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly fixed: InputMaybe<ImageSharpFixedFilterInput>;
		readonly fluid: InputMaybe<ImageSharpFluidFilterInput>;
		readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly original: InputMaybe<ImageSharpOriginalFilterInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly resize: InputMaybe<ImageSharpResizeFilterInput>;
	};

	type ImageSharpFilterListInput = {
		readonly elemMatch: InputMaybe<ImageSharpFilterInput>;
	};

	type ImageSharpFixed = {
		readonly aspectRatio: Maybe<Scalars['Float']>;
		readonly base64: Maybe<Scalars['String']>;
		readonly height: Scalars['Float'];
		readonly originalName: Maybe<Scalars['String']>;
		readonly src: Scalars['String'];
		readonly srcSet: Scalars['String'];
		readonly srcSetWebp: Maybe<Scalars['String']>;
		readonly srcWebp: Maybe<Scalars['String']>;
		readonly tracedSVG: Maybe<Scalars['String']>;
		readonly width: Scalars['Float'];
	};

	type ImageSharpFixedFilterInput = {
		readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
		readonly base64: InputMaybe<StringQueryOperatorInput>;
		readonly height: InputMaybe<FloatQueryOperatorInput>;
		readonly originalName: InputMaybe<StringQueryOperatorInput>;
		readonly src: InputMaybe<StringQueryOperatorInput>;
		readonly srcSet: InputMaybe<StringQueryOperatorInput>;
		readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
		readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
		readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
		readonly width: InputMaybe<FloatQueryOperatorInput>;
	};

	type ImageSharpFluid = {
		readonly aspectRatio: Scalars['Float'];
		readonly base64: Maybe<Scalars['String']>;
		readonly originalImg: Maybe<Scalars['String']>;
		readonly originalName: Maybe<Scalars['String']>;
		readonly presentationHeight: Scalars['Int'];
		readonly presentationWidth: Scalars['Int'];
		readonly sizes: Scalars['String'];
		readonly src: Scalars['String'];
		readonly srcSet: Scalars['String'];
		readonly srcSetWebp: Maybe<Scalars['String']>;
		readonly srcWebp: Maybe<Scalars['String']>;
		readonly tracedSVG: Maybe<Scalars['String']>;
	};

	type ImageSharpFluidFilterInput = {
		readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
		readonly base64: InputMaybe<StringQueryOperatorInput>;
		readonly originalImg: InputMaybe<StringQueryOperatorInput>;
		readonly originalName: InputMaybe<StringQueryOperatorInput>;
		readonly presentationHeight: InputMaybe<IntQueryOperatorInput>;
		readonly presentationWidth: InputMaybe<IntQueryOperatorInput>;
		readonly sizes: InputMaybe<StringQueryOperatorInput>;
		readonly src: InputMaybe<StringQueryOperatorInput>;
		readonly srcSet: InputMaybe<StringQueryOperatorInput>;
		readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
		readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
		readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
	};

	type ImageSharpGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ImageSharpEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<ImageSharpGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ImageSharp>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ImageSharpGroupConnection_distinctArgs = {
		field: ImageSharpFieldsEnum;
	};

	type ImageSharpGroupConnection_groupArgs = {
		field: ImageSharpFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ImageSharpGroupConnection_maxArgs = {
		field: ImageSharpFieldsEnum;
	};

	type ImageSharpGroupConnection_minArgs = {
		field: ImageSharpFieldsEnum;
	};

	type ImageSharpGroupConnection_sumArgs = {
		field: ImageSharpFieldsEnum;
	};

	type ImageSharpOriginal = {
		readonly height: Maybe<Scalars['Float']>;
		readonly src: Maybe<Scalars['String']>;
		readonly width: Maybe<Scalars['Float']>;
	};

	type ImageSharpOriginalFilterInput = {
		readonly height: InputMaybe<FloatQueryOperatorInput>;
		readonly src: InputMaybe<StringQueryOperatorInput>;
		readonly width: InputMaybe<FloatQueryOperatorInput>;
	};

	type ImageSharpResize = {
		readonly aspectRatio: Maybe<Scalars['Float']>;
		readonly height: Maybe<Scalars['Int']>;
		readonly originalName: Maybe<Scalars['String']>;
		readonly src: Maybe<Scalars['String']>;
		readonly tracedSVG: Maybe<Scalars['String']>;
		readonly width: Maybe<Scalars['Int']>;
	};

	type ImageSharpResizeFilterInput = {
		readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
		readonly height: InputMaybe<IntQueryOperatorInput>;
		readonly originalName: InputMaybe<StringQueryOperatorInput>;
		readonly src: InputMaybe<StringQueryOperatorInput>;
		readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
		readonly width: InputMaybe<IntQueryOperatorInput>;
	};

	type ImageSharpSortInput = {
		readonly fields: InputMaybe<
			ReadonlyArray<InputMaybe<ImageSharpFieldsEnum>>
		>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	type IntQueryOperatorInput = {
		readonly eq: InputMaybe<Scalars['Int']>;
		readonly gt: InputMaybe<Scalars['Int']>;
		readonly gte: InputMaybe<Scalars['Int']>;
		readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
		readonly lt: InputMaybe<Scalars['Int']>;
		readonly lte: InputMaybe<Scalars['Int']>;
		readonly ne: InputMaybe<Scalars['Int']>;
		readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
	};

	type Internal = {
		readonly content: Maybe<Scalars['String']>;
		readonly contentDigest: Scalars['String'];
		readonly contentFilePath: Maybe<Scalars['String']>;
		readonly description: Maybe<Scalars['String']>;
		readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
		readonly ignoreType: Maybe<Scalars['Boolean']>;
		readonly mediaType: Maybe<Scalars['String']>;
		readonly owner: Scalars['String'];
		readonly type: Scalars['String'];
	};

	type InternalFilterInput = {
		readonly content: InputMaybe<StringQueryOperatorInput>;
		readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
		readonly contentFilePath: InputMaybe<StringQueryOperatorInput>;
		readonly description: InputMaybe<StringQueryOperatorInput>;
		readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
		readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
		readonly mediaType: InputMaybe<StringQueryOperatorInput>;
		readonly owner: InputMaybe<StringQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type JPGOptions = {
		readonly progressive: InputMaybe<Scalars['Boolean']>;
		readonly quality: InputMaybe<Scalars['Int']>;
	};

	type JSONQueryOperatorInput = {
		readonly eq: InputMaybe<Scalars['JSON']>;
		readonly glob: InputMaybe<Scalars['JSON']>;
		readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
		readonly ne: InputMaybe<Scalars['JSON']>;
		readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
		readonly regex: InputMaybe<Scalars['JSON']>;
	};

	/** Node Interface */
	type Node = {
		readonly children: ReadonlyArray<Node>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly parent: Maybe<Node>;
	};

	type NodeFilterInput = {
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
	};

	type NodeFilterListInput = {
		readonly elemMatch: InputMaybe<NodeFilterInput>;
	};

	type PNGOptions = {
		readonly compressionSpeed: InputMaybe<Scalars['Int']>;
		readonly quality: InputMaybe<Scalars['Int']>;
	};

	type PageInfo = {
		readonly currentPage: Scalars['Int'];
		readonly hasNextPage: Scalars['Boolean'];
		readonly hasPreviousPage: Scalars['Boolean'];
		readonly itemCount: Scalars['Int'];
		readonly pageCount: Scalars['Int'];
		readonly perPage: Maybe<Scalars['Int']>;
		readonly totalCount: Scalars['Int'];
	};

	type Potrace = {
		readonly alphaMax: InputMaybe<Scalars['Float']>;
		readonly background: InputMaybe<Scalars['String']>;
		readonly blackOnWhite: InputMaybe<Scalars['Boolean']>;
		readonly color: InputMaybe<Scalars['String']>;
		readonly optCurve: InputMaybe<Scalars['Boolean']>;
		readonly optTolerance: InputMaybe<Scalars['Float']>;
		readonly threshold: InputMaybe<Scalars['Int']>;
		readonly turdSize: InputMaybe<Scalars['Float']>;
		readonly turnPolicy: InputMaybe<PotraceTurnPolicy>;
	};

	type PotraceTurnPolicy =
		| 'black'
		| 'left'
		| 'majority'
		| 'minority'
		| 'right'
		| 'white';

	type Query = {
		readonly allDirectory: DirectoryConnection;
		readonly allFile: FileConnection;
		readonly allImageSharp: ImageSharpConnection;
		readonly allSite: SiteConnection;
		readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
		readonly allSiteFunction: SiteFunctionConnection;
		readonly allSitePage: SitePageConnection;
		readonly allSitePlugin: SitePluginConnection;
		readonly allWp: WpConnection;
		readonly allWpCategory: WpCategoryConnection;
		readonly allWpComment: WpCommentConnection;
		readonly allWpCommentAuthor: WpCommentAuthorConnection;
		readonly allWpCommenter: WpCommenterConnection;
		readonly allWpContentNode: WpContentNodeConnection;
		readonly allWpContentType: WpContentTypeConnection;
		readonly allWpGraphqlDocument: WpGraphqlDocumentConnection;
		readonly allWpHierarchicalContentNode: WpHierarchicalContentNodeConnection;
		readonly allWpHierarchicalNode: WpHierarchicalNodeConnection;
		readonly allWpHierarchicalTermNode: WpHierarchicalTermNodeConnection;
		readonly allWpMediaItem: WpMediaItemConnection;
		readonly allWpMenu: WpMenuConnection;
		readonly allWpMenuItem: WpMenuItemConnection;
		readonly allWpMenuItemLinkable: WpMenuItemLinkableConnection;
		readonly allWpNodeWithAuthor: WpNodeWithAuthorConnection;
		readonly allWpNodeWithComments: WpNodeWithCommentsConnection;
		readonly allWpNodeWithContentEditor: WpNodeWithContentEditorConnection;
		readonly allWpNodeWithExcerpt: WpNodeWithExcerptConnection;
		readonly allWpNodeWithFeaturedImage: WpNodeWithFeaturedImageConnection;
		readonly allWpNodeWithPageAttributes: WpNodeWithPageAttributesConnection;
		readonly allWpNodeWithRevisions: WpNodeWithRevisionsConnection;
		readonly allWpNodeWithTemplate: WpNodeWithTemplateConnection;
		readonly allWpNodeWithTitle: WpNodeWithTitleConnection;
		readonly allWpNodeWithTrackbacks: WpNodeWithTrackbacksConnection;
		readonly allWpPage: WpPageConnection;
		readonly allWpPost: WpPostConnection;
		readonly allWpPostFormat: WpPostFormatConnection;
		readonly allWpTag: WpTagConnection;
		readonly allWpTaxonomy: WpTaxonomyConnection;
		readonly allWpTermNode: WpTermNodeConnection;
		readonly allWpUniformResourceIdentifiable: WpUniformResourceIdentifiableConnection;
		readonly allWpUser: WpUserConnection;
		readonly allWpUserRole: WpUserRoleConnection;
		readonly directory: Maybe<Directory>;
		readonly file: Maybe<File>;
		readonly imageSharp: Maybe<ImageSharp>;
		readonly site: Maybe<Site>;
		readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
		readonly siteFunction: Maybe<SiteFunction>;
		readonly sitePage: Maybe<SitePage>;
		readonly sitePlugin: Maybe<SitePlugin>;
		readonly wp: Maybe<Wp>;
		readonly wpCategory: Maybe<WpCategory>;
		readonly wpComment: Maybe<WpComment>;
		readonly wpCommentAuthor: Maybe<WpCommentAuthor>;
		readonly wpCommenter: Maybe<WpCommenter>;
		readonly wpContentNode: Maybe<WpContentNode>;
		readonly wpContentType: Maybe<WpContentType>;
		readonly wpGraphqlDocument: Maybe<WpGraphqlDocument>;
		readonly wpHierarchicalContentNode: Maybe<WpHierarchicalContentNode>;
		readonly wpHierarchicalNode: Maybe<WpHierarchicalNode>;
		readonly wpHierarchicalTermNode: Maybe<WpHierarchicalTermNode>;
		readonly wpMediaItem: Maybe<WpMediaItem>;
		readonly wpMenu: Maybe<WpMenu>;
		readonly wpMenuItem: Maybe<WpMenuItem>;
		readonly wpMenuItemLinkable: Maybe<WpMenuItemLinkable>;
		readonly wpNodeWithAuthor: Maybe<WpNodeWithAuthor>;
		readonly wpNodeWithComments: Maybe<WpNodeWithComments>;
		readonly wpNodeWithContentEditor: Maybe<WpNodeWithContentEditor>;
		readonly wpNodeWithExcerpt: Maybe<WpNodeWithExcerpt>;
		readonly wpNodeWithFeaturedImage: Maybe<WpNodeWithFeaturedImage>;
		readonly wpNodeWithPageAttributes: Maybe<WpNodeWithPageAttributes>;
		readonly wpNodeWithRevisions: Maybe<WpNodeWithRevisions>;
		readonly wpNodeWithTemplate: Maybe<WpNodeWithTemplate>;
		readonly wpNodeWithTitle: Maybe<WpNodeWithTitle>;
		readonly wpNodeWithTrackbacks: Maybe<WpNodeWithTrackbacks>;
		readonly wpPage: Maybe<WpPage>;
		readonly wpPost: Maybe<WpPost>;
		readonly wpPostFormat: Maybe<WpPostFormat>;
		readonly wpTag: Maybe<WpTag>;
		readonly wpTaxonomy: Maybe<WpTaxonomy>;
		readonly wpTermNode: Maybe<WpTermNode>;
		readonly wpUniformResourceIdentifiable: Maybe<WpUniformResourceIdentifiable>;
		readonly wpUser: Maybe<WpUser>;
		readonly wpUserRole: Maybe<WpUserRole>;
	};

	type Query_allDirectoryArgs = {
		filter: InputMaybe<DirectoryFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<DirectorySortInput>;
	};

	type Query_allFileArgs = {
		filter: InputMaybe<FileFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<FileSortInput>;
	};

	type Query_allImageSharpArgs = {
		filter: InputMaybe<ImageSharpFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ImageSharpSortInput>;
	};

	type Query_allSiteArgs = {
		filter: InputMaybe<SiteFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<SiteSortInput>;
	};

	type Query_allSiteBuildMetadataArgs = {
		filter: InputMaybe<SiteBuildMetadataFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<SiteBuildMetadataSortInput>;
	};

	type Query_allSiteFunctionArgs = {
		filter: InputMaybe<SiteFunctionFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<SiteFunctionSortInput>;
	};

	type Query_allSitePageArgs = {
		filter: InputMaybe<SitePageFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<SitePageSortInput>;
	};

	type Query_allSitePluginArgs = {
		filter: InputMaybe<SitePluginFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<SitePluginSortInput>;
	};

	type Query_allWpArgs = {
		filter: InputMaybe<WpFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<WpSortInput>;
	};

	type Query_allWpCategoryArgs = {
		filter: InputMaybe<WpCategoryFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<WpCategorySortInput>;
	};

	type Query_allWpCommentArgs = {
		filter: InputMaybe<WpCommentFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<WpCommentSortInput>;
	};

	type Query_allWpCommentAuthorArgs = {
		filter: InputMaybe<WpCommentAuthorFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<WpCommentAuthorSortInput>;
	};

	type Query_allWpCommenterArgs = {
		filter: InputMaybe<WpCommenterFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<WpCommenterSortInput>;
	};

	type Query_allWpContentNodeArgs = {
		filter: InputMaybe<WpContentNodeFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<WpContentNodeSortInput>;
	};

	type Query_allWpContentTypeArgs = {
		filter: InputMaybe<WpContentTypeFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<WpContentTypeSortInput>;
	};

	type Query_allWpGraphqlDocumentArgs = {
		filter: InputMaybe<WpGraphqlDocumentFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<WpGraphqlDocumentSortInput>;
	};

	type Query_allWpHierarchicalContentNodeArgs = {
		filter: InputMaybe<WpHierarchicalContentNodeFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<WpHierarchicalContentNodeSortInput>;
	};

	type Query_allWpHierarchicalNodeArgs = {
		filter: InputMaybe<WpHierarchicalNodeFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<WpHierarchicalNodeSortInput>;
	};

	type Query_allWpHierarchicalTermNodeArgs = {
		filter: InputMaybe<WpHierarchicalTermNodeFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<WpHierarchicalTermNodeSortInput>;
	};

	type Query_allWpMediaItemArgs = {
		filter: InputMaybe<WpMediaItemFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<WpMediaItemSortInput>;
	};

	type Query_allWpMenuArgs = {
		filter: InputMaybe<WpMenuFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<WpMenuSortInput>;
	};

	type Query_allWpMenuItemArgs = {
		filter: InputMaybe<WpMenuItemFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<WpMenuItemSortInput>;
	};

	type Query_allWpMenuItemLinkableArgs = {
		filter: InputMaybe<WpMenuItemLinkableFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<WpMenuItemLinkableSortInput>;
	};

	type Query_allWpNodeWithAuthorArgs = {
		filter: InputMaybe<WpNodeWithAuthorFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<WpNodeWithAuthorSortInput>;
	};

	type Query_allWpNodeWithCommentsArgs = {
		filter: InputMaybe<WpNodeWithCommentsFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<WpNodeWithCommentsSortInput>;
	};

	type Query_allWpNodeWithContentEditorArgs = {
		filter: InputMaybe<WpNodeWithContentEditorFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<WpNodeWithContentEditorSortInput>;
	};

	type Query_allWpNodeWithExcerptArgs = {
		filter: InputMaybe<WpNodeWithExcerptFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<WpNodeWithExcerptSortInput>;
	};

	type Query_allWpNodeWithFeaturedImageArgs = {
		filter: InputMaybe<WpNodeWithFeaturedImageFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<WpNodeWithFeaturedImageSortInput>;
	};

	type Query_allWpNodeWithPageAttributesArgs = {
		filter: InputMaybe<WpNodeWithPageAttributesFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<WpNodeWithPageAttributesSortInput>;
	};

	type Query_allWpNodeWithRevisionsArgs = {
		filter: InputMaybe<WpNodeWithRevisionsFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<WpNodeWithRevisionsSortInput>;
	};

	type Query_allWpNodeWithTemplateArgs = {
		filter: InputMaybe<WpNodeWithTemplateFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<WpNodeWithTemplateSortInput>;
	};

	type Query_allWpNodeWithTitleArgs = {
		filter: InputMaybe<WpNodeWithTitleFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<WpNodeWithTitleSortInput>;
	};

	type Query_allWpNodeWithTrackbacksArgs = {
		filter: InputMaybe<WpNodeWithTrackbacksFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<WpNodeWithTrackbacksSortInput>;
	};

	type Query_allWpPageArgs = {
		filter: InputMaybe<WpPageFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<WpPageSortInput>;
	};

	type Query_allWpPostArgs = {
		filter: InputMaybe<WpPostFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<WpPostSortInput>;
	};

	type Query_allWpPostFormatArgs = {
		filter: InputMaybe<WpPostFormatFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<WpPostFormatSortInput>;
	};

	type Query_allWpTagArgs = {
		filter: InputMaybe<WpTagFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<WpTagSortInput>;
	};

	type Query_allWpTaxonomyArgs = {
		filter: InputMaybe<WpTaxonomyFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<WpTaxonomySortInput>;
	};

	type Query_allWpTermNodeArgs = {
		filter: InputMaybe<WpTermNodeFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<WpTermNodeSortInput>;
	};

	type Query_allWpUniformResourceIdentifiableArgs = {
		filter: InputMaybe<WpUniformResourceIdentifiableFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<WpUniformResourceIdentifiableSortInput>;
	};

	type Query_allWpUserArgs = {
		filter: InputMaybe<WpUserFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<WpUserSortInput>;
	};

	type Query_allWpUserRoleArgs = {
		filter: InputMaybe<WpUserRoleFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<WpUserRoleSortInput>;
	};

	type Query_directoryArgs = {
		absolutePath: InputMaybe<StringQueryOperatorInput>;
		accessTime: InputMaybe<DateQueryOperatorInput>;
		atime: InputMaybe<DateQueryOperatorInput>;
		atimeMs: InputMaybe<FloatQueryOperatorInput>;
		base: InputMaybe<StringQueryOperatorInput>;
		birthTime: InputMaybe<DateQueryOperatorInput>;
		birthtime: InputMaybe<DateQueryOperatorInput>;
		birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
		changeTime: InputMaybe<DateQueryOperatorInput>;
		children: InputMaybe<NodeFilterListInput>;
		ctime: InputMaybe<DateQueryOperatorInput>;
		ctimeMs: InputMaybe<FloatQueryOperatorInput>;
		dev: InputMaybe<IntQueryOperatorInput>;
		dir: InputMaybe<StringQueryOperatorInput>;
		ext: InputMaybe<StringQueryOperatorInput>;
		extension: InputMaybe<StringQueryOperatorInput>;
		gid: InputMaybe<IntQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		ino: InputMaybe<FloatQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		mode: InputMaybe<IntQueryOperatorInput>;
		modifiedTime: InputMaybe<DateQueryOperatorInput>;
		mtime: InputMaybe<DateQueryOperatorInput>;
		mtimeMs: InputMaybe<FloatQueryOperatorInput>;
		name: InputMaybe<StringQueryOperatorInput>;
		nlink: InputMaybe<IntQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		prettySize: InputMaybe<StringQueryOperatorInput>;
		rdev: InputMaybe<IntQueryOperatorInput>;
		relativeDirectory: InputMaybe<StringQueryOperatorInput>;
		relativePath: InputMaybe<StringQueryOperatorInput>;
		root: InputMaybe<StringQueryOperatorInput>;
		size: InputMaybe<IntQueryOperatorInput>;
		sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
		uid: InputMaybe<IntQueryOperatorInput>;
	};

	type Query_fileArgs = {
		absolutePath: InputMaybe<StringQueryOperatorInput>;
		accessTime: InputMaybe<DateQueryOperatorInput>;
		atime: InputMaybe<DateQueryOperatorInput>;
		atimeMs: InputMaybe<FloatQueryOperatorInput>;
		base: InputMaybe<StringQueryOperatorInput>;
		birthTime: InputMaybe<DateQueryOperatorInput>;
		birthtime: InputMaybe<DateQueryOperatorInput>;
		birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
		blksize: InputMaybe<IntQueryOperatorInput>;
		blocks: InputMaybe<IntQueryOperatorInput>;
		changeTime: InputMaybe<DateQueryOperatorInput>;
		childImageSharp: InputMaybe<ImageSharpFilterInput>;
		children: InputMaybe<NodeFilterListInput>;
		childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
		ctime: InputMaybe<DateQueryOperatorInput>;
		ctimeMs: InputMaybe<FloatQueryOperatorInput>;
		dev: InputMaybe<IntQueryOperatorInput>;
		dir: InputMaybe<StringQueryOperatorInput>;
		ext: InputMaybe<StringQueryOperatorInput>;
		extension: InputMaybe<StringQueryOperatorInput>;
		gid: InputMaybe<IntQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		ino: InputMaybe<FloatQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		mode: InputMaybe<IntQueryOperatorInput>;
		modifiedTime: InputMaybe<DateQueryOperatorInput>;
		mtime: InputMaybe<DateQueryOperatorInput>;
		mtimeMs: InputMaybe<FloatQueryOperatorInput>;
		name: InputMaybe<StringQueryOperatorInput>;
		nlink: InputMaybe<IntQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		prettySize: InputMaybe<StringQueryOperatorInput>;
		publicURL: InputMaybe<StringQueryOperatorInput>;
		rdev: InputMaybe<IntQueryOperatorInput>;
		relativeDirectory: InputMaybe<StringQueryOperatorInput>;
		relativePath: InputMaybe<StringQueryOperatorInput>;
		root: InputMaybe<StringQueryOperatorInput>;
		size: InputMaybe<IntQueryOperatorInput>;
		sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
		uid: InputMaybe<IntQueryOperatorInput>;
		url: InputMaybe<StringQueryOperatorInput>;
	};

	type Query_imageSharpArgs = {
		children: InputMaybe<NodeFilterListInput>;
		fixed: InputMaybe<ImageSharpFixedFilterInput>;
		fluid: InputMaybe<ImageSharpFluidFilterInput>;
		gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		original: InputMaybe<ImageSharpOriginalFilterInput>;
		parent: InputMaybe<NodeFilterInput>;
		resize: InputMaybe<ImageSharpResizeFilterInput>;
	};

	type Query_siteArgs = {
		buildTime: InputMaybe<DateQueryOperatorInput>;
		children: InputMaybe<NodeFilterListInput>;
		graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
		host: InputMaybe<StringQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		jsxRuntime: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		pathPrefix: InputMaybe<StringQueryOperatorInput>;
		polyfill: InputMaybe<BooleanQueryOperatorInput>;
		port: InputMaybe<IntQueryOperatorInput>;
		siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
		trailingSlash: InputMaybe<StringQueryOperatorInput>;
	};

	type Query_siteBuildMetadataArgs = {
		buildTime: InputMaybe<DateQueryOperatorInput>;
		children: InputMaybe<NodeFilterListInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		parent: InputMaybe<NodeFilterInput>;
	};

	type Query_siteFunctionArgs = {
		absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
		children: InputMaybe<NodeFilterListInput>;
		functionRoute: InputMaybe<StringQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		matchPath: InputMaybe<StringQueryOperatorInput>;
		originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
		originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		pluginName: InputMaybe<StringQueryOperatorInput>;
		relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
	};

	type Query_sitePageArgs = {
		children: InputMaybe<NodeFilterListInput>;
		component: InputMaybe<StringQueryOperatorInput>;
		componentChunkName: InputMaybe<StringQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		internalComponentName: InputMaybe<StringQueryOperatorInput>;
		matchPath: InputMaybe<StringQueryOperatorInput>;
		pageContext: InputMaybe<JSONQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		path: InputMaybe<StringQueryOperatorInput>;
		pluginCreator: InputMaybe<SitePluginFilterInput>;
	};

	type Query_sitePluginArgs = {
		browserAPIs: InputMaybe<StringQueryOperatorInput>;
		children: InputMaybe<NodeFilterListInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		name: InputMaybe<StringQueryOperatorInput>;
		nodeAPIs: InputMaybe<StringQueryOperatorInput>;
		packageJson: InputMaybe<JSONQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		pluginFilepath: InputMaybe<StringQueryOperatorInput>;
		pluginOptions: InputMaybe<JSONQueryOperatorInput>;
		resolve: InputMaybe<StringQueryOperatorInput>;
		ssrAPIs: InputMaybe<StringQueryOperatorInput>;
		version: InputMaybe<StringQueryOperatorInput>;
	};

	type Query_wpArgs = {
		allSettings: InputMaybe<WpSettingsFilterInput>;
		children: InputMaybe<NodeFilterListInput>;
		discussionSettings: InputMaybe<WpDiscussionSettingsFilterInput>;
		generalSettings: InputMaybe<WpGeneralSettingsFilterInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		nodeType: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		readingSettings: InputMaybe<WpReadingSettingsFilterInput>;
		wpGatsby: InputMaybe<WpWPGatsbyFilterInput>;
		writingSettings: InputMaybe<WpWritingSettingsFilterInput>;
	};

	type Query_wpCategoryArgs = {
		ancestors: InputMaybe<WpCategoryToAncestorsCategoryConnectionTypeFilterInput>;
		children: InputMaybe<NodeFilterListInput>;
		contentNodes: InputMaybe<WpCategoryToContentNodeConnectionTypeFilterInput>;
		count: InputMaybe<IntQueryOperatorInput>;
		databaseId: InputMaybe<IntQueryOperatorInput>;
		description: InputMaybe<StringQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		isContentNode: InputMaybe<BooleanQueryOperatorInput>;
		isTermNode: InputMaybe<BooleanQueryOperatorInput>;
		link: InputMaybe<StringQueryOperatorInput>;
		name: InputMaybe<StringQueryOperatorInput>;
		nodeType: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		parentDatabaseId: InputMaybe<IntQueryOperatorInput>;
		parentId: InputMaybe<IDQueryOperatorInput>;
		posts: InputMaybe<WpCategoryToPostConnectionTypeFilterInput>;
		slug: InputMaybe<StringQueryOperatorInput>;
		taxonomy: InputMaybe<WpCategoryToTaxonomyConnectionEdgeTypeFilterInput>;
		taxonomyName: InputMaybe<StringQueryOperatorInput>;
		termGroupId: InputMaybe<IntQueryOperatorInput>;
		termTaxonomyId: InputMaybe<IntQueryOperatorInput>;
		uri: InputMaybe<StringQueryOperatorInput>;
		wpChildren: InputMaybe<WpCategoryToCategoryConnectionTypeFilterInput>;
		wpParent: InputMaybe<WpCategoryToParentCategoryConnectionEdgeTypeFilterInput>;
	};

	type Query_wpCommentArgs = {
		agent: InputMaybe<StringQueryOperatorInput>;
		author: InputMaybe<WpCommentToCommenterConnectionEdgeTypeFilterInput>;
		authorIp: InputMaybe<StringQueryOperatorInput>;
		children: InputMaybe<NodeFilterListInput>;
		commentedOn: InputMaybe<WpCommentToContentNodeConnectionEdgeTypeFilterInput>;
		content: InputMaybe<StringQueryOperatorInput>;
		databaseId: InputMaybe<IntQueryOperatorInput>;
		date: InputMaybe<DateQueryOperatorInput>;
		dateGmt: InputMaybe<DateQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		karma: InputMaybe<IntQueryOperatorInput>;
		nodeType: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		parentDatabaseId: InputMaybe<IntQueryOperatorInput>;
		parentId: InputMaybe<IDQueryOperatorInput>;
		replies: InputMaybe<WpCommentToCommentConnectionTypeFilterInput>;
		status: InputMaybe<WpCommentStatusEnumQueryOperatorInput>;
		type: InputMaybe<StringQueryOperatorInput>;
		wpParent: InputMaybe<WpCommentToParentCommentConnectionEdgeTypeFilterInput>;
	};

	type Query_wpCommentAuthorArgs = {
		avatar: InputMaybe<WpAvatarFilterInput>;
		children: InputMaybe<NodeFilterListInput>;
		databaseId: InputMaybe<IntQueryOperatorInput>;
		email: InputMaybe<StringQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		name: InputMaybe<StringQueryOperatorInput>;
		nodeType: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		url: InputMaybe<StringQueryOperatorInput>;
	};

	type Query_wpCommenterArgs = {
		avatar: InputMaybe<WpAvatarFilterInput>;
		children: InputMaybe<NodeFilterListInput>;
		databaseId: InputMaybe<IntQueryOperatorInput>;
		email: InputMaybe<StringQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		name: InputMaybe<StringQueryOperatorInput>;
		nodeType: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		url: InputMaybe<StringQueryOperatorInput>;
	};

	type Query_wpContentNodeArgs = {
		children: InputMaybe<NodeFilterListInput>;
		contentType: InputMaybe<WpContentNodeToContentTypeConnectionEdgeTypeFilterInput>;
		contentTypeName: InputMaybe<StringQueryOperatorInput>;
		databaseId: InputMaybe<IntQueryOperatorInput>;
		date: InputMaybe<DateQueryOperatorInput>;
		dateGmt: InputMaybe<DateQueryOperatorInput>;
		desiredSlug: InputMaybe<StringQueryOperatorInput>;
		enclosure: InputMaybe<StringQueryOperatorInput>;
		guid: InputMaybe<StringQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		isContentNode: InputMaybe<BooleanQueryOperatorInput>;
		isTermNode: InputMaybe<BooleanQueryOperatorInput>;
		lastEditedBy: InputMaybe<WpContentNodeToEditLastConnectionEdgeTypeFilterInput>;
		link: InputMaybe<StringQueryOperatorInput>;
		modified: InputMaybe<DateQueryOperatorInput>;
		modifiedGmt: InputMaybe<DateQueryOperatorInput>;
		nodeType: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		slug: InputMaybe<StringQueryOperatorInput>;
		status: InputMaybe<StringQueryOperatorInput>;
		template: InputMaybe<WpContentTemplateFilterInput>;
		uri: InputMaybe<StringQueryOperatorInput>;
	};

	type Query_wpContentTypeArgs = {
		archivePath: InputMaybe<StringQueryOperatorInput>;
		canExport: InputMaybe<BooleanQueryOperatorInput>;
		children: InputMaybe<NodeFilterListInput>;
		connectedTaxonomies: InputMaybe<WpContentTypeToTaxonomyConnectionTypeFilterInput>;
		contentNodes: InputMaybe<WpContentTypeToContentNodeConnectionTypeFilterInput>;
		deleteWithUser: InputMaybe<BooleanQueryOperatorInput>;
		description: InputMaybe<StringQueryOperatorInput>;
		excludeFromSearch: InputMaybe<BooleanQueryOperatorInput>;
		graphqlPluralName: InputMaybe<StringQueryOperatorInput>;
		graphqlSingleName: InputMaybe<StringQueryOperatorInput>;
		hasArchive: InputMaybe<BooleanQueryOperatorInput>;
		hierarchical: InputMaybe<BooleanQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		isContentNode: InputMaybe<BooleanQueryOperatorInput>;
		isFrontPage: InputMaybe<BooleanQueryOperatorInput>;
		isPostsPage: InputMaybe<BooleanQueryOperatorInput>;
		isTermNode: InputMaybe<BooleanQueryOperatorInput>;
		label: InputMaybe<StringQueryOperatorInput>;
		labels: InputMaybe<WpPostTypeLabelDetailsFilterInput>;
		menuIcon: InputMaybe<StringQueryOperatorInput>;
		menuPosition: InputMaybe<IntQueryOperatorInput>;
		name: InputMaybe<StringQueryOperatorInput>;
		nodeType: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		public: InputMaybe<BooleanQueryOperatorInput>;
		publiclyQueryable: InputMaybe<BooleanQueryOperatorInput>;
		restBase: InputMaybe<StringQueryOperatorInput>;
		restControllerClass: InputMaybe<StringQueryOperatorInput>;
		showInAdminBar: InputMaybe<BooleanQueryOperatorInput>;
		showInGraphql: InputMaybe<BooleanQueryOperatorInput>;
		showInMenu: InputMaybe<BooleanQueryOperatorInput>;
		showInNavMenus: InputMaybe<BooleanQueryOperatorInput>;
		showInRest: InputMaybe<BooleanQueryOperatorInput>;
		showUi: InputMaybe<BooleanQueryOperatorInput>;
		uri: InputMaybe<StringQueryOperatorInput>;
	};

	type Query_wpGraphqlDocumentArgs = {
		alias: InputMaybe<StringQueryOperatorInput>;
		children: InputMaybe<NodeFilterListInput>;
		content: InputMaybe<StringQueryOperatorInput>;
		contentType: InputMaybe<WpContentNodeToContentTypeConnectionEdgeTypeFilterInput>;
		contentTypeName: InputMaybe<StringQueryOperatorInput>;
		databaseId: InputMaybe<IntQueryOperatorInput>;
		date: InputMaybe<DateQueryOperatorInput>;
		dateGmt: InputMaybe<DateQueryOperatorInput>;
		description: InputMaybe<StringQueryOperatorInput>;
		desiredSlug: InputMaybe<StringQueryOperatorInput>;
		enclosure: InputMaybe<StringQueryOperatorInput>;
		grant: InputMaybe<StringQueryOperatorInput>;
		guid: InputMaybe<StringQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		isContentNode: InputMaybe<BooleanQueryOperatorInput>;
		isTermNode: InputMaybe<BooleanQueryOperatorInput>;
		lastEditedBy: InputMaybe<WpContentNodeToEditLastConnectionEdgeTypeFilterInput>;
		link: InputMaybe<StringQueryOperatorInput>;
		maxAgeHeader: InputMaybe<IntQueryOperatorInput>;
		modified: InputMaybe<DateQueryOperatorInput>;
		modifiedGmt: InputMaybe<DateQueryOperatorInput>;
		nodeType: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		slug: InputMaybe<StringQueryOperatorInput>;
		status: InputMaybe<StringQueryOperatorInput>;
		template: InputMaybe<WpContentTemplateFilterInput>;
		title: InputMaybe<StringQueryOperatorInput>;
		uri: InputMaybe<StringQueryOperatorInput>;
	};

	type Query_wpHierarchicalContentNodeArgs = {
		ancestors: InputMaybe<WpHierarchicalContentNodeToContentNodeAncestorsConnectionTypeFilterInput>;
		children: InputMaybe<NodeFilterListInput>;
		contentType: InputMaybe<WpContentNodeToContentTypeConnectionEdgeTypeFilterInput>;
		contentTypeName: InputMaybe<StringQueryOperatorInput>;
		databaseId: InputMaybe<IntQueryOperatorInput>;
		date: InputMaybe<DateQueryOperatorInput>;
		dateGmt: InputMaybe<DateQueryOperatorInput>;
		desiredSlug: InputMaybe<StringQueryOperatorInput>;
		enclosure: InputMaybe<StringQueryOperatorInput>;
		guid: InputMaybe<StringQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		isContentNode: InputMaybe<BooleanQueryOperatorInput>;
		isTermNode: InputMaybe<BooleanQueryOperatorInput>;
		lastEditedBy: InputMaybe<WpContentNodeToEditLastConnectionEdgeTypeFilterInput>;
		link: InputMaybe<StringQueryOperatorInput>;
		modified: InputMaybe<DateQueryOperatorInput>;
		modifiedGmt: InputMaybe<DateQueryOperatorInput>;
		nodeType: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		parentDatabaseId: InputMaybe<IntQueryOperatorInput>;
		parentId: InputMaybe<IDQueryOperatorInput>;
		slug: InputMaybe<StringQueryOperatorInput>;
		status: InputMaybe<StringQueryOperatorInput>;
		template: InputMaybe<WpContentTemplateFilterInput>;
		uri: InputMaybe<StringQueryOperatorInput>;
		wpChildren: InputMaybe<WpHierarchicalContentNodeToContentNodeChildrenConnectionTypeFilterInput>;
		wpParent: InputMaybe<WpHierarchicalContentNodeToParentContentNodeConnectionEdgeTypeFilterInput>;
	};

	type Query_wpHierarchicalNodeArgs = {
		children: InputMaybe<NodeFilterListInput>;
		databaseId: InputMaybe<IntQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		nodeType: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		parentDatabaseId: InputMaybe<IntQueryOperatorInput>;
		parentId: InputMaybe<IDQueryOperatorInput>;
	};

	type Query_wpHierarchicalTermNodeArgs = {
		children: InputMaybe<NodeFilterListInput>;
		count: InputMaybe<IntQueryOperatorInput>;
		databaseId: InputMaybe<IntQueryOperatorInput>;
		description: InputMaybe<StringQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		isContentNode: InputMaybe<BooleanQueryOperatorInput>;
		isTermNode: InputMaybe<BooleanQueryOperatorInput>;
		link: InputMaybe<StringQueryOperatorInput>;
		name: InputMaybe<StringQueryOperatorInput>;
		nodeType: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		parentDatabaseId: InputMaybe<IntQueryOperatorInput>;
		parentId: InputMaybe<IDQueryOperatorInput>;
		slug: InputMaybe<StringQueryOperatorInput>;
		taxonomyName: InputMaybe<StringQueryOperatorInput>;
		termGroupId: InputMaybe<IntQueryOperatorInput>;
		termTaxonomyId: InputMaybe<IntQueryOperatorInput>;
		uri: InputMaybe<StringQueryOperatorInput>;
	};

	type Query_wpMediaItemArgs = {
		altText: InputMaybe<StringQueryOperatorInput>;
		ancestors: InputMaybe<WpHierarchicalContentNodeToContentNodeAncestorsConnectionTypeFilterInput>;
		author: InputMaybe<WpNodeWithAuthorToUserConnectionEdgeTypeFilterInput>;
		authorDatabaseId: InputMaybe<IntQueryOperatorInput>;
		authorId: InputMaybe<IDQueryOperatorInput>;
		caption: InputMaybe<StringQueryOperatorInput>;
		children: InputMaybe<NodeFilterListInput>;
		commentCount: InputMaybe<IntQueryOperatorInput>;
		commentStatus: InputMaybe<StringQueryOperatorInput>;
		comments: InputMaybe<WpMediaItemToCommentConnectionTypeFilterInput>;
		contentType: InputMaybe<WpContentNodeToContentTypeConnectionEdgeTypeFilterInput>;
		contentTypeName: InputMaybe<StringQueryOperatorInput>;
		databaseId: InputMaybe<IntQueryOperatorInput>;
		date: InputMaybe<DateQueryOperatorInput>;
		dateGmt: InputMaybe<DateQueryOperatorInput>;
		description: InputMaybe<StringQueryOperatorInput>;
		desiredSlug: InputMaybe<StringQueryOperatorInput>;
		enclosure: InputMaybe<StringQueryOperatorInput>;
		fileSize: InputMaybe<IntQueryOperatorInput>;
		filename: InputMaybe<StringQueryOperatorInput>;
		filesize: InputMaybe<IntQueryOperatorInput>;
		gatsbyImage: InputMaybe<GatsbyImageDataQueryOperatorInput>;
		guid: InputMaybe<StringQueryOperatorInput>;
		height: InputMaybe<IntQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		isContentNode: InputMaybe<BooleanQueryOperatorInput>;
		isTermNode: InputMaybe<BooleanQueryOperatorInput>;
		lastEditedBy: InputMaybe<WpContentNodeToEditLastConnectionEdgeTypeFilterInput>;
		link: InputMaybe<StringQueryOperatorInput>;
		localFile: InputMaybe<FileFilterInput>;
		mediaDetails: InputMaybe<WpMediaDetailsFilterInput>;
		mediaItemUrl: InputMaybe<StringQueryOperatorInput>;
		mediaType: InputMaybe<StringQueryOperatorInput>;
		mimeType: InputMaybe<StringQueryOperatorInput>;
		modified: InputMaybe<DateQueryOperatorInput>;
		modifiedGmt: InputMaybe<DateQueryOperatorInput>;
		nodeType: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		parentDatabaseId: InputMaybe<IntQueryOperatorInput>;
		parentId: InputMaybe<IDQueryOperatorInput>;
		publicUrl: InputMaybe<StringQueryOperatorInput>;
		resize: InputMaybe<RemoteFileResizeFilterInput>;
		sizes: InputMaybe<StringQueryOperatorInput>;
		slug: InputMaybe<StringQueryOperatorInput>;
		sourceUrl: InputMaybe<StringQueryOperatorInput>;
		srcSet: InputMaybe<StringQueryOperatorInput>;
		status: InputMaybe<StringQueryOperatorInput>;
		template: InputMaybe<WpContentTemplateFilterInput>;
		title: InputMaybe<StringQueryOperatorInput>;
		uri: InputMaybe<StringQueryOperatorInput>;
		width: InputMaybe<IntQueryOperatorInput>;
		wpChildren: InputMaybe<WpHierarchicalContentNodeToContentNodeChildrenConnectionTypeFilterInput>;
		wpParent: InputMaybe<WpHierarchicalContentNodeToParentContentNodeConnectionEdgeTypeFilterInput>;
	};

	type Query_wpMenuArgs = {
		children: InputMaybe<NodeFilterListInput>;
		count: InputMaybe<IntQueryOperatorInput>;
		databaseId: InputMaybe<IntQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		locations: InputMaybe<WpMenuLocationEnumQueryOperatorInput>;
		menuItems: InputMaybe<WpMenuToMenuItemConnectionTypeFilterInput>;
		name: InputMaybe<StringQueryOperatorInput>;
		nodeType: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		slug: InputMaybe<StringQueryOperatorInput>;
	};

	type Query_wpMenuItemArgs = {
		childItems: InputMaybe<WpMenuItemToMenuItemConnectionTypeFilterInput>;
		children: InputMaybe<NodeFilterListInput>;
		connectedNode: InputMaybe<WpMenuItemToMenuItemLinkableConnectionEdgeTypeFilterInput>;
		cssClasses: InputMaybe<StringQueryOperatorInput>;
		databaseId: InputMaybe<IntQueryOperatorInput>;
		description: InputMaybe<StringQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		label: InputMaybe<StringQueryOperatorInput>;
		linkRelationship: InputMaybe<StringQueryOperatorInput>;
		locations: InputMaybe<WpMenuLocationEnumQueryOperatorInput>;
		menu: InputMaybe<WpMenuItemToMenuConnectionEdgeTypeFilterInput>;
		nodeType: InputMaybe<StringQueryOperatorInput>;
		order: InputMaybe<IntQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		parentDatabaseId: InputMaybe<IntQueryOperatorInput>;
		parentId: InputMaybe<IDQueryOperatorInput>;
		path: InputMaybe<StringQueryOperatorInput>;
		target: InputMaybe<StringQueryOperatorInput>;
		title: InputMaybe<StringQueryOperatorInput>;
		uri: InputMaybe<StringQueryOperatorInput>;
		url: InputMaybe<StringQueryOperatorInput>;
	};

	type Query_wpMenuItemLinkableArgs = {
		children: InputMaybe<NodeFilterListInput>;
		databaseId: InputMaybe<IntQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		isContentNode: InputMaybe<BooleanQueryOperatorInput>;
		isTermNode: InputMaybe<BooleanQueryOperatorInput>;
		nodeType: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		uri: InputMaybe<StringQueryOperatorInput>;
	};

	type Query_wpNodeWithAuthorArgs = {
		author: InputMaybe<WpNodeWithAuthorToUserConnectionEdgeTypeFilterInput>;
		authorDatabaseId: InputMaybe<IntQueryOperatorInput>;
		authorId: InputMaybe<IDQueryOperatorInput>;
		children: InputMaybe<NodeFilterListInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		nodeType: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
	};

	type Query_wpNodeWithCommentsArgs = {
		children: InputMaybe<NodeFilterListInput>;
		commentCount: InputMaybe<IntQueryOperatorInput>;
		commentStatus: InputMaybe<StringQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		nodeType: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
	};

	type Query_wpNodeWithContentEditorArgs = {
		children: InputMaybe<NodeFilterListInput>;
		content: InputMaybe<StringQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		nodeType: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
	};

	type Query_wpNodeWithExcerptArgs = {
		children: InputMaybe<NodeFilterListInput>;
		excerpt: InputMaybe<StringQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		nodeType: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
	};

	type Query_wpNodeWithFeaturedImageArgs = {
		children: InputMaybe<NodeFilterListInput>;
		featuredImage: InputMaybe<WpNodeWithFeaturedImageToMediaItemConnectionEdgeTypeFilterInput>;
		featuredImageDatabaseId: InputMaybe<IntQueryOperatorInput>;
		featuredImageId: InputMaybe<IDQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		nodeType: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
	};

	type Query_wpNodeWithPageAttributesArgs = {
		children: InputMaybe<NodeFilterListInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		menuOrder: InputMaybe<IntQueryOperatorInput>;
		nodeType: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
	};

	type Query_wpNodeWithRevisionsArgs = {
		children: InputMaybe<NodeFilterListInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		isRevision: InputMaybe<BooleanQueryOperatorInput>;
		nodeType: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
	};

	type Query_wpNodeWithTemplateArgs = {
		children: InputMaybe<NodeFilterListInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		nodeType: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		template: InputMaybe<WpContentTemplateFilterInput>;
	};

	type Query_wpNodeWithTitleArgs = {
		children: InputMaybe<NodeFilterListInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		nodeType: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		title: InputMaybe<StringQueryOperatorInput>;
	};

	type Query_wpNodeWithTrackbacksArgs = {
		children: InputMaybe<NodeFilterListInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		nodeType: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		pingStatus: InputMaybe<StringQueryOperatorInput>;
		pinged: InputMaybe<StringQueryOperatorInput>;
		toPing: InputMaybe<StringQueryOperatorInput>;
	};

	type Query_wpPageArgs = {
		ancestors: InputMaybe<WpHierarchicalContentNodeToContentNodeAncestorsConnectionTypeFilterInput>;
		author: InputMaybe<WpNodeWithAuthorToUserConnectionEdgeTypeFilterInput>;
		authorDatabaseId: InputMaybe<IntQueryOperatorInput>;
		authorId: InputMaybe<IDQueryOperatorInput>;
		children: InputMaybe<NodeFilterListInput>;
		commentCount: InputMaybe<IntQueryOperatorInput>;
		commentStatus: InputMaybe<StringQueryOperatorInput>;
		comments: InputMaybe<WpPageToCommentConnectionTypeFilterInput>;
		content: InputMaybe<StringQueryOperatorInput>;
		contentType: InputMaybe<WpContentNodeToContentTypeConnectionEdgeTypeFilterInput>;
		contentTypeName: InputMaybe<StringQueryOperatorInput>;
		databaseId: InputMaybe<IntQueryOperatorInput>;
		date: InputMaybe<DateQueryOperatorInput>;
		dateGmt: InputMaybe<DateQueryOperatorInput>;
		desiredSlug: InputMaybe<StringQueryOperatorInput>;
		enclosure: InputMaybe<StringQueryOperatorInput>;
		featuredImage: InputMaybe<WpNodeWithFeaturedImageToMediaItemConnectionEdgeTypeFilterInput>;
		featuredImageDatabaseId: InputMaybe<IntQueryOperatorInput>;
		featuredImageId: InputMaybe<IDQueryOperatorInput>;
		guid: InputMaybe<StringQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		isContentNode: InputMaybe<BooleanQueryOperatorInput>;
		isFrontPage: InputMaybe<BooleanQueryOperatorInput>;
		isPostsPage: InputMaybe<BooleanQueryOperatorInput>;
		isPrivacyPage: InputMaybe<BooleanQueryOperatorInput>;
		isRevision: InputMaybe<BooleanQueryOperatorInput>;
		isTermNode: InputMaybe<BooleanQueryOperatorInput>;
		lastEditedBy: InputMaybe<WpContentNodeToEditLastConnectionEdgeTypeFilterInput>;
		link: InputMaybe<StringQueryOperatorInput>;
		menuOrder: InputMaybe<IntQueryOperatorInput>;
		modified: InputMaybe<DateQueryOperatorInput>;
		modifiedGmt: InputMaybe<DateQueryOperatorInput>;
		nodeType: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		parentDatabaseId: InputMaybe<IntQueryOperatorInput>;
		parentId: InputMaybe<IDQueryOperatorInput>;
		slug: InputMaybe<StringQueryOperatorInput>;
		status: InputMaybe<StringQueryOperatorInput>;
		template: InputMaybe<WpContentTemplateFilterInput>;
		title: InputMaybe<StringQueryOperatorInput>;
		uri: InputMaybe<StringQueryOperatorInput>;
		wpChildren: InputMaybe<WpHierarchicalContentNodeToContentNodeChildrenConnectionTypeFilterInput>;
		wpParent: InputMaybe<WpHierarchicalContentNodeToParentContentNodeConnectionEdgeTypeFilterInput>;
	};

	type Query_wpPostArgs = {
		author: InputMaybe<WpNodeWithAuthorToUserConnectionEdgeTypeFilterInput>;
		authorDatabaseId: InputMaybe<IntQueryOperatorInput>;
		authorId: InputMaybe<IDQueryOperatorInput>;
		categories: InputMaybe<WpPostToCategoryConnectionTypeFilterInput>;
		children: InputMaybe<NodeFilterListInput>;
		commentCount: InputMaybe<IntQueryOperatorInput>;
		commentStatus: InputMaybe<StringQueryOperatorInput>;
		comments: InputMaybe<WpPostToCommentConnectionTypeFilterInput>;
		content: InputMaybe<StringQueryOperatorInput>;
		contentType: InputMaybe<WpContentNodeToContentTypeConnectionEdgeTypeFilterInput>;
		contentTypeName: InputMaybe<StringQueryOperatorInput>;
		databaseId: InputMaybe<IntQueryOperatorInput>;
		date: InputMaybe<DateQueryOperatorInput>;
		dateGmt: InputMaybe<DateQueryOperatorInput>;
		desiredSlug: InputMaybe<StringQueryOperatorInput>;
		enclosure: InputMaybe<StringQueryOperatorInput>;
		excerpt: InputMaybe<StringQueryOperatorInput>;
		featuredImage: InputMaybe<WpNodeWithFeaturedImageToMediaItemConnectionEdgeTypeFilterInput>;
		featuredImageDatabaseId: InputMaybe<IntQueryOperatorInput>;
		featuredImageId: InputMaybe<IDQueryOperatorInput>;
		guid: InputMaybe<StringQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		isContentNode: InputMaybe<BooleanQueryOperatorInput>;
		isRevision: InputMaybe<BooleanQueryOperatorInput>;
		isSticky: InputMaybe<BooleanQueryOperatorInput>;
		isTermNode: InputMaybe<BooleanQueryOperatorInput>;
		lastEditedBy: InputMaybe<WpContentNodeToEditLastConnectionEdgeTypeFilterInput>;
		link: InputMaybe<StringQueryOperatorInput>;
		modified: InputMaybe<DateQueryOperatorInput>;
		modifiedGmt: InputMaybe<DateQueryOperatorInput>;
		nodeType: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		pingStatus: InputMaybe<StringQueryOperatorInput>;
		pinged: InputMaybe<StringQueryOperatorInput>;
		postFormats: InputMaybe<WpPostToPostFormatConnectionTypeFilterInput>;
		slug: InputMaybe<StringQueryOperatorInput>;
		status: InputMaybe<StringQueryOperatorInput>;
		tags: InputMaybe<WpPostToTagConnectionTypeFilterInput>;
		template: InputMaybe<WpContentTemplateFilterInput>;
		terms: InputMaybe<WpPostToTermNodeConnectionTypeFilterInput>;
		title: InputMaybe<StringQueryOperatorInput>;
		toPing: InputMaybe<StringQueryOperatorInput>;
		uri: InputMaybe<StringQueryOperatorInput>;
	};

	type Query_wpPostFormatArgs = {
		children: InputMaybe<NodeFilterListInput>;
		contentNodes: InputMaybe<WpPostFormatToContentNodeConnectionTypeFilterInput>;
		count: InputMaybe<IntQueryOperatorInput>;
		databaseId: InputMaybe<IntQueryOperatorInput>;
		description: InputMaybe<StringQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		isContentNode: InputMaybe<BooleanQueryOperatorInput>;
		isTermNode: InputMaybe<BooleanQueryOperatorInput>;
		link: InputMaybe<StringQueryOperatorInput>;
		name: InputMaybe<StringQueryOperatorInput>;
		nodeType: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		posts: InputMaybe<WpPostFormatToPostConnectionTypeFilterInput>;
		slug: InputMaybe<StringQueryOperatorInput>;
		taxonomy: InputMaybe<WpPostFormatToTaxonomyConnectionEdgeTypeFilterInput>;
		taxonomyName: InputMaybe<StringQueryOperatorInput>;
		termGroupId: InputMaybe<IntQueryOperatorInput>;
		termTaxonomyId: InputMaybe<IntQueryOperatorInput>;
		uri: InputMaybe<StringQueryOperatorInput>;
	};

	type Query_wpTagArgs = {
		children: InputMaybe<NodeFilterListInput>;
		contentNodes: InputMaybe<WpTagToContentNodeConnectionTypeFilterInput>;
		count: InputMaybe<IntQueryOperatorInput>;
		databaseId: InputMaybe<IntQueryOperatorInput>;
		description: InputMaybe<StringQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		isContentNode: InputMaybe<BooleanQueryOperatorInput>;
		isTermNode: InputMaybe<BooleanQueryOperatorInput>;
		link: InputMaybe<StringQueryOperatorInput>;
		name: InputMaybe<StringQueryOperatorInput>;
		nodeType: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		posts: InputMaybe<WpTagToPostConnectionTypeFilterInput>;
		slug: InputMaybe<StringQueryOperatorInput>;
		taxonomy: InputMaybe<WpTagToTaxonomyConnectionEdgeTypeFilterInput>;
		taxonomyName: InputMaybe<StringQueryOperatorInput>;
		termGroupId: InputMaybe<IntQueryOperatorInput>;
		termTaxonomyId: InputMaybe<IntQueryOperatorInput>;
		uri: InputMaybe<StringQueryOperatorInput>;
	};

	type Query_wpTaxonomyArgs = {
		archivePath: InputMaybe<StringQueryOperatorInput>;
		children: InputMaybe<NodeFilterListInput>;
		connectedContentTypes: InputMaybe<WpTaxonomyToContentTypeConnectionTypeFilterInput>;
		description: InputMaybe<StringQueryOperatorInput>;
		graphqlPluralName: InputMaybe<StringQueryOperatorInput>;
		graphqlSingleName: InputMaybe<StringQueryOperatorInput>;
		hierarchical: InputMaybe<BooleanQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		label: InputMaybe<StringQueryOperatorInput>;
		name: InputMaybe<StringQueryOperatorInput>;
		nodeType: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		public: InputMaybe<BooleanQueryOperatorInput>;
		restBase: InputMaybe<StringQueryOperatorInput>;
		restControllerClass: InputMaybe<StringQueryOperatorInput>;
		showCloud: InputMaybe<BooleanQueryOperatorInput>;
		showInAdminColumn: InputMaybe<BooleanQueryOperatorInput>;
		showInGraphql: InputMaybe<BooleanQueryOperatorInput>;
		showInMenu: InputMaybe<BooleanQueryOperatorInput>;
		showInNavMenus: InputMaybe<BooleanQueryOperatorInput>;
		showInQuickEdit: InputMaybe<BooleanQueryOperatorInput>;
		showInRest: InputMaybe<BooleanQueryOperatorInput>;
		showUi: InputMaybe<BooleanQueryOperatorInput>;
	};

	type Query_wpTermNodeArgs = {
		children: InputMaybe<NodeFilterListInput>;
		count: InputMaybe<IntQueryOperatorInput>;
		databaseId: InputMaybe<IntQueryOperatorInput>;
		description: InputMaybe<StringQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		isContentNode: InputMaybe<BooleanQueryOperatorInput>;
		isTermNode: InputMaybe<BooleanQueryOperatorInput>;
		link: InputMaybe<StringQueryOperatorInput>;
		name: InputMaybe<StringQueryOperatorInput>;
		nodeType: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		slug: InputMaybe<StringQueryOperatorInput>;
		taxonomyName: InputMaybe<StringQueryOperatorInput>;
		termGroupId: InputMaybe<IntQueryOperatorInput>;
		termTaxonomyId: InputMaybe<IntQueryOperatorInput>;
		uri: InputMaybe<StringQueryOperatorInput>;
	};

	type Query_wpUniformResourceIdentifiableArgs = {
		children: InputMaybe<NodeFilterListInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		isContentNode: InputMaybe<BooleanQueryOperatorInput>;
		isTermNode: InputMaybe<BooleanQueryOperatorInput>;
		nodeType: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		uri: InputMaybe<StringQueryOperatorInput>;
	};

	type Query_wpUserArgs = {
		avatar: InputMaybe<WpAvatarFilterInput>;
		capKey: InputMaybe<StringQueryOperatorInput>;
		capabilities: InputMaybe<StringQueryOperatorInput>;
		children: InputMaybe<NodeFilterListInput>;
		comments: InputMaybe<WpUserToCommentConnectionTypeFilterInput>;
		databaseId: InputMaybe<IntQueryOperatorInput>;
		description: InputMaybe<StringQueryOperatorInput>;
		email: InputMaybe<StringQueryOperatorInput>;
		extraCapabilities: InputMaybe<StringQueryOperatorInput>;
		firstName: InputMaybe<StringQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		isContentNode: InputMaybe<BooleanQueryOperatorInput>;
		isTermNode: InputMaybe<BooleanQueryOperatorInput>;
		lastName: InputMaybe<StringQueryOperatorInput>;
		locale: InputMaybe<StringQueryOperatorInput>;
		name: InputMaybe<StringQueryOperatorInput>;
		nicename: InputMaybe<StringQueryOperatorInput>;
		nickname: InputMaybe<StringQueryOperatorInput>;
		nodeType: InputMaybe<StringQueryOperatorInput>;
		pages: InputMaybe<WpUserToPageConnectionTypeFilterInput>;
		parent: InputMaybe<NodeFilterInput>;
		posts: InputMaybe<WpUserToPostConnectionTypeFilterInput>;
		registeredDate: InputMaybe<StringQueryOperatorInput>;
		roles: InputMaybe<WpUserToUserRoleConnectionTypeFilterInput>;
		slug: InputMaybe<StringQueryOperatorInput>;
		uri: InputMaybe<StringQueryOperatorInput>;
		url: InputMaybe<StringQueryOperatorInput>;
		username: InputMaybe<StringQueryOperatorInput>;
	};

	type Query_wpUserRoleArgs = {
		capabilities: InputMaybe<StringQueryOperatorInput>;
		children: InputMaybe<NodeFilterListInput>;
		displayName: InputMaybe<StringQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		name: InputMaybe<StringQueryOperatorInput>;
		nodeType: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
	};

	/** Remote Interface */
	type RemoteFile = {
		readonly filename: Scalars['String'];
		readonly filesize: Maybe<Scalars['Int']>;
		/** Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info. */
		readonly gatsbyImage: Maybe<Scalars['GatsbyImageData']>;
		readonly height: Maybe<Scalars['Int']>;
		readonly id: Scalars['ID'];
		readonly mimeType: Scalars['String'];
		readonly publicUrl: Scalars['String'];
		readonly resize: Maybe<RemoteFileResize>;
		readonly width: Maybe<Scalars['Int']>;
	};

	/** Remote Interface */
	type RemoteFile_gatsbyImageArgs = {
		aspectRatio: InputMaybe<Scalars['Float']>;
		backgroundColor: InputMaybe<Scalars['String']>;
		breakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
		cropFocus: InputMaybe<ReadonlyArray<InputMaybe<RemoteFileCropFocus>>>;
		fit?: InputMaybe<RemoteFileFit>;
		formats?: InputMaybe<ReadonlyArray<RemoteFileFormat>>;
		height: InputMaybe<Scalars['Int']>;
		layout?: InputMaybe<RemoteFileLayout>;
		outputPixelDensities?: InputMaybe<
			ReadonlyArray<InputMaybe<Scalars['Float']>>
		>;
		placeholder?: InputMaybe<RemoteFilePlaceholder>;
		quality?: InputMaybe<Scalars['Int']>;
		sizes: InputMaybe<Scalars['String']>;
		width: InputMaybe<Scalars['Int']>;
	};

	/** Remote Interface */
	type RemoteFile_resizeArgs = {
		aspectRatio: InputMaybe<Scalars['Float']>;
		cropFocus: InputMaybe<ReadonlyArray<InputMaybe<RemoteFileCropFocus>>>;
		fit?: InputMaybe<RemoteFileFit>;
		format?: InputMaybe<RemoteFileFormat>;
		height: InputMaybe<Scalars['Int']>;
		quality?: InputMaybe<Scalars['Int']>;
		width: InputMaybe<Scalars['Int']>;
	};

	type RemoteFileCropFocus =
		| 'bottom'
		| 'center'
		| 'edges'
		| 'entropy'
		| 'faces'
		| 'left'
		| 'right'
		| 'top';

	type RemoteFileFit = 'contain' | 'cover' | 'fill' | 'outside';

	type RemoteFileFormat = 'auto' | 'avif' | 'jpg' | 'png' | 'webp';

	type RemoteFileLayout = 'constrained' | 'fixed' | 'fullWidth';

	type RemoteFilePlaceholder =
		| 'blurred'
		| 'dominantColor'
		| 'none'
		| 'tracedSVG';

	type RemoteFileResize = {
		readonly height: Maybe<Scalars['Int']>;
		readonly src: Maybe<Scalars['String']>;
		readonly width: Maybe<Scalars['Int']>;
	};

	type RemoteFileResizeFilterInput = {
		readonly height: InputMaybe<IntQueryOperatorInput>;
		readonly src: InputMaybe<StringQueryOperatorInput>;
		readonly width: InputMaybe<IntQueryOperatorInput>;
	};

	type Site = Node & {
		readonly buildTime: Maybe<Scalars['Date']>;
		readonly children: ReadonlyArray<Node>;
		readonly graphqlTypegen: Maybe<SiteGraphqlTypegen>;
		readonly host: Maybe<Scalars['String']>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly jsxRuntime: Maybe<Scalars['String']>;
		readonly parent: Maybe<Node>;
		readonly pathPrefix: Maybe<Scalars['String']>;
		readonly polyfill: Maybe<Scalars['Boolean']>;
		readonly port: Maybe<Scalars['Int']>;
		readonly siteMetadata: Maybe<SiteSiteMetadata>;
		readonly trailingSlash: Maybe<Scalars['String']>;
	};

	type Site_buildTimeArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type SiteBuildMetadata = Node & {
		readonly buildTime: Maybe<Scalars['Date']>;
		readonly children: ReadonlyArray<Node>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly parent: Maybe<Node>;
	};

	type SiteBuildMetadata_buildTimeArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type SiteBuildMetadataConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
		readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<SiteBuildMetadata>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type SiteBuildMetadataConnection_distinctArgs = {
		field: SiteBuildMetadataFieldsEnum;
	};

	type SiteBuildMetadataConnection_groupArgs = {
		field: SiteBuildMetadataFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type SiteBuildMetadataConnection_maxArgs = {
		field: SiteBuildMetadataFieldsEnum;
	};

	type SiteBuildMetadataConnection_minArgs = {
		field: SiteBuildMetadataFieldsEnum;
	};

	type SiteBuildMetadataConnection_sumArgs = {
		field: SiteBuildMetadataFieldsEnum;
	};

	type SiteBuildMetadataEdge = {
		readonly next: Maybe<SiteBuildMetadata>;
		readonly node: SiteBuildMetadata;
		readonly previous: Maybe<SiteBuildMetadata>;
	};

	type SiteBuildMetadataFieldsEnum =
		| 'buildTime'
		| 'children'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'id'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id';

	type SiteBuildMetadataFilterInput = {
		readonly buildTime: InputMaybe<DateQueryOperatorInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
	};

	type SiteBuildMetadataGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<SiteBuildMetadata>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type SiteBuildMetadataGroupConnection_distinctArgs = {
		field: SiteBuildMetadataFieldsEnum;
	};

	type SiteBuildMetadataGroupConnection_groupArgs = {
		field: SiteBuildMetadataFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type SiteBuildMetadataGroupConnection_maxArgs = {
		field: SiteBuildMetadataFieldsEnum;
	};

	type SiteBuildMetadataGroupConnection_minArgs = {
		field: SiteBuildMetadataFieldsEnum;
	};

	type SiteBuildMetadataGroupConnection_sumArgs = {
		field: SiteBuildMetadataFieldsEnum;
	};

	type SiteBuildMetadataSortInput = {
		readonly fields: InputMaybe<
			ReadonlyArray<InputMaybe<SiteBuildMetadataFieldsEnum>>
		>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	type SiteConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<SiteEdge>;
		readonly group: ReadonlyArray<SiteGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<Site>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type SiteConnection_distinctArgs = {
		field: SiteFieldsEnum;
	};

	type SiteConnection_groupArgs = {
		field: SiteFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type SiteConnection_maxArgs = {
		field: SiteFieldsEnum;
	};

	type SiteConnection_minArgs = {
		field: SiteFieldsEnum;
	};

	type SiteConnection_sumArgs = {
		field: SiteFieldsEnum;
	};

	type SiteEdge = {
		readonly next: Maybe<Site>;
		readonly node: Site;
		readonly previous: Maybe<Site>;
	};

	type SiteFieldsEnum =
		| 'buildTime'
		| 'children'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'graphqlTypegen.generateOnBuild'
		| 'graphqlTypegen.typesOutputPath'
		| 'host'
		| 'id'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'jsxRuntime'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id'
		| 'pathPrefix'
		| 'polyfill'
		| 'port'
		| 'siteMetadata.description'
		| 'siteMetadata.title'
		| 'trailingSlash';

	type SiteFilterInput = {
		readonly buildTime: InputMaybe<DateQueryOperatorInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
		readonly host: InputMaybe<StringQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly jsxRuntime: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly pathPrefix: InputMaybe<StringQueryOperatorInput>;
		readonly polyfill: InputMaybe<BooleanQueryOperatorInput>;
		readonly port: InputMaybe<IntQueryOperatorInput>;
		readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
		readonly trailingSlash: InputMaybe<StringQueryOperatorInput>;
	};

	type SiteFunction = Node & {
		readonly absoluteCompiledFilePath: Scalars['String'];
		readonly children: ReadonlyArray<Node>;
		readonly functionRoute: Scalars['String'];
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly matchPath: Maybe<Scalars['String']>;
		readonly originalAbsoluteFilePath: Scalars['String'];
		readonly originalRelativeFilePath: Scalars['String'];
		readonly parent: Maybe<Node>;
		readonly pluginName: Scalars['String'];
		readonly relativeCompiledFilePath: Scalars['String'];
	};

	type SiteFunctionConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<SiteFunctionEdge>;
		readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<SiteFunction>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type SiteFunctionConnection_distinctArgs = {
		field: SiteFunctionFieldsEnum;
	};

	type SiteFunctionConnection_groupArgs = {
		field: SiteFunctionFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type SiteFunctionConnection_maxArgs = {
		field: SiteFunctionFieldsEnum;
	};

	type SiteFunctionConnection_minArgs = {
		field: SiteFunctionFieldsEnum;
	};

	type SiteFunctionConnection_sumArgs = {
		field: SiteFunctionFieldsEnum;
	};

	type SiteFunctionEdge = {
		readonly next: Maybe<SiteFunction>;
		readonly node: SiteFunction;
		readonly previous: Maybe<SiteFunction>;
	};

	type SiteFunctionFieldsEnum =
		| 'absoluteCompiledFilePath'
		| 'children'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'functionRoute'
		| 'id'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'matchPath'
		| 'originalAbsoluteFilePath'
		| 'originalRelativeFilePath'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id'
		| 'pluginName'
		| 'relativeCompiledFilePath';

	type SiteFunctionFilterInput = {
		readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly matchPath: InputMaybe<StringQueryOperatorInput>;
		readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
		readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly pluginName: InputMaybe<StringQueryOperatorInput>;
		readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
	};

	type SiteFunctionGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<SiteFunctionEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<SiteFunction>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type SiteFunctionGroupConnection_distinctArgs = {
		field: SiteFunctionFieldsEnum;
	};

	type SiteFunctionGroupConnection_groupArgs = {
		field: SiteFunctionFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type SiteFunctionGroupConnection_maxArgs = {
		field: SiteFunctionFieldsEnum;
	};

	type SiteFunctionGroupConnection_minArgs = {
		field: SiteFunctionFieldsEnum;
	};

	type SiteFunctionGroupConnection_sumArgs = {
		field: SiteFunctionFieldsEnum;
	};

	type SiteFunctionSortInput = {
		readonly fields: InputMaybe<
			ReadonlyArray<InputMaybe<SiteFunctionFieldsEnum>>
		>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	type SiteGraphqlTypegen = {
		readonly generateOnBuild: Maybe<Scalars['Boolean']>;
		readonly typesOutputPath: Maybe<Scalars['String']>;
	};

	type SiteGraphqlTypegenFilterInput = {
		readonly generateOnBuild: InputMaybe<BooleanQueryOperatorInput>;
		readonly typesOutputPath: InputMaybe<StringQueryOperatorInput>;
	};

	type SiteGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<SiteEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<SiteGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<Site>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type SiteGroupConnection_distinctArgs = {
		field: SiteFieldsEnum;
	};

	type SiteGroupConnection_groupArgs = {
		field: SiteFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type SiteGroupConnection_maxArgs = {
		field: SiteFieldsEnum;
	};

	type SiteGroupConnection_minArgs = {
		field: SiteFieldsEnum;
	};

	type SiteGroupConnection_sumArgs = {
		field: SiteFieldsEnum;
	};

	type SitePage = Node & {
		readonly children: ReadonlyArray<Node>;
		readonly component: Scalars['String'];
		readonly componentChunkName: Scalars['String'];
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly internalComponentName: Scalars['String'];
		readonly matchPath: Maybe<Scalars['String']>;
		readonly pageContext: Maybe<Scalars['JSON']>;
		readonly parent: Maybe<Node>;
		readonly path: Scalars['String'];
		readonly pluginCreator: Maybe<SitePlugin>;
	};

	type SitePageConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<SitePageEdge>;
		readonly group: ReadonlyArray<SitePageGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<SitePage>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type SitePageConnection_distinctArgs = {
		field: SitePageFieldsEnum;
	};

	type SitePageConnection_groupArgs = {
		field: SitePageFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type SitePageConnection_maxArgs = {
		field: SitePageFieldsEnum;
	};

	type SitePageConnection_minArgs = {
		field: SitePageFieldsEnum;
	};

	type SitePageConnection_sumArgs = {
		field: SitePageFieldsEnum;
	};

	type SitePageEdge = {
		readonly next: Maybe<SitePage>;
		readonly node: SitePage;
		readonly previous: Maybe<SitePage>;
	};

	type SitePageFieldsEnum =
		| 'children'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'component'
		| 'componentChunkName'
		| 'id'
		| 'internalComponentName'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'matchPath'
		| 'pageContext'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id'
		| 'path'
		| 'pluginCreator.browserAPIs'
		| 'pluginCreator.children'
		| 'pluginCreator.children.children'
		| 'pluginCreator.children.children.children'
		| 'pluginCreator.children.children.id'
		| 'pluginCreator.children.id'
		| 'pluginCreator.children.internal.content'
		| 'pluginCreator.children.internal.contentDigest'
		| 'pluginCreator.children.internal.contentFilePath'
		| 'pluginCreator.children.internal.description'
		| 'pluginCreator.children.internal.fieldOwners'
		| 'pluginCreator.children.internal.ignoreType'
		| 'pluginCreator.children.internal.mediaType'
		| 'pluginCreator.children.internal.owner'
		| 'pluginCreator.children.internal.type'
		| 'pluginCreator.children.parent.children'
		| 'pluginCreator.children.parent.id'
		| 'pluginCreator.id'
		| 'pluginCreator.internal.content'
		| 'pluginCreator.internal.contentDigest'
		| 'pluginCreator.internal.contentFilePath'
		| 'pluginCreator.internal.description'
		| 'pluginCreator.internal.fieldOwners'
		| 'pluginCreator.internal.ignoreType'
		| 'pluginCreator.internal.mediaType'
		| 'pluginCreator.internal.owner'
		| 'pluginCreator.internal.type'
		| 'pluginCreator.name'
		| 'pluginCreator.nodeAPIs'
		| 'pluginCreator.packageJson'
		| 'pluginCreator.parent.children'
		| 'pluginCreator.parent.children.children'
		| 'pluginCreator.parent.children.id'
		| 'pluginCreator.parent.id'
		| 'pluginCreator.parent.internal.content'
		| 'pluginCreator.parent.internal.contentDigest'
		| 'pluginCreator.parent.internal.contentFilePath'
		| 'pluginCreator.parent.internal.description'
		| 'pluginCreator.parent.internal.fieldOwners'
		| 'pluginCreator.parent.internal.ignoreType'
		| 'pluginCreator.parent.internal.mediaType'
		| 'pluginCreator.parent.internal.owner'
		| 'pluginCreator.parent.internal.type'
		| 'pluginCreator.parent.parent.children'
		| 'pluginCreator.parent.parent.id'
		| 'pluginCreator.pluginFilepath'
		| 'pluginCreator.pluginOptions'
		| 'pluginCreator.resolve'
		| 'pluginCreator.ssrAPIs'
		| 'pluginCreator.version';

	type SitePageFilterInput = {
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly component: InputMaybe<StringQueryOperatorInput>;
		readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
		readonly matchPath: InputMaybe<StringQueryOperatorInput>;
		readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly path: InputMaybe<StringQueryOperatorInput>;
		readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
	};

	type SitePageGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<SitePageEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<SitePageGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<SitePage>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type SitePageGroupConnection_distinctArgs = {
		field: SitePageFieldsEnum;
	};

	type SitePageGroupConnection_groupArgs = {
		field: SitePageFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type SitePageGroupConnection_maxArgs = {
		field: SitePageFieldsEnum;
	};

	type SitePageGroupConnection_minArgs = {
		field: SitePageFieldsEnum;
	};

	type SitePageGroupConnection_sumArgs = {
		field: SitePageFieldsEnum;
	};

	type SitePageSortInput = {
		readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SitePageFieldsEnum>>>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	type SitePlugin = Node & {
		readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
		readonly children: ReadonlyArray<Node>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly name: Maybe<Scalars['String']>;
		readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
		readonly packageJson: Maybe<Scalars['JSON']>;
		readonly parent: Maybe<Node>;
		readonly pluginFilepath: Maybe<Scalars['String']>;
		readonly pluginOptions: Maybe<Scalars['JSON']>;
		readonly resolve: Maybe<Scalars['String']>;
		readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
		readonly version: Maybe<Scalars['String']>;
	};

	type SitePluginConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<SitePluginEdge>;
		readonly group: ReadonlyArray<SitePluginGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<SitePlugin>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type SitePluginConnection_distinctArgs = {
		field: SitePluginFieldsEnum;
	};

	type SitePluginConnection_groupArgs = {
		field: SitePluginFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type SitePluginConnection_maxArgs = {
		field: SitePluginFieldsEnum;
	};

	type SitePluginConnection_minArgs = {
		field: SitePluginFieldsEnum;
	};

	type SitePluginConnection_sumArgs = {
		field: SitePluginFieldsEnum;
	};

	type SitePluginEdge = {
		readonly next: Maybe<SitePlugin>;
		readonly node: SitePlugin;
		readonly previous: Maybe<SitePlugin>;
	};

	type SitePluginFieldsEnum =
		| 'browserAPIs'
		| 'children'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'id'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'name'
		| 'nodeAPIs'
		| 'packageJson'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id'
		| 'pluginFilepath'
		| 'pluginOptions'
		| 'resolve'
		| 'ssrAPIs'
		| 'version';

	type SitePluginFilterInput = {
		readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly name: InputMaybe<StringQueryOperatorInput>;
		readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
		readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
		readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
		readonly resolve: InputMaybe<StringQueryOperatorInput>;
		readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
		readonly version: InputMaybe<StringQueryOperatorInput>;
	};

	type SitePluginGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<SitePluginEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<SitePluginGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<SitePlugin>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type SitePluginGroupConnection_distinctArgs = {
		field: SitePluginFieldsEnum;
	};

	type SitePluginGroupConnection_groupArgs = {
		field: SitePluginFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type SitePluginGroupConnection_maxArgs = {
		field: SitePluginFieldsEnum;
	};

	type SitePluginGroupConnection_minArgs = {
		field: SitePluginFieldsEnum;
	};

	type SitePluginGroupConnection_sumArgs = {
		field: SitePluginFieldsEnum;
	};

	type SitePluginSortInput = {
		readonly fields: InputMaybe<
			ReadonlyArray<InputMaybe<SitePluginFieldsEnum>>
		>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	type SiteSiteMetadata = {
		readonly description: Maybe<Scalars['String']>;
		readonly title: Maybe<Scalars['String']>;
	};

	type SiteSiteMetadataFilterInput = {
		readonly description: InputMaybe<StringQueryOperatorInput>;
		readonly title: InputMaybe<StringQueryOperatorInput>;
	};

	type SiteSortInput = {
		readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SiteFieldsEnum>>>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	type SortOrderEnum = 'ASC' | 'DESC';

	type StringQueryOperatorInput = {
		readonly eq: InputMaybe<Scalars['String']>;
		readonly glob: InputMaybe<Scalars['String']>;
		readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
		readonly ne: InputMaybe<Scalars['String']>;
		readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
		readonly regex: InputMaybe<Scalars['String']>;
	};

	type TransformOptions = {
		readonly cropFocus: InputMaybe<ImageCropFocus>;
		readonly duotone: InputMaybe<DuotoneGradient>;
		readonly fit: InputMaybe<ImageFit>;
		readonly grayscale: InputMaybe<Scalars['Boolean']>;
		readonly rotate: InputMaybe<Scalars['Int']>;
		readonly trim: InputMaybe<Scalars['Float']>;
	};

	type WebPOptions = {
		readonly quality: InputMaybe<Scalars['Int']>;
	};

	/** Non-node WPGraphQL root fields. */
	type Wp = Node & {
		/** Entry point to get all settings for the site */
		readonly allSettings: Maybe<WpSettings>;
		readonly children: ReadonlyArray<Node>;
		/** Fields of the &#039;DiscussionSettings&#039; settings group */
		readonly discussionSettings: Maybe<WpDiscussionSettings>;
		/** Fields of the &#039;GeneralSettings&#039; settings group */
		readonly generalSettings: Maybe<WpGeneralSettings>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly nodeType: Maybe<Scalars['String']>;
		readonly parent: Maybe<Node>;
		/** Fields of the &#039;ReadingSettings&#039; settings group */
		readonly readingSettings: Maybe<WpReadingSettings>;
		/** Information needed by gatsby-source-wordpress. */
		readonly wpGatsby: Maybe<WpWPGatsby>;
		/** Fields of the &#039;WritingSettings&#039; settings group */
		readonly writingSettings: Maybe<WpWritingSettings>;
	};

	/** Avatars are profile images for users. WordPress by default uses the Gravatar service to host and fetch avatars from. */
	type WpAvatar = {
		/** URL for the default image or a default type. Accepts &#039;404&#039; (return a 404 instead of a default image), &#039;retro&#039; (8bit), &#039;monsterid&#039; (monster), &#039;wavatar&#039; (cartoon face), &#039;indenticon&#039; (the &#039;quilt&#039;), &#039;mystery&#039;, &#039;mm&#039;, or &#039;mysteryman&#039; (The Oyster Man), &#039;blank&#039; (transparent GIF), or &#039;gravatar_default&#039; (the Gravatar logo). */
		readonly default: Maybe<Scalars['String']>;
		/** HTML attributes to insert in the IMG element. Is not sanitized. */
		readonly extraAttr: Maybe<Scalars['String']>;
		/** Whether to always show the default image, never the Gravatar. */
		readonly forceDefault: Maybe<Scalars['Boolean']>;
		/** Whether the avatar was successfully found. */
		readonly foundAvatar: Maybe<Scalars['Boolean']>;
		/** Height of the avatar image. */
		readonly height: Maybe<Scalars['Int']>;
		/** What rating to display avatars up to. Accepts &#039;G&#039;, &#039;PG&#039;, &#039;R&#039;, &#039;X&#039;, and are judged in that order. */
		readonly rating: Maybe<Scalars['String']>;
		/** Type of url scheme to use. Typically HTTP vs. HTTPS. */
		readonly scheme: Maybe<Scalars['String']>;
		/** The size of the avatar in pixels. A value of 96 will match a 96px x 96px gravatar image. */
		readonly size: Maybe<Scalars['Int']>;
		/** URL for the gravatar image source. */
		readonly url: Maybe<Scalars['String']>;
		/** Width of the avatar image. */
		readonly width: Maybe<Scalars['Int']>;
	};

	type WpAvatarFilterInput = {
		readonly default: InputMaybe<StringQueryOperatorInput>;
		readonly extraAttr: InputMaybe<StringQueryOperatorInput>;
		readonly forceDefault: InputMaybe<BooleanQueryOperatorInput>;
		readonly foundAvatar: InputMaybe<BooleanQueryOperatorInput>;
		readonly height: InputMaybe<IntQueryOperatorInput>;
		readonly rating: InputMaybe<StringQueryOperatorInput>;
		readonly scheme: InputMaybe<StringQueryOperatorInput>;
		readonly size: InputMaybe<IntQueryOperatorInput>;
		readonly url: InputMaybe<StringQueryOperatorInput>;
		readonly width: InputMaybe<IntQueryOperatorInput>;
	};

	/** The category type */
	type WpCategory = Node &
		WpDatabaseIdentifier &
		WpHierarchicalNode &
		WpHierarchicalTermNode &
		WpMenuItemLinkable &
		WpNode &
		WpTermNode &
		WpUniformResourceIdentifiable & {
			/** The ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */
			readonly ancestors: Maybe<WpCategoryToAncestorsCategoryConnectionType>;
			readonly children: ReadonlyArray<Node>;
			/** Connection between the Category type and the ContentNode type */
			readonly contentNodes: Maybe<WpCategoryToContentNodeConnectionType>;
			/** The number of objects connected to the object */
			readonly count: Maybe<Scalars['Int']>;
			/** The unique identifier stored in the database */
			readonly databaseId: Scalars['Int'];
			/** The description of the object */
			readonly description: Maybe<Scalars['String']>;
			readonly id: Scalars['ID'];
			readonly internal: Internal;
			/** Whether the node is a Content Node */
			readonly isContentNode: Scalars['Boolean'];
			/** Whether the node is a Term */
			readonly isTermNode: Scalars['Boolean'];
			/** The link to the term */
			readonly link: Maybe<Scalars['String']>;
			/** The human friendly name of the object. */
			readonly name: Maybe<Scalars['String']>;
			readonly nodeType: Maybe<Scalars['String']>;
			readonly parent: Maybe<Node>;
			/** Database id of the parent node */
			readonly parentDatabaseId: Maybe<Scalars['Int']>;
			/** The globally unique identifier of the parent node. */
			readonly parentId: Maybe<Scalars['ID']>;
			/** Connection between the Category type and the post type */
			readonly posts: Maybe<WpCategoryToPostConnectionType>;
			/** An alphanumeric identifier for the object unique to its type. */
			readonly slug: Maybe<Scalars['String']>;
			/** Connection between the Category type and the Taxonomy type */
			readonly taxonomy: Maybe<WpCategoryToTaxonomyConnectionEdgeType>;
			/** The name of the taxonomy that the object is associated with */
			readonly taxonomyName: Maybe<Scalars['String']>;
			/** The ID of the term group that this term object belongs to */
			readonly termGroupId: Maybe<Scalars['Int']>;
			/** The taxonomy ID that the object is associated with */
			readonly termTaxonomyId: Maybe<Scalars['Int']>;
			/** The unique resource identifier path */
			readonly uri: Maybe<Scalars['String']>;
			/** Connection between the category type and its children categories. */
			readonly wpChildren: Maybe<WpCategoryToCategoryConnectionType>;
			/** Connection between the category type and its parent category. */
			readonly wpParent: Maybe<WpCategoryToParentCategoryConnectionEdgeType>;
		};

	type WpCategoryConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpCategoryEdge>;
		readonly group: ReadonlyArray<WpCategoryGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpCategory>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpCategoryConnection_distinctArgs = {
		field: WpCategoryFieldsEnum;
	};

	type WpCategoryConnection_groupArgs = {
		field: WpCategoryFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpCategoryConnection_maxArgs = {
		field: WpCategoryFieldsEnum;
	};

	type WpCategoryConnection_minArgs = {
		field: WpCategoryFieldsEnum;
	};

	type WpCategoryConnection_sumArgs = {
		field: WpCategoryFieldsEnum;
	};

	type WpCategoryConnectionEdgeType = {
		/** The connected category Node */
		readonly node: WpCategory;
	};

	type WpCategoryConnectionType = {
		/** A list of connected category Nodes */
		readonly nodes: ReadonlyArray<WpCategory>;
	};

	type WpCategoryEdge = {
		readonly next: Maybe<WpCategory>;
		readonly node: WpCategory;
		readonly previous: Maybe<WpCategory>;
	};

	type WpCategoryFieldsEnum =
		| 'ancestors.nodes'
		| 'ancestors.nodes.ancestors.nodes'
		| 'ancestors.nodes.children'
		| 'ancestors.nodes.children.children'
		| 'ancestors.nodes.children.id'
		| 'ancestors.nodes.contentNodes.nodes'
		| 'ancestors.nodes.count'
		| 'ancestors.nodes.databaseId'
		| 'ancestors.nodes.description'
		| 'ancestors.nodes.id'
		| 'ancestors.nodes.internal.content'
		| 'ancestors.nodes.internal.contentDigest'
		| 'ancestors.nodes.internal.contentFilePath'
		| 'ancestors.nodes.internal.description'
		| 'ancestors.nodes.internal.fieldOwners'
		| 'ancestors.nodes.internal.ignoreType'
		| 'ancestors.nodes.internal.mediaType'
		| 'ancestors.nodes.internal.owner'
		| 'ancestors.nodes.internal.type'
		| 'ancestors.nodes.isContentNode'
		| 'ancestors.nodes.isTermNode'
		| 'ancestors.nodes.link'
		| 'ancestors.nodes.name'
		| 'ancestors.nodes.nodeType'
		| 'ancestors.nodes.parentDatabaseId'
		| 'ancestors.nodes.parentId'
		| 'ancestors.nodes.parent.children'
		| 'ancestors.nodes.parent.id'
		| 'ancestors.nodes.posts.nodes'
		| 'ancestors.nodes.slug'
		| 'ancestors.nodes.taxonomyName'
		| 'ancestors.nodes.termGroupId'
		| 'ancestors.nodes.termTaxonomyId'
		| 'ancestors.nodes.uri'
		| 'ancestors.nodes.wpChildren.nodes'
		| 'children'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'contentNodes.nodes'
		| 'contentNodes.nodes.children'
		| 'contentNodes.nodes.children.children'
		| 'contentNodes.nodes.children.id'
		| 'contentNodes.nodes.contentTypeName'
		| 'contentNodes.nodes.databaseId'
		| 'contentNodes.nodes.date'
		| 'contentNodes.nodes.dateGmt'
		| 'contentNodes.nodes.desiredSlug'
		| 'contentNodes.nodes.enclosure'
		| 'contentNodes.nodes.guid'
		| 'contentNodes.nodes.id'
		| 'contentNodes.nodes.internal.content'
		| 'contentNodes.nodes.internal.contentDigest'
		| 'contentNodes.nodes.internal.contentFilePath'
		| 'contentNodes.nodes.internal.description'
		| 'contentNodes.nodes.internal.fieldOwners'
		| 'contentNodes.nodes.internal.ignoreType'
		| 'contentNodes.nodes.internal.mediaType'
		| 'contentNodes.nodes.internal.owner'
		| 'contentNodes.nodes.internal.type'
		| 'contentNodes.nodes.isContentNode'
		| 'contentNodes.nodes.isTermNode'
		| 'contentNodes.nodes.link'
		| 'contentNodes.nodes.modified'
		| 'contentNodes.nodes.modifiedGmt'
		| 'contentNodes.nodes.nodeType'
		| 'contentNodes.nodes.parent.children'
		| 'contentNodes.nodes.parent.id'
		| 'contentNodes.nodes.slug'
		| 'contentNodes.nodes.status'
		| 'contentNodes.nodes.template.templateName'
		| 'contentNodes.nodes.uri'
		| 'count'
		| 'databaseId'
		| 'description'
		| 'id'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'isContentNode'
		| 'isTermNode'
		| 'link'
		| 'name'
		| 'nodeType'
		| 'parentDatabaseId'
		| 'parentId'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id'
		| 'posts.nodes'
		| 'posts.nodes.authorDatabaseId'
		| 'posts.nodes.authorId'
		| 'posts.nodes.categories.nodes'
		| 'posts.nodes.children'
		| 'posts.nodes.children.children'
		| 'posts.nodes.children.id'
		| 'posts.nodes.commentCount'
		| 'posts.nodes.commentStatus'
		| 'posts.nodes.comments.nodes'
		| 'posts.nodes.content'
		| 'posts.nodes.contentTypeName'
		| 'posts.nodes.databaseId'
		| 'posts.nodes.date'
		| 'posts.nodes.dateGmt'
		| 'posts.nodes.desiredSlug'
		| 'posts.nodes.enclosure'
		| 'posts.nodes.excerpt'
		| 'posts.nodes.featuredImageDatabaseId'
		| 'posts.nodes.featuredImageId'
		| 'posts.nodes.guid'
		| 'posts.nodes.id'
		| 'posts.nodes.internal.content'
		| 'posts.nodes.internal.contentDigest'
		| 'posts.nodes.internal.contentFilePath'
		| 'posts.nodes.internal.description'
		| 'posts.nodes.internal.fieldOwners'
		| 'posts.nodes.internal.ignoreType'
		| 'posts.nodes.internal.mediaType'
		| 'posts.nodes.internal.owner'
		| 'posts.nodes.internal.type'
		| 'posts.nodes.isContentNode'
		| 'posts.nodes.isRevision'
		| 'posts.nodes.isSticky'
		| 'posts.nodes.isTermNode'
		| 'posts.nodes.link'
		| 'posts.nodes.modified'
		| 'posts.nodes.modifiedGmt'
		| 'posts.nodes.nodeType'
		| 'posts.nodes.parent.children'
		| 'posts.nodes.parent.id'
		| 'posts.nodes.pingStatus'
		| 'posts.nodes.pinged'
		| 'posts.nodes.postFormats.nodes'
		| 'posts.nodes.slug'
		| 'posts.nodes.status'
		| 'posts.nodes.tags.nodes'
		| 'posts.nodes.template.templateName'
		| 'posts.nodes.terms.nodes'
		| 'posts.nodes.title'
		| 'posts.nodes.toPing'
		| 'posts.nodes.uri'
		| 'slug'
		| 'taxonomyName'
		| 'taxonomy.node.archivePath'
		| 'taxonomy.node.children'
		| 'taxonomy.node.children.children'
		| 'taxonomy.node.children.id'
		| 'taxonomy.node.connectedContentTypes.nodes'
		| 'taxonomy.node.description'
		| 'taxonomy.node.graphqlPluralName'
		| 'taxonomy.node.graphqlSingleName'
		| 'taxonomy.node.hierarchical'
		| 'taxonomy.node.id'
		| 'taxonomy.node.internal.content'
		| 'taxonomy.node.internal.contentDigest'
		| 'taxonomy.node.internal.contentFilePath'
		| 'taxonomy.node.internal.description'
		| 'taxonomy.node.internal.fieldOwners'
		| 'taxonomy.node.internal.ignoreType'
		| 'taxonomy.node.internal.mediaType'
		| 'taxonomy.node.internal.owner'
		| 'taxonomy.node.internal.type'
		| 'taxonomy.node.label'
		| 'taxonomy.node.name'
		| 'taxonomy.node.nodeType'
		| 'taxonomy.node.parent.children'
		| 'taxonomy.node.parent.id'
		| 'taxonomy.node.public'
		| 'taxonomy.node.restBase'
		| 'taxonomy.node.restControllerClass'
		| 'taxonomy.node.showCloud'
		| 'taxonomy.node.showInAdminColumn'
		| 'taxonomy.node.showInGraphql'
		| 'taxonomy.node.showInMenu'
		| 'taxonomy.node.showInNavMenus'
		| 'taxonomy.node.showInQuickEdit'
		| 'taxonomy.node.showInRest'
		| 'taxonomy.node.showUi'
		| 'termGroupId'
		| 'termTaxonomyId'
		| 'uri'
		| 'wpChildren.nodes'
		| 'wpChildren.nodes.ancestors.nodes'
		| 'wpChildren.nodes.children'
		| 'wpChildren.nodes.children.children'
		| 'wpChildren.nodes.children.id'
		| 'wpChildren.nodes.contentNodes.nodes'
		| 'wpChildren.nodes.count'
		| 'wpChildren.nodes.databaseId'
		| 'wpChildren.nodes.description'
		| 'wpChildren.nodes.id'
		| 'wpChildren.nodes.internal.content'
		| 'wpChildren.nodes.internal.contentDigest'
		| 'wpChildren.nodes.internal.contentFilePath'
		| 'wpChildren.nodes.internal.description'
		| 'wpChildren.nodes.internal.fieldOwners'
		| 'wpChildren.nodes.internal.ignoreType'
		| 'wpChildren.nodes.internal.mediaType'
		| 'wpChildren.nodes.internal.owner'
		| 'wpChildren.nodes.internal.type'
		| 'wpChildren.nodes.isContentNode'
		| 'wpChildren.nodes.isTermNode'
		| 'wpChildren.nodes.link'
		| 'wpChildren.nodes.name'
		| 'wpChildren.nodes.nodeType'
		| 'wpChildren.nodes.parentDatabaseId'
		| 'wpChildren.nodes.parentId'
		| 'wpChildren.nodes.parent.children'
		| 'wpChildren.nodes.parent.id'
		| 'wpChildren.nodes.posts.nodes'
		| 'wpChildren.nodes.slug'
		| 'wpChildren.nodes.taxonomyName'
		| 'wpChildren.nodes.termGroupId'
		| 'wpChildren.nodes.termTaxonomyId'
		| 'wpChildren.nodes.uri'
		| 'wpChildren.nodes.wpChildren.nodes'
		| 'wpParent.node.ancestors.nodes'
		| 'wpParent.node.children'
		| 'wpParent.node.children.children'
		| 'wpParent.node.children.id'
		| 'wpParent.node.contentNodes.nodes'
		| 'wpParent.node.count'
		| 'wpParent.node.databaseId'
		| 'wpParent.node.description'
		| 'wpParent.node.id'
		| 'wpParent.node.internal.content'
		| 'wpParent.node.internal.contentDigest'
		| 'wpParent.node.internal.contentFilePath'
		| 'wpParent.node.internal.description'
		| 'wpParent.node.internal.fieldOwners'
		| 'wpParent.node.internal.ignoreType'
		| 'wpParent.node.internal.mediaType'
		| 'wpParent.node.internal.owner'
		| 'wpParent.node.internal.type'
		| 'wpParent.node.isContentNode'
		| 'wpParent.node.isTermNode'
		| 'wpParent.node.link'
		| 'wpParent.node.name'
		| 'wpParent.node.nodeType'
		| 'wpParent.node.parentDatabaseId'
		| 'wpParent.node.parentId'
		| 'wpParent.node.parent.children'
		| 'wpParent.node.parent.id'
		| 'wpParent.node.posts.nodes'
		| 'wpParent.node.slug'
		| 'wpParent.node.taxonomyName'
		| 'wpParent.node.termGroupId'
		| 'wpParent.node.termTaxonomyId'
		| 'wpParent.node.uri'
		| 'wpParent.node.wpChildren.nodes';

	type WpCategoryFilterInput = {
		readonly ancestors: InputMaybe<WpCategoryToAncestorsCategoryConnectionTypeFilterInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly contentNodes: InputMaybe<WpCategoryToContentNodeConnectionTypeFilterInput>;
		readonly count: InputMaybe<IntQueryOperatorInput>;
		readonly databaseId: InputMaybe<IntQueryOperatorInput>;
		readonly description: InputMaybe<StringQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly isContentNode: InputMaybe<BooleanQueryOperatorInput>;
		readonly isTermNode: InputMaybe<BooleanQueryOperatorInput>;
		readonly link: InputMaybe<StringQueryOperatorInput>;
		readonly name: InputMaybe<StringQueryOperatorInput>;
		readonly nodeType: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly parentDatabaseId: InputMaybe<IntQueryOperatorInput>;
		readonly parentId: InputMaybe<IDQueryOperatorInput>;
		readonly posts: InputMaybe<WpCategoryToPostConnectionTypeFilterInput>;
		readonly slug: InputMaybe<StringQueryOperatorInput>;
		readonly taxonomy: InputMaybe<WpCategoryToTaxonomyConnectionEdgeTypeFilterInput>;
		readonly taxonomyName: InputMaybe<StringQueryOperatorInput>;
		readonly termGroupId: InputMaybe<IntQueryOperatorInput>;
		readonly termTaxonomyId: InputMaybe<IntQueryOperatorInput>;
		readonly uri: InputMaybe<StringQueryOperatorInput>;
		readonly wpChildren: InputMaybe<WpCategoryToCategoryConnectionTypeFilterInput>;
		readonly wpParent: InputMaybe<WpCategoryToParentCategoryConnectionEdgeTypeFilterInput>;
	};

	type WpCategoryFilterListInput = {
		readonly elemMatch: InputMaybe<WpCategoryFilterInput>;
	};

	type WpCategoryGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpCategoryEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<WpCategoryGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpCategory>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpCategoryGroupConnection_distinctArgs = {
		field: WpCategoryFieldsEnum;
	};

	type WpCategoryGroupConnection_groupArgs = {
		field: WpCategoryFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpCategoryGroupConnection_maxArgs = {
		field: WpCategoryFieldsEnum;
	};

	type WpCategoryGroupConnection_minArgs = {
		field: WpCategoryFieldsEnum;
	};

	type WpCategoryGroupConnection_sumArgs = {
		field: WpCategoryFieldsEnum;
	};

	type WpCategorySortInput = {
		readonly fields: InputMaybe<
			ReadonlyArray<InputMaybe<WpCategoryFieldsEnum>>
		>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	/** Connection between the Category type and the category type */
	type WpCategoryToAncestorsCategoryConnectionType = WpCategoryConnectionType &
		WpConnectionType & {
			/** The nodes of the connection, without the edges */
			readonly nodes: ReadonlyArray<WpCategory>;
		};

	type WpCategoryToAncestorsCategoryConnectionTypeFilterInput = {
		readonly nodes: InputMaybe<WpCategoryFilterListInput>;
	};

	/** Connection between the Category type and the category type */
	type WpCategoryToCategoryConnectionType = WpCategoryConnectionType &
		WpConnectionType & {
			/** The nodes of the connection, without the edges */
			readonly nodes: ReadonlyArray<WpCategory>;
		};

	type WpCategoryToCategoryConnectionTypeFilterInput = {
		readonly nodes: InputMaybe<WpCategoryFilterListInput>;
	};

	/** Connection between the Category type and the ContentNode type */
	type WpCategoryToContentNodeConnectionType = WpConnectionType &
		WpContentNodeConnectionType & {
			/** The nodes of the connection, without the edges */
			readonly nodes: ReadonlyArray<WpContentNode>;
		};

	type WpCategoryToContentNodeConnectionTypeFilterInput = {
		readonly nodes: InputMaybe<WpContentNodeFilterListInput>;
	};

	/** Connection between the Category type and the category type */
	type WpCategoryToParentCategoryConnectionEdgeType =
		WpCategoryConnectionEdgeType &
			WpEdgeType &
			WpOneToOneConnectionType & {
				/** The node of the connection, without the edges */
				readonly node: WpCategory;
			};

	type WpCategoryToParentCategoryConnectionEdgeTypeFilterInput = {
		readonly node: InputMaybe<WpCategoryFilterInput>;
	};

	/** Connection between the Category type and the post type */
	type WpCategoryToPostConnectionType = WpConnectionType &
		WpPostConnectionType & {
			/** The nodes of the connection, without the edges */
			readonly nodes: ReadonlyArray<WpPost>;
		};

	type WpCategoryToPostConnectionTypeFilterInput = {
		readonly nodes: InputMaybe<WpPostFilterListInput>;
	};

	/** Connection between the Category type and the Taxonomy type */
	type WpCategoryToTaxonomyConnectionEdgeType = WpEdgeType &
		WpOneToOneConnectionType &
		WpTaxonomyConnectionEdgeType & {
			/** The node of the connection, without the edges */
			readonly node: WpTaxonomy;
		};

	type WpCategoryToTaxonomyConnectionEdgeTypeFilterInput = {
		readonly node: InputMaybe<WpTaxonomyFilterInput>;
	};

	/** A Comment object */
	type WpComment = Node &
		WpDatabaseIdentifier &
		WpNode & {
			/** User agent used to post the comment. This field is equivalent to WP_Comment-&gt;comment_agent and the value matching the &quot;comment_agent&quot; column in SQL. */
			readonly agent: Maybe<Scalars['String']>;
			/** The author of the comment */
			readonly author: Maybe<WpCommentToCommenterConnectionEdgeType>;
			/** IP address for the author. This field is equivalent to WP_Comment-&gt;comment_author_IP and the value matching the &quot;comment_author_IP&quot; column in SQL. */
			readonly authorIp: Maybe<Scalars['String']>;
			readonly children: ReadonlyArray<Node>;
			/** Connection between the Comment type and the ContentNode type */
			readonly commentedOn: Maybe<WpCommentToContentNodeConnectionEdgeType>;
			/** Content of the comment. This field is equivalent to WP_Comment-&gt;comment_content and the value matching the &quot;comment_content&quot; column in SQL. */
			readonly content: Maybe<Scalars['String']>;
			/** The unique identifier stored in the database */
			readonly databaseId: Scalars['Int'];
			/** Date the comment was posted in local time. This field is equivalent to WP_Comment-&gt;date and the value matching the &quot;date&quot; column in SQL. */
			readonly date: Maybe<Scalars['Date']>;
			/** Date the comment was posted in GMT. This field is equivalent to WP_Comment-&gt;date_gmt and the value matching the &quot;date_gmt&quot; column in SQL. */
			readonly dateGmt: Maybe<Scalars['Date']>;
			readonly id: Scalars['ID'];
			readonly internal: Internal;
			/** Karma value for the comment. This field is equivalent to WP_Comment-&gt;comment_karma and the value matching the &quot;comment_karma&quot; column in SQL. */
			readonly karma: Maybe<Scalars['Int']>;
			readonly nodeType: Maybe<Scalars['String']>;
			readonly parent: Maybe<Node>;
			/** The database id of the parent comment node or null if it is the root comment */
			readonly parentDatabaseId: Maybe<Scalars['Int']>;
			/** The globally unique identifier of the parent comment node. */
			readonly parentId: Maybe<Scalars['ID']>;
			/** Connection between the Comment type and the Comment type */
			readonly replies: Maybe<WpCommentToCommentConnectionType>;
			/** The approval status of the comment. This field is equivalent to WP_Comment-&gt;comment_approved and the value matching the &quot;comment_approved&quot; column in SQL. */
			readonly status: Maybe<WpCommentStatusEnum>;
			/** Type of comment. This field is equivalent to WP_Comment-&gt;comment_type and the value matching the &quot;comment_type&quot; column in SQL. */
			readonly type: Maybe<Scalars['String']>;
			/** Connection between the Comment type and the Comment type */
			readonly wpParent: Maybe<WpCommentToParentCommentConnectionEdgeType>;
		};

	/** A Comment object */
	type WpComment_dateArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	/** A Comment object */
	type WpComment_dateGmtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	/** A Comment Author object */
	type WpCommentAuthor = Node &
		WpCommenter &
		WpDatabaseIdentifier &
		WpNode & {
			/** Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument. */
			readonly avatar: Maybe<WpAvatar>;
			readonly children: ReadonlyArray<Node>;
			/** The unique identifier stored in the database */
			readonly databaseId: Scalars['Int'];
			/** The email for the comment author */
			readonly email: Maybe<Scalars['String']>;
			readonly id: Scalars['ID'];
			readonly internal: Internal;
			/** The name for the comment author. */
			readonly name: Maybe<Scalars['String']>;
			readonly nodeType: Maybe<Scalars['String']>;
			readonly parent: Maybe<Node>;
			/** The url the comment author. */
			readonly url: Maybe<Scalars['String']>;
		};

	type WpCommentAuthorConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpCommentAuthorEdge>;
		readonly group: ReadonlyArray<WpCommentAuthorGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpCommentAuthor>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpCommentAuthorConnection_distinctArgs = {
		field: WpCommentAuthorFieldsEnum;
	};

	type WpCommentAuthorConnection_groupArgs = {
		field: WpCommentAuthorFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpCommentAuthorConnection_maxArgs = {
		field: WpCommentAuthorFieldsEnum;
	};

	type WpCommentAuthorConnection_minArgs = {
		field: WpCommentAuthorFieldsEnum;
	};

	type WpCommentAuthorConnection_sumArgs = {
		field: WpCommentAuthorFieldsEnum;
	};

	type WpCommentAuthorEdge = {
		readonly next: Maybe<WpCommentAuthor>;
		readonly node: WpCommentAuthor;
		readonly previous: Maybe<WpCommentAuthor>;
	};

	type WpCommentAuthorFieldsEnum =
		| 'avatar.default'
		| 'avatar.extraAttr'
		| 'avatar.forceDefault'
		| 'avatar.foundAvatar'
		| 'avatar.height'
		| 'avatar.rating'
		| 'avatar.scheme'
		| 'avatar.size'
		| 'avatar.url'
		| 'avatar.width'
		| 'children'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'databaseId'
		| 'email'
		| 'id'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'name'
		| 'nodeType'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id'
		| 'url';

	type WpCommentAuthorFilterInput = {
		readonly avatar: InputMaybe<WpAvatarFilterInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly databaseId: InputMaybe<IntQueryOperatorInput>;
		readonly email: InputMaybe<StringQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly name: InputMaybe<StringQueryOperatorInput>;
		readonly nodeType: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly url: InputMaybe<StringQueryOperatorInput>;
	};

	type WpCommentAuthorGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpCommentAuthorEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<WpCommentAuthorGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpCommentAuthor>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpCommentAuthorGroupConnection_distinctArgs = {
		field: WpCommentAuthorFieldsEnum;
	};

	type WpCommentAuthorGroupConnection_groupArgs = {
		field: WpCommentAuthorFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpCommentAuthorGroupConnection_maxArgs = {
		field: WpCommentAuthorFieldsEnum;
	};

	type WpCommentAuthorGroupConnection_minArgs = {
		field: WpCommentAuthorFieldsEnum;
	};

	type WpCommentAuthorGroupConnection_sumArgs = {
		field: WpCommentAuthorFieldsEnum;
	};

	type WpCommentAuthorSortInput = {
		readonly fields: InputMaybe<
			ReadonlyArray<InputMaybe<WpCommentAuthorFieldsEnum>>
		>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	type WpCommentConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpCommentEdge>;
		readonly group: ReadonlyArray<WpCommentGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpComment>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpCommentConnection_distinctArgs = {
		field: WpCommentFieldsEnum;
	};

	type WpCommentConnection_groupArgs = {
		field: WpCommentFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpCommentConnection_maxArgs = {
		field: WpCommentFieldsEnum;
	};

	type WpCommentConnection_minArgs = {
		field: WpCommentFieldsEnum;
	};

	type WpCommentConnection_sumArgs = {
		field: WpCommentFieldsEnum;
	};

	type WpCommentConnectionEdgeType = {
		/** The connected Comment Node */
		readonly node: WpComment;
	};

	type WpCommentConnectionType = {
		/** A list of connected Comment Nodes */
		readonly nodes: ReadonlyArray<WpComment>;
	};

	type WpCommentEdge = {
		readonly next: Maybe<WpComment>;
		readonly node: WpComment;
		readonly previous: Maybe<WpComment>;
	};

	type WpCommentFieldsEnum =
		| 'agent'
		| 'authorIp'
		| 'author.node.avatar.default'
		| 'author.node.avatar.extraAttr'
		| 'author.node.avatar.forceDefault'
		| 'author.node.avatar.foundAvatar'
		| 'author.node.avatar.height'
		| 'author.node.avatar.rating'
		| 'author.node.avatar.scheme'
		| 'author.node.avatar.size'
		| 'author.node.avatar.url'
		| 'author.node.avatar.width'
		| 'author.node.children'
		| 'author.node.children.children'
		| 'author.node.children.id'
		| 'author.node.databaseId'
		| 'author.node.email'
		| 'author.node.id'
		| 'author.node.internal.content'
		| 'author.node.internal.contentDigest'
		| 'author.node.internal.contentFilePath'
		| 'author.node.internal.description'
		| 'author.node.internal.fieldOwners'
		| 'author.node.internal.ignoreType'
		| 'author.node.internal.mediaType'
		| 'author.node.internal.owner'
		| 'author.node.internal.type'
		| 'author.node.name'
		| 'author.node.nodeType'
		| 'author.node.parent.children'
		| 'author.node.parent.id'
		| 'author.node.url'
		| 'children'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'commentedOn.node.children'
		| 'commentedOn.node.children.children'
		| 'commentedOn.node.children.id'
		| 'commentedOn.node.contentTypeName'
		| 'commentedOn.node.databaseId'
		| 'commentedOn.node.date'
		| 'commentedOn.node.dateGmt'
		| 'commentedOn.node.desiredSlug'
		| 'commentedOn.node.enclosure'
		| 'commentedOn.node.guid'
		| 'commentedOn.node.id'
		| 'commentedOn.node.internal.content'
		| 'commentedOn.node.internal.contentDigest'
		| 'commentedOn.node.internal.contentFilePath'
		| 'commentedOn.node.internal.description'
		| 'commentedOn.node.internal.fieldOwners'
		| 'commentedOn.node.internal.ignoreType'
		| 'commentedOn.node.internal.mediaType'
		| 'commentedOn.node.internal.owner'
		| 'commentedOn.node.internal.type'
		| 'commentedOn.node.isContentNode'
		| 'commentedOn.node.isTermNode'
		| 'commentedOn.node.link'
		| 'commentedOn.node.modified'
		| 'commentedOn.node.modifiedGmt'
		| 'commentedOn.node.nodeType'
		| 'commentedOn.node.parent.children'
		| 'commentedOn.node.parent.id'
		| 'commentedOn.node.slug'
		| 'commentedOn.node.status'
		| 'commentedOn.node.template.templateName'
		| 'commentedOn.node.uri'
		| 'content'
		| 'databaseId'
		| 'date'
		| 'dateGmt'
		| 'id'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'karma'
		| 'nodeType'
		| 'parentDatabaseId'
		| 'parentId'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id'
		| 'replies.nodes'
		| 'replies.nodes.agent'
		| 'replies.nodes.authorIp'
		| 'replies.nodes.children'
		| 'replies.nodes.children.children'
		| 'replies.nodes.children.id'
		| 'replies.nodes.content'
		| 'replies.nodes.databaseId'
		| 'replies.nodes.date'
		| 'replies.nodes.dateGmt'
		| 'replies.nodes.id'
		| 'replies.nodes.internal.content'
		| 'replies.nodes.internal.contentDigest'
		| 'replies.nodes.internal.contentFilePath'
		| 'replies.nodes.internal.description'
		| 'replies.nodes.internal.fieldOwners'
		| 'replies.nodes.internal.ignoreType'
		| 'replies.nodes.internal.mediaType'
		| 'replies.nodes.internal.owner'
		| 'replies.nodes.internal.type'
		| 'replies.nodes.karma'
		| 'replies.nodes.nodeType'
		| 'replies.nodes.parentDatabaseId'
		| 'replies.nodes.parentId'
		| 'replies.nodes.parent.children'
		| 'replies.nodes.parent.id'
		| 'replies.nodes.replies.nodes'
		| 'replies.nodes.status'
		| 'replies.nodes.type'
		| 'status'
		| 'type'
		| 'wpParent.node.agent'
		| 'wpParent.node.authorIp'
		| 'wpParent.node.children'
		| 'wpParent.node.children.children'
		| 'wpParent.node.children.id'
		| 'wpParent.node.content'
		| 'wpParent.node.databaseId'
		| 'wpParent.node.date'
		| 'wpParent.node.dateGmt'
		| 'wpParent.node.id'
		| 'wpParent.node.internal.content'
		| 'wpParent.node.internal.contentDigest'
		| 'wpParent.node.internal.contentFilePath'
		| 'wpParent.node.internal.description'
		| 'wpParent.node.internal.fieldOwners'
		| 'wpParent.node.internal.ignoreType'
		| 'wpParent.node.internal.mediaType'
		| 'wpParent.node.internal.owner'
		| 'wpParent.node.internal.type'
		| 'wpParent.node.karma'
		| 'wpParent.node.nodeType'
		| 'wpParent.node.parentDatabaseId'
		| 'wpParent.node.parentId'
		| 'wpParent.node.parent.children'
		| 'wpParent.node.parent.id'
		| 'wpParent.node.replies.nodes'
		| 'wpParent.node.status'
		| 'wpParent.node.type';

	type WpCommentFilterInput = {
		readonly agent: InputMaybe<StringQueryOperatorInput>;
		readonly author: InputMaybe<WpCommentToCommenterConnectionEdgeTypeFilterInput>;
		readonly authorIp: InputMaybe<StringQueryOperatorInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly commentedOn: InputMaybe<WpCommentToContentNodeConnectionEdgeTypeFilterInput>;
		readonly content: InputMaybe<StringQueryOperatorInput>;
		readonly databaseId: InputMaybe<IntQueryOperatorInput>;
		readonly date: InputMaybe<DateQueryOperatorInput>;
		readonly dateGmt: InputMaybe<DateQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly karma: InputMaybe<IntQueryOperatorInput>;
		readonly nodeType: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly parentDatabaseId: InputMaybe<IntQueryOperatorInput>;
		readonly parentId: InputMaybe<IDQueryOperatorInput>;
		readonly replies: InputMaybe<WpCommentToCommentConnectionTypeFilterInput>;
		readonly status: InputMaybe<WpCommentStatusEnumQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
		readonly wpParent: InputMaybe<WpCommentToParentCommentConnectionEdgeTypeFilterInput>;
	};

	type WpCommentFilterListInput = {
		readonly elemMatch: InputMaybe<WpCommentFilterInput>;
	};

	type WpCommentGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpCommentEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<WpCommentGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpComment>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpCommentGroupConnection_distinctArgs = {
		field: WpCommentFieldsEnum;
	};

	type WpCommentGroupConnection_groupArgs = {
		field: WpCommentFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpCommentGroupConnection_maxArgs = {
		field: WpCommentFieldsEnum;
	};

	type WpCommentGroupConnection_minArgs = {
		field: WpCommentFieldsEnum;
	};

	type WpCommentGroupConnection_sumArgs = {
		field: WpCommentFieldsEnum;
	};

	type WpCommentSortInput = {
		readonly fields: InputMaybe<ReadonlyArray<InputMaybe<WpCommentFieldsEnum>>>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	/** The status of the comment object. */
	type WpCommentStatusEnum = 'APPROVE' | 'HOLD' | 'SPAM' | 'TRASH';

	type WpCommentStatusEnumQueryOperatorInput = {
		readonly eq: InputMaybe<WpCommentStatusEnum>;
		readonly in: InputMaybe<ReadonlyArray<InputMaybe<WpCommentStatusEnum>>>;
		readonly ne: InputMaybe<WpCommentStatusEnum>;
		readonly nin: InputMaybe<ReadonlyArray<InputMaybe<WpCommentStatusEnum>>>;
	};

	/** Connection between the Comment type and the Comment type */
	type WpCommentToCommentConnectionType = WpCommentConnectionType &
		WpConnectionType & {
			/** The nodes of the connection, without the edges */
			readonly nodes: ReadonlyArray<WpComment>;
		};

	type WpCommentToCommentConnectionTypeFilterInput = {
		readonly nodes: InputMaybe<WpCommentFilterListInput>;
	};

	/** Connection between the Comment type and the Commenter type */
	type WpCommentToCommenterConnectionEdgeType = WpCommenterConnectionEdgeType &
		WpEdgeType &
		WpOneToOneConnectionType & {
			/** The node of the connection, without the edges */
			readonly node: WpCommenter;
		};

	type WpCommentToCommenterConnectionEdgeTypeFilterInput = {
		readonly node: InputMaybe<WpCommenterFilterInput>;
	};

	/** Connection between the Comment type and the ContentNode type */
	type WpCommentToContentNodeConnectionEdgeType =
		WpContentNodeConnectionEdgeType &
			WpEdgeType &
			WpOneToOneConnectionType & {
				/** The node of the connection, without the edges */
				readonly node: WpContentNode;
			};

	type WpCommentToContentNodeConnectionEdgeTypeFilterInput = {
		readonly node: InputMaybe<WpContentNodeFilterInput>;
	};

	/** Connection between the Comment type and the Comment type */
	type WpCommentToParentCommentConnectionEdgeType =
		WpCommentConnectionEdgeType &
			WpEdgeType &
			WpOneToOneConnectionType & {
				/** The node of the connection, without the edges */
				readonly node: WpComment;
			};

	type WpCommentToParentCommentConnectionEdgeTypeFilterInput = {
		readonly node: InputMaybe<WpCommentFilterInput>;
	};

	type WpCommenter = {
		/** Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument. */
		readonly avatar: Maybe<WpAvatar>;
		readonly children: ReadonlyArray<Node>;
		/** Identifies the primary key from the database. */
		readonly databaseId: Scalars['Int'];
		/** The email address of the author of a comment. */
		readonly email: Maybe<Scalars['String']>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		/** The name of the author of a comment. */
		readonly name: Maybe<Scalars['String']>;
		readonly nodeType: Maybe<Scalars['String']>;
		readonly parent: Maybe<Node>;
		/** The url of the author of a comment. */
		readonly url: Maybe<Scalars['String']>;
	};

	type WpCommenterConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpCommenterEdge>;
		readonly group: ReadonlyArray<WpCommenterGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpCommenter>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpCommenterConnection_distinctArgs = {
		field: WpCommenterFieldsEnum;
	};

	type WpCommenterConnection_groupArgs = {
		field: WpCommenterFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpCommenterConnection_maxArgs = {
		field: WpCommenterFieldsEnum;
	};

	type WpCommenterConnection_minArgs = {
		field: WpCommenterFieldsEnum;
	};

	type WpCommenterConnection_sumArgs = {
		field: WpCommenterFieldsEnum;
	};

	type WpCommenterConnectionEdgeType = {
		/** The connected Commenter Node */
		readonly node: WpCommenter;
	};

	type WpCommenterEdge = {
		readonly next: Maybe<WpCommenter>;
		readonly node: WpCommenter;
		readonly previous: Maybe<WpCommenter>;
	};

	type WpCommenterFieldsEnum =
		| 'avatar.default'
		| 'avatar.extraAttr'
		| 'avatar.forceDefault'
		| 'avatar.foundAvatar'
		| 'avatar.height'
		| 'avatar.rating'
		| 'avatar.scheme'
		| 'avatar.size'
		| 'avatar.url'
		| 'avatar.width'
		| 'children'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'databaseId'
		| 'email'
		| 'id'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'name'
		| 'nodeType'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id'
		| 'url';

	type WpCommenterFilterInput = {
		readonly avatar: InputMaybe<WpAvatarFilterInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly databaseId: InputMaybe<IntQueryOperatorInput>;
		readonly email: InputMaybe<StringQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly name: InputMaybe<StringQueryOperatorInput>;
		readonly nodeType: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly url: InputMaybe<StringQueryOperatorInput>;
	};

	type WpCommenterGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpCommenterEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<WpCommenterGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpCommenter>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpCommenterGroupConnection_distinctArgs = {
		field: WpCommenterFieldsEnum;
	};

	type WpCommenterGroupConnection_groupArgs = {
		field: WpCommenterFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpCommenterGroupConnection_maxArgs = {
		field: WpCommenterFieldsEnum;
	};

	type WpCommenterGroupConnection_minArgs = {
		field: WpCommenterFieldsEnum;
	};

	type WpCommenterGroupConnection_sumArgs = {
		field: WpCommenterFieldsEnum;
	};

	type WpCommenterSortInput = {
		readonly fields: InputMaybe<
			ReadonlyArray<InputMaybe<WpCommenterFieldsEnum>>
		>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	type WpConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpEdge>;
		readonly group: ReadonlyArray<WpGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<Wp>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpConnection_distinctArgs = {
		field: WpFieldsEnum;
	};

	type WpConnection_groupArgs = {
		field: WpFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpConnection_maxArgs = {
		field: WpFieldsEnum;
	};

	type WpConnection_minArgs = {
		field: WpFieldsEnum;
	};

	type WpConnection_sumArgs = {
		field: WpFieldsEnum;
	};

	type WpConnectionType = {
		/** A list of connected nodes */
		readonly nodes: ReadonlyArray<WpNode>;
	};

	type WpContentNode = {
		readonly children: ReadonlyArray<Node>;
		/** Connection between the ContentNode type and the ContentType type */
		readonly contentType: Maybe<WpContentNodeToContentTypeConnectionEdgeType>;
		/** The name of the Content Type the node belongs to */
		readonly contentTypeName: Scalars['String'];
		/** The ID of the node in the database. */
		readonly databaseId: Scalars['Int'];
		/** Post publishing date. */
		readonly date: Maybe<Scalars['Date']>;
		/** The publishing date set in GMT. */
		readonly dateGmt: Maybe<Scalars['Date']>;
		/** The desired slug of the post */
		readonly desiredSlug: Maybe<Scalars['String']>;
		/** The RSS enclosure for the object */
		readonly enclosure: Maybe<Scalars['String']>;
		/** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
		readonly guid: Maybe<Scalars['String']>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		/** Whether the node is a Content Node */
		readonly isContentNode: Scalars['Boolean'];
		/** Whether the node is a Term */
		readonly isTermNode: Scalars['Boolean'];
		/** The user that most recently edited the node */
		readonly lastEditedBy: Maybe<WpContentNodeToEditLastConnectionEdgeType>;
		/** The permalink of the post */
		readonly link: Maybe<Scalars['String']>;
		/** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
		readonly modified: Maybe<Scalars['Date']>;
		/** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
		readonly modifiedGmt: Maybe<Scalars['Date']>;
		readonly nodeType: Maybe<Scalars['String']>;
		readonly parent: Maybe<Node>;
		/** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
		readonly slug: Maybe<Scalars['String']>;
		/** The current status of the object */
		readonly status: Maybe<Scalars['String']>;
		/** The template assigned to a node of content */
		readonly template: Maybe<WpContentTemplate>;
		/** The unique resource identifier path */
		readonly uri: Maybe<Scalars['String']>;
	};

	type WpContentNode_dateArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type WpContentNode_dateGmtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type WpContentNode_modifiedArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type WpContentNode_modifiedGmtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type WpContentNodeConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpContentNodeEdge>;
		readonly group: ReadonlyArray<WpContentNodeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpContentNode>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpContentNodeConnection_distinctArgs = {
		field: WpContentNodeFieldsEnum;
	};

	type WpContentNodeConnection_groupArgs = {
		field: WpContentNodeFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpContentNodeConnection_maxArgs = {
		field: WpContentNodeFieldsEnum;
	};

	type WpContentNodeConnection_minArgs = {
		field: WpContentNodeFieldsEnum;
	};

	type WpContentNodeConnection_sumArgs = {
		field: WpContentNodeFieldsEnum;
	};

	type WpContentNodeConnectionEdgeType = {
		/** The connected ContentNode Node */
		readonly node: WpContentNode;
	};

	type WpContentNodeConnectionType = {
		/** A list of connected ContentNode Nodes */
		readonly nodes: ReadonlyArray<WpContentNode>;
	};

	type WpContentNodeEdge = {
		readonly next: Maybe<WpContentNode>;
		readonly node: WpContentNode;
		readonly previous: Maybe<WpContentNode>;
	};

	type WpContentNodeFieldsEnum =
		| 'children'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'contentTypeName'
		| 'contentType.node.archivePath'
		| 'contentType.node.canExport'
		| 'contentType.node.children'
		| 'contentType.node.children.children'
		| 'contentType.node.children.id'
		| 'contentType.node.connectedTaxonomies.nodes'
		| 'contentType.node.contentNodes.nodes'
		| 'contentType.node.deleteWithUser'
		| 'contentType.node.description'
		| 'contentType.node.excludeFromSearch'
		| 'contentType.node.graphqlPluralName'
		| 'contentType.node.graphqlSingleName'
		| 'contentType.node.hasArchive'
		| 'contentType.node.hierarchical'
		| 'contentType.node.id'
		| 'contentType.node.internal.content'
		| 'contentType.node.internal.contentDigest'
		| 'contentType.node.internal.contentFilePath'
		| 'contentType.node.internal.description'
		| 'contentType.node.internal.fieldOwners'
		| 'contentType.node.internal.ignoreType'
		| 'contentType.node.internal.mediaType'
		| 'contentType.node.internal.owner'
		| 'contentType.node.internal.type'
		| 'contentType.node.isContentNode'
		| 'contentType.node.isFrontPage'
		| 'contentType.node.isPostsPage'
		| 'contentType.node.isTermNode'
		| 'contentType.node.label'
		| 'contentType.node.labels.addNew'
		| 'contentType.node.labels.addNewItem'
		| 'contentType.node.labels.allItems'
		| 'contentType.node.labels.archives'
		| 'contentType.node.labels.attributes'
		| 'contentType.node.labels.editItem'
		| 'contentType.node.labels.featuredImage'
		| 'contentType.node.labels.filterItemsList'
		| 'contentType.node.labels.insertIntoItem'
		| 'contentType.node.labels.itemsList'
		| 'contentType.node.labels.itemsListNavigation'
		| 'contentType.node.labels.menuName'
		| 'contentType.node.labels.name'
		| 'contentType.node.labels.newItem'
		| 'contentType.node.labels.notFound'
		| 'contentType.node.labels.notFoundInTrash'
		| 'contentType.node.labels.parentItemColon'
		| 'contentType.node.labels.removeFeaturedImage'
		| 'contentType.node.labels.searchItems'
		| 'contentType.node.labels.setFeaturedImage'
		| 'contentType.node.labels.singularName'
		| 'contentType.node.labels.uploadedToThisItem'
		| 'contentType.node.labels.useFeaturedImage'
		| 'contentType.node.labels.viewItem'
		| 'contentType.node.labels.viewItems'
		| 'contentType.node.menuIcon'
		| 'contentType.node.menuPosition'
		| 'contentType.node.name'
		| 'contentType.node.nodeType'
		| 'contentType.node.parent.children'
		| 'contentType.node.parent.id'
		| 'contentType.node.public'
		| 'contentType.node.publiclyQueryable'
		| 'contentType.node.restBase'
		| 'contentType.node.restControllerClass'
		| 'contentType.node.showInAdminBar'
		| 'contentType.node.showInGraphql'
		| 'contentType.node.showInMenu'
		| 'contentType.node.showInNavMenus'
		| 'contentType.node.showInRest'
		| 'contentType.node.showUi'
		| 'contentType.node.uri'
		| 'databaseId'
		| 'date'
		| 'dateGmt'
		| 'desiredSlug'
		| 'enclosure'
		| 'guid'
		| 'id'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'isContentNode'
		| 'isTermNode'
		| 'lastEditedBy.node.avatar.default'
		| 'lastEditedBy.node.avatar.extraAttr'
		| 'lastEditedBy.node.avatar.forceDefault'
		| 'lastEditedBy.node.avatar.foundAvatar'
		| 'lastEditedBy.node.avatar.height'
		| 'lastEditedBy.node.avatar.rating'
		| 'lastEditedBy.node.avatar.scheme'
		| 'lastEditedBy.node.avatar.size'
		| 'lastEditedBy.node.avatar.url'
		| 'lastEditedBy.node.avatar.width'
		| 'lastEditedBy.node.capKey'
		| 'lastEditedBy.node.capabilities'
		| 'lastEditedBy.node.children'
		| 'lastEditedBy.node.children.children'
		| 'lastEditedBy.node.children.id'
		| 'lastEditedBy.node.comments.nodes'
		| 'lastEditedBy.node.databaseId'
		| 'lastEditedBy.node.description'
		| 'lastEditedBy.node.email'
		| 'lastEditedBy.node.extraCapabilities'
		| 'lastEditedBy.node.firstName'
		| 'lastEditedBy.node.id'
		| 'lastEditedBy.node.internal.content'
		| 'lastEditedBy.node.internal.contentDigest'
		| 'lastEditedBy.node.internal.contentFilePath'
		| 'lastEditedBy.node.internal.description'
		| 'lastEditedBy.node.internal.fieldOwners'
		| 'lastEditedBy.node.internal.ignoreType'
		| 'lastEditedBy.node.internal.mediaType'
		| 'lastEditedBy.node.internal.owner'
		| 'lastEditedBy.node.internal.type'
		| 'lastEditedBy.node.isContentNode'
		| 'lastEditedBy.node.isTermNode'
		| 'lastEditedBy.node.lastName'
		| 'lastEditedBy.node.locale'
		| 'lastEditedBy.node.name'
		| 'lastEditedBy.node.nicename'
		| 'lastEditedBy.node.nickname'
		| 'lastEditedBy.node.nodeType'
		| 'lastEditedBy.node.pages.nodes'
		| 'lastEditedBy.node.parent.children'
		| 'lastEditedBy.node.parent.id'
		| 'lastEditedBy.node.posts.nodes'
		| 'lastEditedBy.node.registeredDate'
		| 'lastEditedBy.node.roles.nodes'
		| 'lastEditedBy.node.slug'
		| 'lastEditedBy.node.uri'
		| 'lastEditedBy.node.url'
		| 'lastEditedBy.node.username'
		| 'link'
		| 'modified'
		| 'modifiedGmt'
		| 'nodeType'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id'
		| 'slug'
		| 'status'
		| 'template.templateName'
		| 'uri';

	type WpContentNodeFilterInput = {
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly contentType: InputMaybe<WpContentNodeToContentTypeConnectionEdgeTypeFilterInput>;
		readonly contentTypeName: InputMaybe<StringQueryOperatorInput>;
		readonly databaseId: InputMaybe<IntQueryOperatorInput>;
		readonly date: InputMaybe<DateQueryOperatorInput>;
		readonly dateGmt: InputMaybe<DateQueryOperatorInput>;
		readonly desiredSlug: InputMaybe<StringQueryOperatorInput>;
		readonly enclosure: InputMaybe<StringQueryOperatorInput>;
		readonly guid: InputMaybe<StringQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly isContentNode: InputMaybe<BooleanQueryOperatorInput>;
		readonly isTermNode: InputMaybe<BooleanQueryOperatorInput>;
		readonly lastEditedBy: InputMaybe<WpContentNodeToEditLastConnectionEdgeTypeFilterInput>;
		readonly link: InputMaybe<StringQueryOperatorInput>;
		readonly modified: InputMaybe<DateQueryOperatorInput>;
		readonly modifiedGmt: InputMaybe<DateQueryOperatorInput>;
		readonly nodeType: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly slug: InputMaybe<StringQueryOperatorInput>;
		readonly status: InputMaybe<StringQueryOperatorInput>;
		readonly template: InputMaybe<WpContentTemplateFilterInput>;
		readonly uri: InputMaybe<StringQueryOperatorInput>;
	};

	type WpContentNodeFilterListInput = {
		readonly elemMatch: InputMaybe<WpContentNodeFilterInput>;
	};

	type WpContentNodeGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpContentNodeEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<WpContentNodeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpContentNode>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpContentNodeGroupConnection_distinctArgs = {
		field: WpContentNodeFieldsEnum;
	};

	type WpContentNodeGroupConnection_groupArgs = {
		field: WpContentNodeFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpContentNodeGroupConnection_maxArgs = {
		field: WpContentNodeFieldsEnum;
	};

	type WpContentNodeGroupConnection_minArgs = {
		field: WpContentNodeFieldsEnum;
	};

	type WpContentNodeGroupConnection_sumArgs = {
		field: WpContentNodeFieldsEnum;
	};

	type WpContentNodeSortInput = {
		readonly fields: InputMaybe<
			ReadonlyArray<InputMaybe<WpContentNodeFieldsEnum>>
		>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	/** Connection between the ContentNode type and the ContentType type */
	type WpContentNodeToContentTypeConnectionEdgeType =
		WpContentTypeConnectionEdgeType &
			WpEdgeType &
			WpOneToOneConnectionType & {
				/** The node of the connection, without the edges */
				readonly node: WpContentType;
			};

	type WpContentNodeToContentTypeConnectionEdgeTypeFilterInput = {
		readonly node: InputMaybe<WpContentTypeFilterInput>;
	};

	/** Connection between the ContentNode type and the User type */
	type WpContentNodeToEditLastConnectionEdgeType = WpEdgeType &
		WpOneToOneConnectionType &
		WpUserConnectionEdgeType & {
			/** The node of the connection, without the edges */
			readonly node: WpUser;
		};

	type WpContentNodeToEditLastConnectionEdgeTypeFilterInput = {
		readonly node: InputMaybe<WpUserFilterInput>;
	};

	/** Connection between the ContentNode type and the User type */
	type WpContentNodeToEditLockConnectionEdgeType = WpEdgeType &
		WpOneToOneConnectionType &
		WpUserConnectionEdgeType & {
			/** The timestamp for when the node was last edited */
			readonly lockTimestamp: Maybe<Scalars['String']>;
			/** The node of the connection, without the edges */
			readonly node: WpUser;
		};

	type WpContentTemplate = {
		/** The name of the template */
		readonly templateName: Maybe<Scalars['String']>;
	};

	type WpContentTemplateFilterInput = {
		readonly templateName: InputMaybe<StringQueryOperatorInput>;
	};

	/** An Post Type object */
	type WpContentType = Node &
		WpNode &
		WpUniformResourceIdentifiable & {
			/** The url path of the first page of the archive page for this content type. */
			readonly archivePath: Maybe<Scalars['String']>;
			/** Whether this content type should can be exported. */
			readonly canExport: Maybe<Scalars['Boolean']>;
			readonly children: ReadonlyArray<Node>;
			/** Connection between the ContentType type and the Taxonomy type */
			readonly connectedTaxonomies: Maybe<WpContentTypeToTaxonomyConnectionType>;
			/** Connection between the ContentType type and the ContentNode type */
			readonly contentNodes: Maybe<WpContentTypeToContentNodeConnectionType>;
			/** Whether content of this type should be deleted when the author of it is deleted from the system. */
			readonly deleteWithUser: Maybe<Scalars['Boolean']>;
			/** Description of the content type. */
			readonly description: Maybe<Scalars['String']>;
			/** Whether to exclude nodes of this content type from front end search results. */
			readonly excludeFromSearch: Maybe<Scalars['Boolean']>;
			/** The plural name of the content type within the GraphQL Schema. */
			readonly graphqlPluralName: Maybe<Scalars['String']>;
			/** The singular name of the content type within the GraphQL Schema. */
			readonly graphqlSingleName: Maybe<Scalars['String']>;
			/** Whether this content type should have archives. Content archives are generated by type and by date. */
			readonly hasArchive: Maybe<Scalars['Boolean']>;
			/** Whether the content type is hierarchical, for example pages. */
			readonly hierarchical: Maybe<Scalars['Boolean']>;
			readonly id: Scalars['ID'];
			readonly internal: Internal;
			/** Whether the node is a Content Node */
			readonly isContentNode: Scalars['Boolean'];
			/** Whether this page is set to the static front page. */
			readonly isFrontPage: Scalars['Boolean'];
			/** Whether this page is set to the blog posts page. */
			readonly isPostsPage: Scalars['Boolean'];
			/** Whether the node is a Term */
			readonly isTermNode: Scalars['Boolean'];
			/** Display name of the content type. */
			readonly label: Maybe<Scalars['String']>;
			/** Details about the content type labels. */
			readonly labels: Maybe<WpPostTypeLabelDetails>;
			/** The name of the icon file to display as a menu icon. */
			readonly menuIcon: Maybe<Scalars['String']>;
			/** The position of this post type in the menu. Only applies if show_in_menu is true. */
			readonly menuPosition: Maybe<Scalars['Int']>;
			/** The internal name of the post type. This should not be used for display purposes. */
			readonly name: Maybe<Scalars['String']>;
			readonly nodeType: Maybe<Scalars['String']>;
			readonly parent: Maybe<Node>;
			/** Whether a content type is intended for use publicly either via the admin interface or by front-end users. While the default settings of exclude_from_search, publicly_queryable, show_ui, and show_in_nav_menus are inherited from public, each does not rely on this relationship and controls a very specific intention. */
			readonly public: Maybe<Scalars['Boolean']>;
			/** Whether queries can be performed on the front end for the content type as part of parse_request(). */
			readonly publiclyQueryable: Maybe<Scalars['Boolean']>;
			/** Name of content type to display in REST API &quot;wp/v2&quot; namespace. */
			readonly restBase: Maybe<Scalars['String']>;
			/** The REST Controller class assigned to handling this content type. */
			readonly restControllerClass: Maybe<Scalars['String']>;
			/** Makes this content type available via the admin bar. */
			readonly showInAdminBar: Maybe<Scalars['Boolean']>;
			/** Whether to add the content type to the GraphQL Schema. */
			readonly showInGraphql: Maybe<Scalars['Boolean']>;
			/** Where to show the content type in the admin menu. To work, $show_ui must be true. If true, the post type is shown in its own top level menu. If false, no menu is shown. If a string of an existing top level menu (eg. &quot;tools.php&quot; or &quot;edit.php?post_type=page&quot;), the post type will be placed as a sub-menu of that. */
			readonly showInMenu: Maybe<Scalars['Boolean']>;
			/** Makes this content type available for selection in navigation menus. */
			readonly showInNavMenus: Maybe<Scalars['Boolean']>;
			/** Whether the content type is associated with a route under the the REST API &quot;wp/v2&quot; namespace. */
			readonly showInRest: Maybe<Scalars['Boolean']>;
			/** Whether to generate and allow a UI for managing this content type in the admin. */
			readonly showUi: Maybe<Scalars['Boolean']>;
			/** The unique resource identifier path */
			readonly uri: Maybe<Scalars['String']>;
		};

	type WpContentTypeConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpContentTypeEdge>;
		readonly group: ReadonlyArray<WpContentTypeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpContentType>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpContentTypeConnection_distinctArgs = {
		field: WpContentTypeFieldsEnum;
	};

	type WpContentTypeConnection_groupArgs = {
		field: WpContentTypeFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpContentTypeConnection_maxArgs = {
		field: WpContentTypeFieldsEnum;
	};

	type WpContentTypeConnection_minArgs = {
		field: WpContentTypeFieldsEnum;
	};

	type WpContentTypeConnection_sumArgs = {
		field: WpContentTypeFieldsEnum;
	};

	type WpContentTypeConnectionEdgeType = {
		/** The connected ContentType Node */
		readonly node: WpContentType;
	};

	type WpContentTypeConnectionType = {
		/** A list of connected ContentType Nodes */
		readonly nodes: ReadonlyArray<WpContentType>;
	};

	type WpContentTypeEdge = {
		readonly next: Maybe<WpContentType>;
		readonly node: WpContentType;
		readonly previous: Maybe<WpContentType>;
	};

	type WpContentTypeFieldsEnum =
		| 'archivePath'
		| 'canExport'
		| 'children'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'connectedTaxonomies.nodes'
		| 'connectedTaxonomies.nodes.archivePath'
		| 'connectedTaxonomies.nodes.children'
		| 'connectedTaxonomies.nodes.children.children'
		| 'connectedTaxonomies.nodes.children.id'
		| 'connectedTaxonomies.nodes.connectedContentTypes.nodes'
		| 'connectedTaxonomies.nodes.description'
		| 'connectedTaxonomies.nodes.graphqlPluralName'
		| 'connectedTaxonomies.nodes.graphqlSingleName'
		| 'connectedTaxonomies.nodes.hierarchical'
		| 'connectedTaxonomies.nodes.id'
		| 'connectedTaxonomies.nodes.internal.content'
		| 'connectedTaxonomies.nodes.internal.contentDigest'
		| 'connectedTaxonomies.nodes.internal.contentFilePath'
		| 'connectedTaxonomies.nodes.internal.description'
		| 'connectedTaxonomies.nodes.internal.fieldOwners'
		| 'connectedTaxonomies.nodes.internal.ignoreType'
		| 'connectedTaxonomies.nodes.internal.mediaType'
		| 'connectedTaxonomies.nodes.internal.owner'
		| 'connectedTaxonomies.nodes.internal.type'
		| 'connectedTaxonomies.nodes.label'
		| 'connectedTaxonomies.nodes.name'
		| 'connectedTaxonomies.nodes.nodeType'
		| 'connectedTaxonomies.nodes.parent.children'
		| 'connectedTaxonomies.nodes.parent.id'
		| 'connectedTaxonomies.nodes.public'
		| 'connectedTaxonomies.nodes.restBase'
		| 'connectedTaxonomies.nodes.restControllerClass'
		| 'connectedTaxonomies.nodes.showCloud'
		| 'connectedTaxonomies.nodes.showInAdminColumn'
		| 'connectedTaxonomies.nodes.showInGraphql'
		| 'connectedTaxonomies.nodes.showInMenu'
		| 'connectedTaxonomies.nodes.showInNavMenus'
		| 'connectedTaxonomies.nodes.showInQuickEdit'
		| 'connectedTaxonomies.nodes.showInRest'
		| 'connectedTaxonomies.nodes.showUi'
		| 'contentNodes.nodes'
		| 'contentNodes.nodes.children'
		| 'contentNodes.nodes.children.children'
		| 'contentNodes.nodes.children.id'
		| 'contentNodes.nodes.contentTypeName'
		| 'contentNodes.nodes.databaseId'
		| 'contentNodes.nodes.date'
		| 'contentNodes.nodes.dateGmt'
		| 'contentNodes.nodes.desiredSlug'
		| 'contentNodes.nodes.enclosure'
		| 'contentNodes.nodes.guid'
		| 'contentNodes.nodes.id'
		| 'contentNodes.nodes.internal.content'
		| 'contentNodes.nodes.internal.contentDigest'
		| 'contentNodes.nodes.internal.contentFilePath'
		| 'contentNodes.nodes.internal.description'
		| 'contentNodes.nodes.internal.fieldOwners'
		| 'contentNodes.nodes.internal.ignoreType'
		| 'contentNodes.nodes.internal.mediaType'
		| 'contentNodes.nodes.internal.owner'
		| 'contentNodes.nodes.internal.type'
		| 'contentNodes.nodes.isContentNode'
		| 'contentNodes.nodes.isTermNode'
		| 'contentNodes.nodes.link'
		| 'contentNodes.nodes.modified'
		| 'contentNodes.nodes.modifiedGmt'
		| 'contentNodes.nodes.nodeType'
		| 'contentNodes.nodes.parent.children'
		| 'contentNodes.nodes.parent.id'
		| 'contentNodes.nodes.slug'
		| 'contentNodes.nodes.status'
		| 'contentNodes.nodes.template.templateName'
		| 'contentNodes.nodes.uri'
		| 'deleteWithUser'
		| 'description'
		| 'excludeFromSearch'
		| 'graphqlPluralName'
		| 'graphqlSingleName'
		| 'hasArchive'
		| 'hierarchical'
		| 'id'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'isContentNode'
		| 'isFrontPage'
		| 'isPostsPage'
		| 'isTermNode'
		| 'label'
		| 'labels.addNew'
		| 'labels.addNewItem'
		| 'labels.allItems'
		| 'labels.archives'
		| 'labels.attributes'
		| 'labels.editItem'
		| 'labels.featuredImage'
		| 'labels.filterItemsList'
		| 'labels.insertIntoItem'
		| 'labels.itemsList'
		| 'labels.itemsListNavigation'
		| 'labels.menuName'
		| 'labels.name'
		| 'labels.newItem'
		| 'labels.notFound'
		| 'labels.notFoundInTrash'
		| 'labels.parentItemColon'
		| 'labels.removeFeaturedImage'
		| 'labels.searchItems'
		| 'labels.setFeaturedImage'
		| 'labels.singularName'
		| 'labels.uploadedToThisItem'
		| 'labels.useFeaturedImage'
		| 'labels.viewItem'
		| 'labels.viewItems'
		| 'menuIcon'
		| 'menuPosition'
		| 'name'
		| 'nodeType'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id'
		| 'public'
		| 'publiclyQueryable'
		| 'restBase'
		| 'restControllerClass'
		| 'showInAdminBar'
		| 'showInGraphql'
		| 'showInMenu'
		| 'showInNavMenus'
		| 'showInRest'
		| 'showUi'
		| 'uri';

	type WpContentTypeFilterInput = {
		readonly archivePath: InputMaybe<StringQueryOperatorInput>;
		readonly canExport: InputMaybe<BooleanQueryOperatorInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly connectedTaxonomies: InputMaybe<WpContentTypeToTaxonomyConnectionTypeFilterInput>;
		readonly contentNodes: InputMaybe<WpContentTypeToContentNodeConnectionTypeFilterInput>;
		readonly deleteWithUser: InputMaybe<BooleanQueryOperatorInput>;
		readonly description: InputMaybe<StringQueryOperatorInput>;
		readonly excludeFromSearch: InputMaybe<BooleanQueryOperatorInput>;
		readonly graphqlPluralName: InputMaybe<StringQueryOperatorInput>;
		readonly graphqlSingleName: InputMaybe<StringQueryOperatorInput>;
		readonly hasArchive: InputMaybe<BooleanQueryOperatorInput>;
		readonly hierarchical: InputMaybe<BooleanQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly isContentNode: InputMaybe<BooleanQueryOperatorInput>;
		readonly isFrontPage: InputMaybe<BooleanQueryOperatorInput>;
		readonly isPostsPage: InputMaybe<BooleanQueryOperatorInput>;
		readonly isTermNode: InputMaybe<BooleanQueryOperatorInput>;
		readonly label: InputMaybe<StringQueryOperatorInput>;
		readonly labels: InputMaybe<WpPostTypeLabelDetailsFilterInput>;
		readonly menuIcon: InputMaybe<StringQueryOperatorInput>;
		readonly menuPosition: InputMaybe<IntQueryOperatorInput>;
		readonly name: InputMaybe<StringQueryOperatorInput>;
		readonly nodeType: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly public: InputMaybe<BooleanQueryOperatorInput>;
		readonly publiclyQueryable: InputMaybe<BooleanQueryOperatorInput>;
		readonly restBase: InputMaybe<StringQueryOperatorInput>;
		readonly restControllerClass: InputMaybe<StringQueryOperatorInput>;
		readonly showInAdminBar: InputMaybe<BooleanQueryOperatorInput>;
		readonly showInGraphql: InputMaybe<BooleanQueryOperatorInput>;
		readonly showInMenu: InputMaybe<BooleanQueryOperatorInput>;
		readonly showInNavMenus: InputMaybe<BooleanQueryOperatorInput>;
		readonly showInRest: InputMaybe<BooleanQueryOperatorInput>;
		readonly showUi: InputMaybe<BooleanQueryOperatorInput>;
		readonly uri: InputMaybe<StringQueryOperatorInput>;
	};

	type WpContentTypeFilterListInput = {
		readonly elemMatch: InputMaybe<WpContentTypeFilterInput>;
	};

	type WpContentTypeGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpContentTypeEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<WpContentTypeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpContentType>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpContentTypeGroupConnection_distinctArgs = {
		field: WpContentTypeFieldsEnum;
	};

	type WpContentTypeGroupConnection_groupArgs = {
		field: WpContentTypeFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpContentTypeGroupConnection_maxArgs = {
		field: WpContentTypeFieldsEnum;
	};

	type WpContentTypeGroupConnection_minArgs = {
		field: WpContentTypeFieldsEnum;
	};

	type WpContentTypeGroupConnection_sumArgs = {
		field: WpContentTypeFieldsEnum;
	};

	type WpContentTypeSortInput = {
		readonly fields: InputMaybe<
			ReadonlyArray<InputMaybe<WpContentTypeFieldsEnum>>
		>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	/** Connection between the ContentType type and the ContentNode type */
	type WpContentTypeToContentNodeConnectionType = WpConnectionType &
		WpContentNodeConnectionType & {
			/** The nodes of the connection, without the edges */
			readonly nodes: ReadonlyArray<WpContentNode>;
		};

	type WpContentTypeToContentNodeConnectionTypeFilterInput = {
		readonly nodes: InputMaybe<WpContentNodeFilterListInput>;
	};

	/** Connection between the ContentType type and the Taxonomy type */
	type WpContentTypeToTaxonomyConnectionType = WpConnectionType &
		WpTaxonomyConnectionType & {
			/** The nodes of the connection, without the edges */
			readonly nodes: ReadonlyArray<WpTaxonomy>;
		};

	type WpContentTypeToTaxonomyConnectionTypeFilterInput = {
		readonly nodes: InputMaybe<WpTaxonomyFilterListInput>;
	};

	type WpDatabaseIdentifier = {
		/** The unique identifier stored in the database */
		readonly databaseId: Scalars['Int'];
	};

	/** The template assigned to the node */
	type WpDefaultTemplate = WpContentTemplate & {
		/** The name of the template */
		readonly templateName: Maybe<Scalars['String']>;
	};

	/** The discussion setting type */
	type WpDiscussionSettings = {
		/** Allow people to submit comments on new posts. */
		readonly defaultCommentStatus: Maybe<Scalars['String']>;
		/** Allow link notifications from other blogs (pingbacks and trackbacks) on new articles. */
		readonly defaultPingStatus: Maybe<Scalars['String']>;
	};

	type WpDiscussionSettingsFilterInput = {
		readonly defaultCommentStatus: InputMaybe<StringQueryOperatorInput>;
		readonly defaultPingStatus: InputMaybe<StringQueryOperatorInput>;
	};

	type WpEdge = {
		readonly next: Maybe<Wp>;
		readonly node: Wp;
		readonly previous: Maybe<Wp>;
	};

	type WpEdgeType = {
		/** The connected node */
		readonly node: WpNode;
	};

	type WpFieldsEnum =
		| 'allSettings.discussionSettingsDefaultCommentStatus'
		| 'allSettings.discussionSettingsDefaultPingStatus'
		| 'allSettings.generalSettingsDateFormat'
		| 'allSettings.generalSettingsDescription'
		| 'allSettings.generalSettingsEmail'
		| 'allSettings.generalSettingsLanguage'
		| 'allSettings.generalSettingsStartOfWeek'
		| 'allSettings.generalSettingsTimeFormat'
		| 'allSettings.generalSettingsTimezone'
		| 'allSettings.generalSettingsTitle'
		| 'allSettings.generalSettingsUrl'
		| 'allSettings.readingSettingsPageForPosts'
		| 'allSettings.readingSettingsPageOnFront'
		| 'allSettings.readingSettingsPostsPerPage'
		| 'allSettings.readingSettingsShowOnFront'
		| 'allSettings.writingSettingsDefaultCategory'
		| 'allSettings.writingSettingsDefaultPostFormat'
		| 'allSettings.writingSettingsUseSmilies'
		| 'children'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'discussionSettings.defaultCommentStatus'
		| 'discussionSettings.defaultPingStatus'
		| 'generalSettings.dateFormat'
		| 'generalSettings.description'
		| 'generalSettings.email'
		| 'generalSettings.language'
		| 'generalSettings.startOfWeek'
		| 'generalSettings.timeFormat'
		| 'generalSettings.timezone'
		| 'generalSettings.title'
		| 'generalSettings.url'
		| 'id'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'nodeType'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id'
		| 'readingSettings.pageForPosts'
		| 'readingSettings.pageOnFront'
		| 'readingSettings.postsPerPage'
		| 'readingSettings.showOnFront'
		| 'wpGatsby.arePrettyPermalinksEnabled'
		| 'wpGatsby.isPreviewFrontendOnline'
		| 'writingSettings.defaultCategory'
		| 'writingSettings.defaultPostFormat'
		| 'writingSettings.useSmilies';

	type WpFilterInput = {
		readonly allSettings: InputMaybe<WpSettingsFilterInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly discussionSettings: InputMaybe<WpDiscussionSettingsFilterInput>;
		readonly generalSettings: InputMaybe<WpGeneralSettingsFilterInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly nodeType: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly readingSettings: InputMaybe<WpReadingSettingsFilterInput>;
		readonly wpGatsby: InputMaybe<WpWPGatsbyFilterInput>;
		readonly writingSettings: InputMaybe<WpWritingSettingsFilterInput>;
	};

	/** The general setting type */
	type WpGeneralSettings = {
		/** A date format for all date strings. */
		readonly dateFormat: Maybe<Scalars['String']>;
		/** Site tagline. */
		readonly description: Maybe<Scalars['String']>;
		/** This address is used for admin purposes, like new user notification. */
		readonly email: Maybe<Scalars['String']>;
		/** WordPress locale code. */
		readonly language: Maybe<Scalars['String']>;
		/** A day number of the week that the week should start on. */
		readonly startOfWeek: Maybe<Scalars['Int']>;
		/** A time format for all time strings. */
		readonly timeFormat: Maybe<Scalars['String']>;
		/** A city in the same timezone as you. */
		readonly timezone: Maybe<Scalars['String']>;
		/** Site title. */
		readonly title: Maybe<Scalars['String']>;
		/** Site URL. */
		readonly url: Maybe<Scalars['String']>;
	};

	type WpGeneralSettingsFilterInput = {
		readonly dateFormat: InputMaybe<StringQueryOperatorInput>;
		readonly description: InputMaybe<StringQueryOperatorInput>;
		readonly email: InputMaybe<StringQueryOperatorInput>;
		readonly language: InputMaybe<StringQueryOperatorInput>;
		readonly startOfWeek: InputMaybe<IntQueryOperatorInput>;
		readonly timeFormat: InputMaybe<StringQueryOperatorInput>;
		readonly timezone: InputMaybe<StringQueryOperatorInput>;
		readonly title: InputMaybe<StringQueryOperatorInput>;
		readonly url: InputMaybe<StringQueryOperatorInput>;
	};

	/** The graphqlDocument type */
	type WpGraphqlDocument = Node &
		WpContentNode &
		WpDatabaseIdentifier &
		WpNode &
		WpNodeWithContentEditor &
		WpNodeWithTemplate &
		WpNodeWithTitle &
		WpUniformResourceIdentifiable & {
			/** Alias names for saved GraphQL query documents */
			readonly alias: Maybe<ReadonlyArray<Scalars['String']>>;
			readonly children: ReadonlyArray<Node>;
			/** The content of the post. */
			readonly content: Maybe<Scalars['String']>;
			/** Connection between the ContentNode type and the ContentType type */
			readonly contentType: Maybe<WpContentNodeToContentTypeConnectionEdgeType>;
			/** The name of the Content Type the node belongs to */
			readonly contentTypeName: Scalars['String'];
			/** The unique identifier stored in the database */
			readonly databaseId: Scalars['Int'];
			/** Post publishing date. */
			readonly date: Maybe<Scalars['Date']>;
			/** The publishing date set in GMT. */
			readonly dateGmt: Maybe<Scalars['Date']>;
			/** Description for the saved GraphQL document */
			readonly description: Maybe<Scalars['String']>;
			/** The desired slug of the post */
			readonly desiredSlug: Maybe<Scalars['String']>;
			/** The RSS enclosure for the object */
			readonly enclosure: Maybe<Scalars['String']>;
			/** Allow, deny or default access grant for specific query */
			readonly grant: Maybe<Scalars['String']>;
			/** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
			readonly guid: Maybe<Scalars['String']>;
			readonly id: Scalars['ID'];
			readonly internal: Internal;
			/** Whether the node is a Content Node */
			readonly isContentNode: Scalars['Boolean'];
			/** Whether the node is a Term */
			readonly isTermNode: Scalars['Boolean'];
			/** The user that most recently edited the node */
			readonly lastEditedBy: Maybe<WpContentNodeToEditLastConnectionEdgeType>;
			/** The permalink of the post */
			readonly link: Maybe<Scalars['String']>;
			/** HTTP Cache-Control max-age directive for a saved GraphQL document */
			readonly maxAgeHeader: Maybe<Scalars['Int']>;
			/** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
			readonly modified: Maybe<Scalars['Date']>;
			/** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
			readonly modifiedGmt: Maybe<Scalars['Date']>;
			readonly nodeType: Maybe<Scalars['String']>;
			readonly parent: Maybe<Node>;
			/** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
			readonly slug: Maybe<Scalars['String']>;
			/** The current status of the object */
			readonly status: Maybe<Scalars['String']>;
			/** The template assigned to the node */
			readonly template: Maybe<WpContentTemplate>;
			/** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
			readonly title: Maybe<Scalars['String']>;
			/** The unique resource identifier path */
			readonly uri: Maybe<Scalars['String']>;
		};

	/** The graphqlDocument type */
	type WpGraphqlDocument_dateArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	/** The graphqlDocument type */
	type WpGraphqlDocument_dateGmtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	/** The graphqlDocument type */
	type WpGraphqlDocument_modifiedArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	/** The graphqlDocument type */
	type WpGraphqlDocument_modifiedGmtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type WpGraphqlDocumentConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpGraphqlDocumentEdge>;
		readonly group: ReadonlyArray<WpGraphqlDocumentGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpGraphqlDocument>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpGraphqlDocumentConnection_distinctArgs = {
		field: WpGraphqlDocumentFieldsEnum;
	};

	type WpGraphqlDocumentConnection_groupArgs = {
		field: WpGraphqlDocumentFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpGraphqlDocumentConnection_maxArgs = {
		field: WpGraphqlDocumentFieldsEnum;
	};

	type WpGraphqlDocumentConnection_minArgs = {
		field: WpGraphqlDocumentFieldsEnum;
	};

	type WpGraphqlDocumentConnection_sumArgs = {
		field: WpGraphqlDocumentFieldsEnum;
	};

	type WpGraphqlDocumentConnectionEdgeType = {
		/** The connected graphqlDocument Node */
		readonly node: WpGraphqlDocument;
	};

	type WpGraphqlDocumentConnectionType = {
		/** A list of connected graphqlDocument Nodes */
		readonly nodes: ReadonlyArray<WpGraphqlDocument>;
	};

	type WpGraphqlDocumentEdge = {
		readonly next: Maybe<WpGraphqlDocument>;
		readonly node: WpGraphqlDocument;
		readonly previous: Maybe<WpGraphqlDocument>;
	};

	type WpGraphqlDocumentFieldsEnum =
		| 'alias'
		| 'children'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'content'
		| 'contentTypeName'
		| 'contentType.node.archivePath'
		| 'contentType.node.canExport'
		| 'contentType.node.children'
		| 'contentType.node.children.children'
		| 'contentType.node.children.id'
		| 'contentType.node.connectedTaxonomies.nodes'
		| 'contentType.node.contentNodes.nodes'
		| 'contentType.node.deleteWithUser'
		| 'contentType.node.description'
		| 'contentType.node.excludeFromSearch'
		| 'contentType.node.graphqlPluralName'
		| 'contentType.node.graphqlSingleName'
		| 'contentType.node.hasArchive'
		| 'contentType.node.hierarchical'
		| 'contentType.node.id'
		| 'contentType.node.internal.content'
		| 'contentType.node.internal.contentDigest'
		| 'contentType.node.internal.contentFilePath'
		| 'contentType.node.internal.description'
		| 'contentType.node.internal.fieldOwners'
		| 'contentType.node.internal.ignoreType'
		| 'contentType.node.internal.mediaType'
		| 'contentType.node.internal.owner'
		| 'contentType.node.internal.type'
		| 'contentType.node.isContentNode'
		| 'contentType.node.isFrontPage'
		| 'contentType.node.isPostsPage'
		| 'contentType.node.isTermNode'
		| 'contentType.node.label'
		| 'contentType.node.labels.addNew'
		| 'contentType.node.labels.addNewItem'
		| 'contentType.node.labels.allItems'
		| 'contentType.node.labels.archives'
		| 'contentType.node.labels.attributes'
		| 'contentType.node.labels.editItem'
		| 'contentType.node.labels.featuredImage'
		| 'contentType.node.labels.filterItemsList'
		| 'contentType.node.labels.insertIntoItem'
		| 'contentType.node.labels.itemsList'
		| 'contentType.node.labels.itemsListNavigation'
		| 'contentType.node.labels.menuName'
		| 'contentType.node.labels.name'
		| 'contentType.node.labels.newItem'
		| 'contentType.node.labels.notFound'
		| 'contentType.node.labels.notFoundInTrash'
		| 'contentType.node.labels.parentItemColon'
		| 'contentType.node.labels.removeFeaturedImage'
		| 'contentType.node.labels.searchItems'
		| 'contentType.node.labels.setFeaturedImage'
		| 'contentType.node.labels.singularName'
		| 'contentType.node.labels.uploadedToThisItem'
		| 'contentType.node.labels.useFeaturedImage'
		| 'contentType.node.labels.viewItem'
		| 'contentType.node.labels.viewItems'
		| 'contentType.node.menuIcon'
		| 'contentType.node.menuPosition'
		| 'contentType.node.name'
		| 'contentType.node.nodeType'
		| 'contentType.node.parent.children'
		| 'contentType.node.parent.id'
		| 'contentType.node.public'
		| 'contentType.node.publiclyQueryable'
		| 'contentType.node.restBase'
		| 'contentType.node.restControllerClass'
		| 'contentType.node.showInAdminBar'
		| 'contentType.node.showInGraphql'
		| 'contentType.node.showInMenu'
		| 'contentType.node.showInNavMenus'
		| 'contentType.node.showInRest'
		| 'contentType.node.showUi'
		| 'contentType.node.uri'
		| 'databaseId'
		| 'date'
		| 'dateGmt'
		| 'description'
		| 'desiredSlug'
		| 'enclosure'
		| 'grant'
		| 'guid'
		| 'id'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'isContentNode'
		| 'isTermNode'
		| 'lastEditedBy.node.avatar.default'
		| 'lastEditedBy.node.avatar.extraAttr'
		| 'lastEditedBy.node.avatar.forceDefault'
		| 'lastEditedBy.node.avatar.foundAvatar'
		| 'lastEditedBy.node.avatar.height'
		| 'lastEditedBy.node.avatar.rating'
		| 'lastEditedBy.node.avatar.scheme'
		| 'lastEditedBy.node.avatar.size'
		| 'lastEditedBy.node.avatar.url'
		| 'lastEditedBy.node.avatar.width'
		| 'lastEditedBy.node.capKey'
		| 'lastEditedBy.node.capabilities'
		| 'lastEditedBy.node.children'
		| 'lastEditedBy.node.children.children'
		| 'lastEditedBy.node.children.id'
		| 'lastEditedBy.node.comments.nodes'
		| 'lastEditedBy.node.databaseId'
		| 'lastEditedBy.node.description'
		| 'lastEditedBy.node.email'
		| 'lastEditedBy.node.extraCapabilities'
		| 'lastEditedBy.node.firstName'
		| 'lastEditedBy.node.id'
		| 'lastEditedBy.node.internal.content'
		| 'lastEditedBy.node.internal.contentDigest'
		| 'lastEditedBy.node.internal.contentFilePath'
		| 'lastEditedBy.node.internal.description'
		| 'lastEditedBy.node.internal.fieldOwners'
		| 'lastEditedBy.node.internal.ignoreType'
		| 'lastEditedBy.node.internal.mediaType'
		| 'lastEditedBy.node.internal.owner'
		| 'lastEditedBy.node.internal.type'
		| 'lastEditedBy.node.isContentNode'
		| 'lastEditedBy.node.isTermNode'
		| 'lastEditedBy.node.lastName'
		| 'lastEditedBy.node.locale'
		| 'lastEditedBy.node.name'
		| 'lastEditedBy.node.nicename'
		| 'lastEditedBy.node.nickname'
		| 'lastEditedBy.node.nodeType'
		| 'lastEditedBy.node.pages.nodes'
		| 'lastEditedBy.node.parent.children'
		| 'lastEditedBy.node.parent.id'
		| 'lastEditedBy.node.posts.nodes'
		| 'lastEditedBy.node.registeredDate'
		| 'lastEditedBy.node.roles.nodes'
		| 'lastEditedBy.node.slug'
		| 'lastEditedBy.node.uri'
		| 'lastEditedBy.node.url'
		| 'lastEditedBy.node.username'
		| 'link'
		| 'maxAgeHeader'
		| 'modified'
		| 'modifiedGmt'
		| 'nodeType'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id'
		| 'slug'
		| 'status'
		| 'template.templateName'
		| 'title'
		| 'uri';

	type WpGraphqlDocumentFilterInput = {
		readonly alias: InputMaybe<StringQueryOperatorInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly content: InputMaybe<StringQueryOperatorInput>;
		readonly contentType: InputMaybe<WpContentNodeToContentTypeConnectionEdgeTypeFilterInput>;
		readonly contentTypeName: InputMaybe<StringQueryOperatorInput>;
		readonly databaseId: InputMaybe<IntQueryOperatorInput>;
		readonly date: InputMaybe<DateQueryOperatorInput>;
		readonly dateGmt: InputMaybe<DateQueryOperatorInput>;
		readonly description: InputMaybe<StringQueryOperatorInput>;
		readonly desiredSlug: InputMaybe<StringQueryOperatorInput>;
		readonly enclosure: InputMaybe<StringQueryOperatorInput>;
		readonly grant: InputMaybe<StringQueryOperatorInput>;
		readonly guid: InputMaybe<StringQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly isContentNode: InputMaybe<BooleanQueryOperatorInput>;
		readonly isTermNode: InputMaybe<BooleanQueryOperatorInput>;
		readonly lastEditedBy: InputMaybe<WpContentNodeToEditLastConnectionEdgeTypeFilterInput>;
		readonly link: InputMaybe<StringQueryOperatorInput>;
		readonly maxAgeHeader: InputMaybe<IntQueryOperatorInput>;
		readonly modified: InputMaybe<DateQueryOperatorInput>;
		readonly modifiedGmt: InputMaybe<DateQueryOperatorInput>;
		readonly nodeType: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly slug: InputMaybe<StringQueryOperatorInput>;
		readonly status: InputMaybe<StringQueryOperatorInput>;
		readonly template: InputMaybe<WpContentTemplateFilterInput>;
		readonly title: InputMaybe<StringQueryOperatorInput>;
		readonly uri: InputMaybe<StringQueryOperatorInput>;
	};

	type WpGraphqlDocumentGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpGraphqlDocumentEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<WpGraphqlDocumentGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpGraphqlDocument>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpGraphqlDocumentGroupConnection_distinctArgs = {
		field: WpGraphqlDocumentFieldsEnum;
	};

	type WpGraphqlDocumentGroupConnection_groupArgs = {
		field: WpGraphqlDocumentFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpGraphqlDocumentGroupConnection_maxArgs = {
		field: WpGraphqlDocumentFieldsEnum;
	};

	type WpGraphqlDocumentGroupConnection_minArgs = {
		field: WpGraphqlDocumentFieldsEnum;
	};

	type WpGraphqlDocumentGroupConnection_sumArgs = {
		field: WpGraphqlDocumentFieldsEnum;
	};

	type WpGraphqlDocumentSortInput = {
		readonly fields: InputMaybe<
			ReadonlyArray<InputMaybe<WpGraphqlDocumentFieldsEnum>>
		>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	type WpGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<WpGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<Wp>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpGroupConnection_distinctArgs = {
		field: WpFieldsEnum;
	};

	type WpGroupConnection_groupArgs = {
		field: WpFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpGroupConnection_maxArgs = {
		field: WpFieldsEnum;
	};

	type WpGroupConnection_minArgs = {
		field: WpFieldsEnum;
	};

	type WpGroupConnection_sumArgs = {
		field: WpFieldsEnum;
	};

	type WpHierarchicalContentNode = {
		/** Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */
		readonly ancestors: Maybe<WpHierarchicalContentNodeToContentNodeAncestorsConnectionType>;
		readonly children: ReadonlyArray<Node>;
		/** Connection between the ContentNode type and the ContentType type */
		readonly contentType: Maybe<WpContentNodeToContentTypeConnectionEdgeType>;
		/** The name of the Content Type the node belongs to */
		readonly contentTypeName: Scalars['String'];
		/** The unique identifier stored in the database */
		readonly databaseId: Scalars['Int'];
		/** Post publishing date. */
		readonly date: Maybe<Scalars['Date']>;
		/** The publishing date set in GMT. */
		readonly dateGmt: Maybe<Scalars['Date']>;
		/** The desired slug of the post */
		readonly desiredSlug: Maybe<Scalars['String']>;
		/** The RSS enclosure for the object */
		readonly enclosure: Maybe<Scalars['String']>;
		/** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
		readonly guid: Maybe<Scalars['String']>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		/** Whether the node is a Content Node */
		readonly isContentNode: Scalars['Boolean'];
		/** Whether the node is a Term */
		readonly isTermNode: Scalars['Boolean'];
		/** The user that most recently edited the node */
		readonly lastEditedBy: Maybe<WpContentNodeToEditLastConnectionEdgeType>;
		/** The permalink of the post */
		readonly link: Maybe<Scalars['String']>;
		/** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
		readonly modified: Maybe<Scalars['Date']>;
		/** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
		readonly modifiedGmt: Maybe<Scalars['Date']>;
		readonly nodeType: Maybe<Scalars['String']>;
		readonly parent: Maybe<Node>;
		/** Database id of the parent node */
		readonly parentDatabaseId: Maybe<Scalars['Int']>;
		/** The globally unique identifier of the parent node. */
		readonly parentId: Maybe<Scalars['ID']>;
		/** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
		readonly slug: Maybe<Scalars['String']>;
		/** The current status of the object */
		readonly status: Maybe<Scalars['String']>;
		/** The template assigned to a node of content */
		readonly template: Maybe<WpContentTemplate>;
		/** The unique resource identifier path */
		readonly uri: Maybe<Scalars['String']>;
		/** Connection between the HierarchicalContentNode type and the ContentNode type */
		readonly wpChildren: Maybe<WpHierarchicalContentNodeToContentNodeChildrenConnectionType>;
		/** The parent of the node. The parent object can be of various types */
		readonly wpParent: Maybe<WpHierarchicalContentNodeToParentContentNodeConnectionEdgeType>;
	};

	type WpHierarchicalContentNode_dateArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type WpHierarchicalContentNode_dateGmtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type WpHierarchicalContentNode_modifiedArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type WpHierarchicalContentNode_modifiedGmtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type WpHierarchicalContentNodeConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpHierarchicalContentNodeEdge>;
		readonly group: ReadonlyArray<WpHierarchicalContentNodeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpHierarchicalContentNode>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpHierarchicalContentNodeConnection_distinctArgs = {
		field: WpHierarchicalContentNodeFieldsEnum;
	};

	type WpHierarchicalContentNodeConnection_groupArgs = {
		field: WpHierarchicalContentNodeFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpHierarchicalContentNodeConnection_maxArgs = {
		field: WpHierarchicalContentNodeFieldsEnum;
	};

	type WpHierarchicalContentNodeConnection_minArgs = {
		field: WpHierarchicalContentNodeFieldsEnum;
	};

	type WpHierarchicalContentNodeConnection_sumArgs = {
		field: WpHierarchicalContentNodeFieldsEnum;
	};

	type WpHierarchicalContentNodeEdge = {
		readonly next: Maybe<WpHierarchicalContentNode>;
		readonly node: WpHierarchicalContentNode;
		readonly previous: Maybe<WpHierarchicalContentNode>;
	};

	type WpHierarchicalContentNodeFieldsEnum =
		| 'ancestors.nodes'
		| 'ancestors.nodes.children'
		| 'ancestors.nodes.children.children'
		| 'ancestors.nodes.children.id'
		| 'ancestors.nodes.contentTypeName'
		| 'ancestors.nodes.databaseId'
		| 'ancestors.nodes.date'
		| 'ancestors.nodes.dateGmt'
		| 'ancestors.nodes.desiredSlug'
		| 'ancestors.nodes.enclosure'
		| 'ancestors.nodes.guid'
		| 'ancestors.nodes.id'
		| 'ancestors.nodes.internal.content'
		| 'ancestors.nodes.internal.contentDigest'
		| 'ancestors.nodes.internal.contentFilePath'
		| 'ancestors.nodes.internal.description'
		| 'ancestors.nodes.internal.fieldOwners'
		| 'ancestors.nodes.internal.ignoreType'
		| 'ancestors.nodes.internal.mediaType'
		| 'ancestors.nodes.internal.owner'
		| 'ancestors.nodes.internal.type'
		| 'ancestors.nodes.isContentNode'
		| 'ancestors.nodes.isTermNode'
		| 'ancestors.nodes.link'
		| 'ancestors.nodes.modified'
		| 'ancestors.nodes.modifiedGmt'
		| 'ancestors.nodes.nodeType'
		| 'ancestors.nodes.parent.children'
		| 'ancestors.nodes.parent.id'
		| 'ancestors.nodes.slug'
		| 'ancestors.nodes.status'
		| 'ancestors.nodes.template.templateName'
		| 'ancestors.nodes.uri'
		| 'children'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'contentTypeName'
		| 'contentType.node.archivePath'
		| 'contentType.node.canExport'
		| 'contentType.node.children'
		| 'contentType.node.children.children'
		| 'contentType.node.children.id'
		| 'contentType.node.connectedTaxonomies.nodes'
		| 'contentType.node.contentNodes.nodes'
		| 'contentType.node.deleteWithUser'
		| 'contentType.node.description'
		| 'contentType.node.excludeFromSearch'
		| 'contentType.node.graphqlPluralName'
		| 'contentType.node.graphqlSingleName'
		| 'contentType.node.hasArchive'
		| 'contentType.node.hierarchical'
		| 'contentType.node.id'
		| 'contentType.node.internal.content'
		| 'contentType.node.internal.contentDigest'
		| 'contentType.node.internal.contentFilePath'
		| 'contentType.node.internal.description'
		| 'contentType.node.internal.fieldOwners'
		| 'contentType.node.internal.ignoreType'
		| 'contentType.node.internal.mediaType'
		| 'contentType.node.internal.owner'
		| 'contentType.node.internal.type'
		| 'contentType.node.isContentNode'
		| 'contentType.node.isFrontPage'
		| 'contentType.node.isPostsPage'
		| 'contentType.node.isTermNode'
		| 'contentType.node.label'
		| 'contentType.node.labels.addNew'
		| 'contentType.node.labels.addNewItem'
		| 'contentType.node.labels.allItems'
		| 'contentType.node.labels.archives'
		| 'contentType.node.labels.attributes'
		| 'contentType.node.labels.editItem'
		| 'contentType.node.labels.featuredImage'
		| 'contentType.node.labels.filterItemsList'
		| 'contentType.node.labels.insertIntoItem'
		| 'contentType.node.labels.itemsList'
		| 'contentType.node.labels.itemsListNavigation'
		| 'contentType.node.labels.menuName'
		| 'contentType.node.labels.name'
		| 'contentType.node.labels.newItem'
		| 'contentType.node.labels.notFound'
		| 'contentType.node.labels.notFoundInTrash'
		| 'contentType.node.labels.parentItemColon'
		| 'contentType.node.labels.removeFeaturedImage'
		| 'contentType.node.labels.searchItems'
		| 'contentType.node.labels.setFeaturedImage'
		| 'contentType.node.labels.singularName'
		| 'contentType.node.labels.uploadedToThisItem'
		| 'contentType.node.labels.useFeaturedImage'
		| 'contentType.node.labels.viewItem'
		| 'contentType.node.labels.viewItems'
		| 'contentType.node.menuIcon'
		| 'contentType.node.menuPosition'
		| 'contentType.node.name'
		| 'contentType.node.nodeType'
		| 'contentType.node.parent.children'
		| 'contentType.node.parent.id'
		| 'contentType.node.public'
		| 'contentType.node.publiclyQueryable'
		| 'contentType.node.restBase'
		| 'contentType.node.restControllerClass'
		| 'contentType.node.showInAdminBar'
		| 'contentType.node.showInGraphql'
		| 'contentType.node.showInMenu'
		| 'contentType.node.showInNavMenus'
		| 'contentType.node.showInRest'
		| 'contentType.node.showUi'
		| 'contentType.node.uri'
		| 'databaseId'
		| 'date'
		| 'dateGmt'
		| 'desiredSlug'
		| 'enclosure'
		| 'guid'
		| 'id'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'isContentNode'
		| 'isTermNode'
		| 'lastEditedBy.node.avatar.default'
		| 'lastEditedBy.node.avatar.extraAttr'
		| 'lastEditedBy.node.avatar.forceDefault'
		| 'lastEditedBy.node.avatar.foundAvatar'
		| 'lastEditedBy.node.avatar.height'
		| 'lastEditedBy.node.avatar.rating'
		| 'lastEditedBy.node.avatar.scheme'
		| 'lastEditedBy.node.avatar.size'
		| 'lastEditedBy.node.avatar.url'
		| 'lastEditedBy.node.avatar.width'
		| 'lastEditedBy.node.capKey'
		| 'lastEditedBy.node.capabilities'
		| 'lastEditedBy.node.children'
		| 'lastEditedBy.node.children.children'
		| 'lastEditedBy.node.children.id'
		| 'lastEditedBy.node.comments.nodes'
		| 'lastEditedBy.node.databaseId'
		| 'lastEditedBy.node.description'
		| 'lastEditedBy.node.email'
		| 'lastEditedBy.node.extraCapabilities'
		| 'lastEditedBy.node.firstName'
		| 'lastEditedBy.node.id'
		| 'lastEditedBy.node.internal.content'
		| 'lastEditedBy.node.internal.contentDigest'
		| 'lastEditedBy.node.internal.contentFilePath'
		| 'lastEditedBy.node.internal.description'
		| 'lastEditedBy.node.internal.fieldOwners'
		| 'lastEditedBy.node.internal.ignoreType'
		| 'lastEditedBy.node.internal.mediaType'
		| 'lastEditedBy.node.internal.owner'
		| 'lastEditedBy.node.internal.type'
		| 'lastEditedBy.node.isContentNode'
		| 'lastEditedBy.node.isTermNode'
		| 'lastEditedBy.node.lastName'
		| 'lastEditedBy.node.locale'
		| 'lastEditedBy.node.name'
		| 'lastEditedBy.node.nicename'
		| 'lastEditedBy.node.nickname'
		| 'lastEditedBy.node.nodeType'
		| 'lastEditedBy.node.pages.nodes'
		| 'lastEditedBy.node.parent.children'
		| 'lastEditedBy.node.parent.id'
		| 'lastEditedBy.node.posts.nodes'
		| 'lastEditedBy.node.registeredDate'
		| 'lastEditedBy.node.roles.nodes'
		| 'lastEditedBy.node.slug'
		| 'lastEditedBy.node.uri'
		| 'lastEditedBy.node.url'
		| 'lastEditedBy.node.username'
		| 'link'
		| 'modified'
		| 'modifiedGmt'
		| 'nodeType'
		| 'parentDatabaseId'
		| 'parentId'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id'
		| 'slug'
		| 'status'
		| 'template.templateName'
		| 'uri'
		| 'wpChildren.nodes'
		| 'wpChildren.nodes.children'
		| 'wpChildren.nodes.children.children'
		| 'wpChildren.nodes.children.id'
		| 'wpChildren.nodes.contentTypeName'
		| 'wpChildren.nodes.databaseId'
		| 'wpChildren.nodes.date'
		| 'wpChildren.nodes.dateGmt'
		| 'wpChildren.nodes.desiredSlug'
		| 'wpChildren.nodes.enclosure'
		| 'wpChildren.nodes.guid'
		| 'wpChildren.nodes.id'
		| 'wpChildren.nodes.internal.content'
		| 'wpChildren.nodes.internal.contentDigest'
		| 'wpChildren.nodes.internal.contentFilePath'
		| 'wpChildren.nodes.internal.description'
		| 'wpChildren.nodes.internal.fieldOwners'
		| 'wpChildren.nodes.internal.ignoreType'
		| 'wpChildren.nodes.internal.mediaType'
		| 'wpChildren.nodes.internal.owner'
		| 'wpChildren.nodes.internal.type'
		| 'wpChildren.nodes.isContentNode'
		| 'wpChildren.nodes.isTermNode'
		| 'wpChildren.nodes.link'
		| 'wpChildren.nodes.modified'
		| 'wpChildren.nodes.modifiedGmt'
		| 'wpChildren.nodes.nodeType'
		| 'wpChildren.nodes.parent.children'
		| 'wpChildren.nodes.parent.id'
		| 'wpChildren.nodes.slug'
		| 'wpChildren.nodes.status'
		| 'wpChildren.nodes.template.templateName'
		| 'wpChildren.nodes.uri'
		| 'wpParent.node.children'
		| 'wpParent.node.children.children'
		| 'wpParent.node.children.id'
		| 'wpParent.node.contentTypeName'
		| 'wpParent.node.databaseId'
		| 'wpParent.node.date'
		| 'wpParent.node.dateGmt'
		| 'wpParent.node.desiredSlug'
		| 'wpParent.node.enclosure'
		| 'wpParent.node.guid'
		| 'wpParent.node.id'
		| 'wpParent.node.internal.content'
		| 'wpParent.node.internal.contentDigest'
		| 'wpParent.node.internal.contentFilePath'
		| 'wpParent.node.internal.description'
		| 'wpParent.node.internal.fieldOwners'
		| 'wpParent.node.internal.ignoreType'
		| 'wpParent.node.internal.mediaType'
		| 'wpParent.node.internal.owner'
		| 'wpParent.node.internal.type'
		| 'wpParent.node.isContentNode'
		| 'wpParent.node.isTermNode'
		| 'wpParent.node.link'
		| 'wpParent.node.modified'
		| 'wpParent.node.modifiedGmt'
		| 'wpParent.node.nodeType'
		| 'wpParent.node.parent.children'
		| 'wpParent.node.parent.id'
		| 'wpParent.node.slug'
		| 'wpParent.node.status'
		| 'wpParent.node.template.templateName'
		| 'wpParent.node.uri';

	type WpHierarchicalContentNodeFilterInput = {
		readonly ancestors: InputMaybe<WpHierarchicalContentNodeToContentNodeAncestorsConnectionTypeFilterInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly contentType: InputMaybe<WpContentNodeToContentTypeConnectionEdgeTypeFilterInput>;
		readonly contentTypeName: InputMaybe<StringQueryOperatorInput>;
		readonly databaseId: InputMaybe<IntQueryOperatorInput>;
		readonly date: InputMaybe<DateQueryOperatorInput>;
		readonly dateGmt: InputMaybe<DateQueryOperatorInput>;
		readonly desiredSlug: InputMaybe<StringQueryOperatorInput>;
		readonly enclosure: InputMaybe<StringQueryOperatorInput>;
		readonly guid: InputMaybe<StringQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly isContentNode: InputMaybe<BooleanQueryOperatorInput>;
		readonly isTermNode: InputMaybe<BooleanQueryOperatorInput>;
		readonly lastEditedBy: InputMaybe<WpContentNodeToEditLastConnectionEdgeTypeFilterInput>;
		readonly link: InputMaybe<StringQueryOperatorInput>;
		readonly modified: InputMaybe<DateQueryOperatorInput>;
		readonly modifiedGmt: InputMaybe<DateQueryOperatorInput>;
		readonly nodeType: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly parentDatabaseId: InputMaybe<IntQueryOperatorInput>;
		readonly parentId: InputMaybe<IDQueryOperatorInput>;
		readonly slug: InputMaybe<StringQueryOperatorInput>;
		readonly status: InputMaybe<StringQueryOperatorInput>;
		readonly template: InputMaybe<WpContentTemplateFilterInput>;
		readonly uri: InputMaybe<StringQueryOperatorInput>;
		readonly wpChildren: InputMaybe<WpHierarchicalContentNodeToContentNodeChildrenConnectionTypeFilterInput>;
		readonly wpParent: InputMaybe<WpHierarchicalContentNodeToParentContentNodeConnectionEdgeTypeFilterInput>;
	};

	type WpHierarchicalContentNodeGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpHierarchicalContentNodeEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<WpHierarchicalContentNodeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpHierarchicalContentNode>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpHierarchicalContentNodeGroupConnection_distinctArgs = {
		field: WpHierarchicalContentNodeFieldsEnum;
	};

	type WpHierarchicalContentNodeGroupConnection_groupArgs = {
		field: WpHierarchicalContentNodeFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpHierarchicalContentNodeGroupConnection_maxArgs = {
		field: WpHierarchicalContentNodeFieldsEnum;
	};

	type WpHierarchicalContentNodeGroupConnection_minArgs = {
		field: WpHierarchicalContentNodeFieldsEnum;
	};

	type WpHierarchicalContentNodeGroupConnection_sumArgs = {
		field: WpHierarchicalContentNodeFieldsEnum;
	};

	type WpHierarchicalContentNodeSortInput = {
		readonly fields: InputMaybe<
			ReadonlyArray<InputMaybe<WpHierarchicalContentNodeFieldsEnum>>
		>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	/** Connection between the HierarchicalContentNode type and the ContentNode type */
	type WpHierarchicalContentNodeToContentNodeAncestorsConnectionType =
		WpConnectionType &
			WpContentNodeConnectionType & {
				/** The nodes of the connection, without the edges */
				readonly nodes: ReadonlyArray<WpContentNode>;
			};

	type WpHierarchicalContentNodeToContentNodeAncestorsConnectionTypeFilterInput =
		{
			readonly nodes: InputMaybe<WpContentNodeFilterListInput>;
		};

	/** Connection between the HierarchicalContentNode type and the ContentNode type */
	type WpHierarchicalContentNodeToContentNodeChildrenConnectionType =
		WpConnectionType &
			WpContentNodeConnectionType & {
				/** The nodes of the connection, without the edges */
				readonly nodes: ReadonlyArray<WpContentNode>;
			};

	type WpHierarchicalContentNodeToContentNodeChildrenConnectionTypeFilterInput =
		{
			readonly nodes: InputMaybe<WpContentNodeFilterListInput>;
		};

	/** Connection between the HierarchicalContentNode type and the ContentNode type */
	type WpHierarchicalContentNodeToParentContentNodeConnectionEdgeType =
		WpContentNodeConnectionEdgeType &
			WpEdgeType &
			WpOneToOneConnectionType & {
				/** The node of the connection, without the edges */
				readonly node: WpContentNode;
			};

	type WpHierarchicalContentNodeToParentContentNodeConnectionEdgeTypeFilterInput =
		{
			readonly node: InputMaybe<WpContentNodeFilterInput>;
		};

	type WpHierarchicalNode = {
		readonly children: ReadonlyArray<Node>;
		/** The unique identifier stored in the database */
		readonly databaseId: Scalars['Int'];
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly nodeType: Maybe<Scalars['String']>;
		readonly parent: Maybe<Node>;
		/** Database id of the parent node */
		readonly parentDatabaseId: Maybe<Scalars['Int']>;
		/** The globally unique identifier of the parent node. */
		readonly parentId: Maybe<Scalars['ID']>;
	};

	type WpHierarchicalNodeConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpHierarchicalNodeEdge>;
		readonly group: ReadonlyArray<WpHierarchicalNodeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpHierarchicalNode>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpHierarchicalNodeConnection_distinctArgs = {
		field: WpHierarchicalNodeFieldsEnum;
	};

	type WpHierarchicalNodeConnection_groupArgs = {
		field: WpHierarchicalNodeFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpHierarchicalNodeConnection_maxArgs = {
		field: WpHierarchicalNodeFieldsEnum;
	};

	type WpHierarchicalNodeConnection_minArgs = {
		field: WpHierarchicalNodeFieldsEnum;
	};

	type WpHierarchicalNodeConnection_sumArgs = {
		field: WpHierarchicalNodeFieldsEnum;
	};

	type WpHierarchicalNodeEdge = {
		readonly next: Maybe<WpHierarchicalNode>;
		readonly node: WpHierarchicalNode;
		readonly previous: Maybe<WpHierarchicalNode>;
	};

	type WpHierarchicalNodeFieldsEnum =
		| 'children'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'databaseId'
		| 'id'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'nodeType'
		| 'parentDatabaseId'
		| 'parentId'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id';

	type WpHierarchicalNodeFilterInput = {
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly databaseId: InputMaybe<IntQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly nodeType: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly parentDatabaseId: InputMaybe<IntQueryOperatorInput>;
		readonly parentId: InputMaybe<IDQueryOperatorInput>;
	};

	type WpHierarchicalNodeGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpHierarchicalNodeEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<WpHierarchicalNodeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpHierarchicalNode>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpHierarchicalNodeGroupConnection_distinctArgs = {
		field: WpHierarchicalNodeFieldsEnum;
	};

	type WpHierarchicalNodeGroupConnection_groupArgs = {
		field: WpHierarchicalNodeFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpHierarchicalNodeGroupConnection_maxArgs = {
		field: WpHierarchicalNodeFieldsEnum;
	};

	type WpHierarchicalNodeGroupConnection_minArgs = {
		field: WpHierarchicalNodeFieldsEnum;
	};

	type WpHierarchicalNodeGroupConnection_sumArgs = {
		field: WpHierarchicalNodeFieldsEnum;
	};

	type WpHierarchicalNodeSortInput = {
		readonly fields: InputMaybe<
			ReadonlyArray<InputMaybe<WpHierarchicalNodeFieldsEnum>>
		>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	type WpHierarchicalTermNode = {
		readonly children: ReadonlyArray<Node>;
		/** The number of objects connected to the object */
		readonly count: Maybe<Scalars['Int']>;
		/** The unique identifier stored in the database */
		readonly databaseId: Scalars['Int'];
		/** The description of the object */
		readonly description: Maybe<Scalars['String']>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		/** Whether the node is a Content Node */
		readonly isContentNode: Scalars['Boolean'];
		/** Whether the node is a Term */
		readonly isTermNode: Scalars['Boolean'];
		/** The link to the term */
		readonly link: Maybe<Scalars['String']>;
		/** The human friendly name of the object. */
		readonly name: Maybe<Scalars['String']>;
		readonly nodeType: Maybe<Scalars['String']>;
		readonly parent: Maybe<Node>;
		/** Database id of the parent node */
		readonly parentDatabaseId: Maybe<Scalars['Int']>;
		/** The globally unique identifier of the parent node. */
		readonly parentId: Maybe<Scalars['ID']>;
		/** An alphanumeric identifier for the object unique to its type. */
		readonly slug: Maybe<Scalars['String']>;
		/** The name of the taxonomy that the object is associated with */
		readonly taxonomyName: Maybe<Scalars['String']>;
		/** The ID of the term group that this term object belongs to */
		readonly termGroupId: Maybe<Scalars['Int']>;
		/** The taxonomy ID that the object is associated with */
		readonly termTaxonomyId: Maybe<Scalars['Int']>;
		/** The unique resource identifier path */
		readonly uri: Maybe<Scalars['String']>;
	};

	type WpHierarchicalTermNodeConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpHierarchicalTermNodeEdge>;
		readonly group: ReadonlyArray<WpHierarchicalTermNodeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpHierarchicalTermNode>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpHierarchicalTermNodeConnection_distinctArgs = {
		field: WpHierarchicalTermNodeFieldsEnum;
	};

	type WpHierarchicalTermNodeConnection_groupArgs = {
		field: WpHierarchicalTermNodeFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpHierarchicalTermNodeConnection_maxArgs = {
		field: WpHierarchicalTermNodeFieldsEnum;
	};

	type WpHierarchicalTermNodeConnection_minArgs = {
		field: WpHierarchicalTermNodeFieldsEnum;
	};

	type WpHierarchicalTermNodeConnection_sumArgs = {
		field: WpHierarchicalTermNodeFieldsEnum;
	};

	type WpHierarchicalTermNodeEdge = {
		readonly next: Maybe<WpHierarchicalTermNode>;
		readonly node: WpHierarchicalTermNode;
		readonly previous: Maybe<WpHierarchicalTermNode>;
	};

	type WpHierarchicalTermNodeFieldsEnum =
		| 'children'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'count'
		| 'databaseId'
		| 'description'
		| 'id'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'isContentNode'
		| 'isTermNode'
		| 'link'
		| 'name'
		| 'nodeType'
		| 'parentDatabaseId'
		| 'parentId'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id'
		| 'slug'
		| 'taxonomyName'
		| 'termGroupId'
		| 'termTaxonomyId'
		| 'uri';

	type WpHierarchicalTermNodeFilterInput = {
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly count: InputMaybe<IntQueryOperatorInput>;
		readonly databaseId: InputMaybe<IntQueryOperatorInput>;
		readonly description: InputMaybe<StringQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly isContentNode: InputMaybe<BooleanQueryOperatorInput>;
		readonly isTermNode: InputMaybe<BooleanQueryOperatorInput>;
		readonly link: InputMaybe<StringQueryOperatorInput>;
		readonly name: InputMaybe<StringQueryOperatorInput>;
		readonly nodeType: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly parentDatabaseId: InputMaybe<IntQueryOperatorInput>;
		readonly parentId: InputMaybe<IDQueryOperatorInput>;
		readonly slug: InputMaybe<StringQueryOperatorInput>;
		readonly taxonomyName: InputMaybe<StringQueryOperatorInput>;
		readonly termGroupId: InputMaybe<IntQueryOperatorInput>;
		readonly termTaxonomyId: InputMaybe<IntQueryOperatorInput>;
		readonly uri: InputMaybe<StringQueryOperatorInput>;
	};

	type WpHierarchicalTermNodeGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpHierarchicalTermNodeEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<WpHierarchicalTermNodeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpHierarchicalTermNode>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpHierarchicalTermNodeGroupConnection_distinctArgs = {
		field: WpHierarchicalTermNodeFieldsEnum;
	};

	type WpHierarchicalTermNodeGroupConnection_groupArgs = {
		field: WpHierarchicalTermNodeFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpHierarchicalTermNodeGroupConnection_maxArgs = {
		field: WpHierarchicalTermNodeFieldsEnum;
	};

	type WpHierarchicalTermNodeGroupConnection_minArgs = {
		field: WpHierarchicalTermNodeFieldsEnum;
	};

	type WpHierarchicalTermNodeGroupConnection_sumArgs = {
		field: WpHierarchicalTermNodeFieldsEnum;
	};

	type WpHierarchicalTermNodeSortInput = {
		readonly fields: InputMaybe<
			ReadonlyArray<InputMaybe<WpHierarchicalTermNodeFieldsEnum>>
		>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	/** File details for a Media Item */
	type WpMediaDetails = {
		/** The filename of the mediaItem */
		readonly file: Maybe<Scalars['String']>;
		/** The height of the mediaItem */
		readonly height: Maybe<Scalars['Int']>;
		/** Meta information associated with the mediaItem */
		readonly meta: Maybe<WpMediaItemMeta>;
		/** The available sizes of the mediaItem */
		readonly sizes: Maybe<ReadonlyArray<Maybe<WpMediaSize>>>;
		/** The width of the mediaItem */
		readonly width: Maybe<Scalars['Int']>;
	};

	type WpMediaDetailsFilterInput = {
		readonly file: InputMaybe<StringQueryOperatorInput>;
		readonly height: InputMaybe<IntQueryOperatorInput>;
		readonly meta: InputMaybe<WpMediaItemMetaFilterInput>;
		readonly sizes: InputMaybe<WpMediaSizeFilterListInput>;
		readonly width: InputMaybe<IntQueryOperatorInput>;
	};

	/** The mediaItem type */
	type WpMediaItem = Node &
		RemoteFile &
		WpContentNode &
		WpDatabaseIdentifier &
		WpHierarchicalContentNode &
		WpHierarchicalNode &
		WpNode &
		WpNodeWithAuthor &
		WpNodeWithComments &
		WpNodeWithTemplate &
		WpNodeWithTitle &
		WpUniformResourceIdentifiable & {
			/** Alternative text to display when resource is not displayed */
			readonly altText: Maybe<Scalars['String']>;
			/** Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */
			readonly ancestors: Maybe<WpHierarchicalContentNodeToContentNodeAncestorsConnectionType>;
			/** Connection between the NodeWithAuthor type and the User type */
			readonly author: Maybe<WpNodeWithAuthorToUserConnectionEdgeType>;
			/** The database identifier of the author of the node */
			readonly authorDatabaseId: Maybe<Scalars['Int']>;
			/** The globally unique identifier of the author of the node */
			readonly authorId: Maybe<Scalars['ID']>;
			/** The caption for the resource */
			readonly caption: Maybe<Scalars['String']>;
			readonly children: ReadonlyArray<Node>;
			/** The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility. */
			readonly commentCount: Maybe<Scalars['Int']>;
			/** Whether the comments are open or closed for this particular post. */
			readonly commentStatus: Maybe<Scalars['String']>;
			/** Connection between the MediaItem type and the Comment type */
			readonly comments: Maybe<WpMediaItemToCommentConnectionType>;
			/** Connection between the ContentNode type and the ContentType type */
			readonly contentType: Maybe<WpContentNodeToContentTypeConnectionEdgeType>;
			/** The name of the Content Type the node belongs to */
			readonly contentTypeName: Scalars['String'];
			/** The unique identifier stored in the database */
			readonly databaseId: Scalars['Int'];
			/** Post publishing date. */
			readonly date: Maybe<Scalars['Date']>;
			/** The publishing date set in GMT. */
			readonly dateGmt: Maybe<Scalars['Date']>;
			/** Description of the image (stored as post_content) */
			readonly description: Maybe<Scalars['String']>;
			/** The desired slug of the post */
			readonly desiredSlug: Maybe<Scalars['String']>;
			/** The RSS enclosure for the object */
			readonly enclosure: Maybe<Scalars['String']>;
			/** The filesize in bytes of the resource */
			readonly fileSize: Maybe<Scalars['Int']>;
			readonly filename: Scalars['String'];
			readonly filesize: Maybe<Scalars['Int']>;
			/** Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info. */
			readonly gatsbyImage: Maybe<Scalars['GatsbyImageData']>;
			/** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
			readonly guid: Maybe<Scalars['String']>;
			readonly height: Maybe<Scalars['Int']>;
			readonly id: Scalars['ID'];
			readonly internal: Internal;
			/** Whether the node is a Content Node */
			readonly isContentNode: Scalars['Boolean'];
			/** Whether the node is a Term */
			readonly isTermNode: Scalars['Boolean'];
			/** The user that most recently edited the node */
			readonly lastEditedBy: Maybe<WpContentNodeToEditLastConnectionEdgeType>;
			/** The permalink of the post */
			readonly link: Maybe<Scalars['String']>;
			readonly localFile: Maybe<File>;
			/** Details about the mediaItem */
			readonly mediaDetails: Maybe<WpMediaDetails>;
			/** Url of the mediaItem */
			readonly mediaItemUrl: Maybe<Scalars['String']>;
			/** Type of resource */
			readonly mediaType: Maybe<Scalars['String']>;
			readonly mimeType: Scalars['String'];
			/** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
			readonly modified: Maybe<Scalars['Date']>;
			/** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
			readonly modifiedGmt: Maybe<Scalars['Date']>;
			readonly nodeType: Maybe<Scalars['String']>;
			readonly parent: Maybe<Node>;
			/** Database id of the parent node */
			readonly parentDatabaseId: Maybe<Scalars['Int']>;
			/** The globally unique identifier of the parent node. */
			readonly parentId: Maybe<Scalars['ID']>;
			readonly publicUrl: Scalars['String'];
			readonly resize: Maybe<RemoteFileResize>;
			/** The sizes attribute value for an image. */
			readonly sizes: Maybe<Scalars['String']>;
			/** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
			readonly slug: Maybe<Scalars['String']>;
			/** Url of the mediaItem */
			readonly sourceUrl: Maybe<Scalars['String']>;
			/** The srcset attribute specifies the URL of the image to use in different situations. It is a comma separated string of urls and their widths. */
			readonly srcSet: Maybe<Scalars['String']>;
			/** The current status of the object */
			readonly status: Maybe<Scalars['String']>;
			/** The template assigned to a node of content */
			readonly template: Maybe<WpContentTemplate>;
			/** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
			readonly title: Maybe<Scalars['String']>;
			/** The unique resource identifier path */
			readonly uri: Maybe<Scalars['String']>;
			readonly width: Maybe<Scalars['Int']>;
			/** Connection between the HierarchicalContentNode type and the ContentNode type */
			readonly wpChildren: Maybe<WpHierarchicalContentNodeToContentNodeChildrenConnectionType>;
			/** The parent of the node. The parent object can be of various types */
			readonly wpParent: Maybe<WpHierarchicalContentNodeToParentContentNodeConnectionEdgeType>;
		};

	/** The mediaItem type */
	type WpMediaItem_dateArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	/** The mediaItem type */
	type WpMediaItem_dateGmtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	/** The mediaItem type */
	type WpMediaItem_gatsbyImageArgs = {
		aspectRatio: InputMaybe<Scalars['Float']>;
		backgroundColor: InputMaybe<Scalars['String']>;
		breakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
		cropFocus: InputMaybe<ReadonlyArray<InputMaybe<RemoteFileCropFocus>>>;
		fit?: InputMaybe<RemoteFileFit>;
		formats?: InputMaybe<ReadonlyArray<RemoteFileFormat>>;
		height: InputMaybe<Scalars['Int']>;
		layout?: InputMaybe<RemoteFileLayout>;
		outputPixelDensities?: InputMaybe<
			ReadonlyArray<InputMaybe<Scalars['Float']>>
		>;
		placeholder?: InputMaybe<RemoteFilePlaceholder>;
		quality?: InputMaybe<Scalars['Int']>;
		sizes: InputMaybe<Scalars['String']>;
		width: InputMaybe<Scalars['Int']>;
	};

	/** The mediaItem type */
	type WpMediaItem_modifiedArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	/** The mediaItem type */
	type WpMediaItem_modifiedGmtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	/** The mediaItem type */
	type WpMediaItem_resizeArgs = {
		aspectRatio: InputMaybe<Scalars['Float']>;
		cropFocus: InputMaybe<ReadonlyArray<InputMaybe<RemoteFileCropFocus>>>;
		fit?: InputMaybe<RemoteFileFit>;
		format?: InputMaybe<RemoteFileFormat>;
		height: InputMaybe<Scalars['Int']>;
		quality?: InputMaybe<Scalars['Int']>;
		width: InputMaybe<Scalars['Int']>;
	};

	type WpMediaItemConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpMediaItemEdge>;
		readonly group: ReadonlyArray<WpMediaItemGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpMediaItem>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpMediaItemConnection_distinctArgs = {
		field: WpMediaItemFieldsEnum;
	};

	type WpMediaItemConnection_groupArgs = {
		field: WpMediaItemFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpMediaItemConnection_maxArgs = {
		field: WpMediaItemFieldsEnum;
	};

	type WpMediaItemConnection_minArgs = {
		field: WpMediaItemFieldsEnum;
	};

	type WpMediaItemConnection_sumArgs = {
		field: WpMediaItemFieldsEnum;
	};

	type WpMediaItemConnectionEdgeType = {
		/** The connected mediaItem Node */
		readonly node: WpMediaItem;
	};

	type WpMediaItemConnectionType = {
		/** A list of connected mediaItem Nodes */
		readonly nodes: ReadonlyArray<WpMediaItem>;
	};

	type WpMediaItemEdge = {
		readonly next: Maybe<WpMediaItem>;
		readonly node: WpMediaItem;
		readonly previous: Maybe<WpMediaItem>;
	};

	type WpMediaItemFieldsEnum =
		| 'altText'
		| 'ancestors.nodes'
		| 'ancestors.nodes.children'
		| 'ancestors.nodes.children.children'
		| 'ancestors.nodes.children.id'
		| 'ancestors.nodes.contentTypeName'
		| 'ancestors.nodes.databaseId'
		| 'ancestors.nodes.date'
		| 'ancestors.nodes.dateGmt'
		| 'ancestors.nodes.desiredSlug'
		| 'ancestors.nodes.enclosure'
		| 'ancestors.nodes.guid'
		| 'ancestors.nodes.id'
		| 'ancestors.nodes.internal.content'
		| 'ancestors.nodes.internal.contentDigest'
		| 'ancestors.nodes.internal.contentFilePath'
		| 'ancestors.nodes.internal.description'
		| 'ancestors.nodes.internal.fieldOwners'
		| 'ancestors.nodes.internal.ignoreType'
		| 'ancestors.nodes.internal.mediaType'
		| 'ancestors.nodes.internal.owner'
		| 'ancestors.nodes.internal.type'
		| 'ancestors.nodes.isContentNode'
		| 'ancestors.nodes.isTermNode'
		| 'ancestors.nodes.link'
		| 'ancestors.nodes.modified'
		| 'ancestors.nodes.modifiedGmt'
		| 'ancestors.nodes.nodeType'
		| 'ancestors.nodes.parent.children'
		| 'ancestors.nodes.parent.id'
		| 'ancestors.nodes.slug'
		| 'ancestors.nodes.status'
		| 'ancestors.nodes.template.templateName'
		| 'ancestors.nodes.uri'
		| 'authorDatabaseId'
		| 'authorId'
		| 'author.node.avatar.default'
		| 'author.node.avatar.extraAttr'
		| 'author.node.avatar.forceDefault'
		| 'author.node.avatar.foundAvatar'
		| 'author.node.avatar.height'
		| 'author.node.avatar.rating'
		| 'author.node.avatar.scheme'
		| 'author.node.avatar.size'
		| 'author.node.avatar.url'
		| 'author.node.avatar.width'
		| 'author.node.capKey'
		| 'author.node.capabilities'
		| 'author.node.children'
		| 'author.node.children.children'
		| 'author.node.children.id'
		| 'author.node.comments.nodes'
		| 'author.node.databaseId'
		| 'author.node.description'
		| 'author.node.email'
		| 'author.node.extraCapabilities'
		| 'author.node.firstName'
		| 'author.node.id'
		| 'author.node.internal.content'
		| 'author.node.internal.contentDigest'
		| 'author.node.internal.contentFilePath'
		| 'author.node.internal.description'
		| 'author.node.internal.fieldOwners'
		| 'author.node.internal.ignoreType'
		| 'author.node.internal.mediaType'
		| 'author.node.internal.owner'
		| 'author.node.internal.type'
		| 'author.node.isContentNode'
		| 'author.node.isTermNode'
		| 'author.node.lastName'
		| 'author.node.locale'
		| 'author.node.name'
		| 'author.node.nicename'
		| 'author.node.nickname'
		| 'author.node.nodeType'
		| 'author.node.pages.nodes'
		| 'author.node.parent.children'
		| 'author.node.parent.id'
		| 'author.node.posts.nodes'
		| 'author.node.registeredDate'
		| 'author.node.roles.nodes'
		| 'author.node.slug'
		| 'author.node.uri'
		| 'author.node.url'
		| 'author.node.username'
		| 'caption'
		| 'children'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'commentCount'
		| 'commentStatus'
		| 'comments.nodes'
		| 'comments.nodes.agent'
		| 'comments.nodes.authorIp'
		| 'comments.nodes.children'
		| 'comments.nodes.children.children'
		| 'comments.nodes.children.id'
		| 'comments.nodes.content'
		| 'comments.nodes.databaseId'
		| 'comments.nodes.date'
		| 'comments.nodes.dateGmt'
		| 'comments.nodes.id'
		| 'comments.nodes.internal.content'
		| 'comments.nodes.internal.contentDigest'
		| 'comments.nodes.internal.contentFilePath'
		| 'comments.nodes.internal.description'
		| 'comments.nodes.internal.fieldOwners'
		| 'comments.nodes.internal.ignoreType'
		| 'comments.nodes.internal.mediaType'
		| 'comments.nodes.internal.owner'
		| 'comments.nodes.internal.type'
		| 'comments.nodes.karma'
		| 'comments.nodes.nodeType'
		| 'comments.nodes.parentDatabaseId'
		| 'comments.nodes.parentId'
		| 'comments.nodes.parent.children'
		| 'comments.nodes.parent.id'
		| 'comments.nodes.replies.nodes'
		| 'comments.nodes.status'
		| 'comments.nodes.type'
		| 'contentTypeName'
		| 'contentType.node.archivePath'
		| 'contentType.node.canExport'
		| 'contentType.node.children'
		| 'contentType.node.children.children'
		| 'contentType.node.children.id'
		| 'contentType.node.connectedTaxonomies.nodes'
		| 'contentType.node.contentNodes.nodes'
		| 'contentType.node.deleteWithUser'
		| 'contentType.node.description'
		| 'contentType.node.excludeFromSearch'
		| 'contentType.node.graphqlPluralName'
		| 'contentType.node.graphqlSingleName'
		| 'contentType.node.hasArchive'
		| 'contentType.node.hierarchical'
		| 'contentType.node.id'
		| 'contentType.node.internal.content'
		| 'contentType.node.internal.contentDigest'
		| 'contentType.node.internal.contentFilePath'
		| 'contentType.node.internal.description'
		| 'contentType.node.internal.fieldOwners'
		| 'contentType.node.internal.ignoreType'
		| 'contentType.node.internal.mediaType'
		| 'contentType.node.internal.owner'
		| 'contentType.node.internal.type'
		| 'contentType.node.isContentNode'
		| 'contentType.node.isFrontPage'
		| 'contentType.node.isPostsPage'
		| 'contentType.node.isTermNode'
		| 'contentType.node.label'
		| 'contentType.node.labels.addNew'
		| 'contentType.node.labels.addNewItem'
		| 'contentType.node.labels.allItems'
		| 'contentType.node.labels.archives'
		| 'contentType.node.labels.attributes'
		| 'contentType.node.labels.editItem'
		| 'contentType.node.labels.featuredImage'
		| 'contentType.node.labels.filterItemsList'
		| 'contentType.node.labels.insertIntoItem'
		| 'contentType.node.labels.itemsList'
		| 'contentType.node.labels.itemsListNavigation'
		| 'contentType.node.labels.menuName'
		| 'contentType.node.labels.name'
		| 'contentType.node.labels.newItem'
		| 'contentType.node.labels.notFound'
		| 'contentType.node.labels.notFoundInTrash'
		| 'contentType.node.labels.parentItemColon'
		| 'contentType.node.labels.removeFeaturedImage'
		| 'contentType.node.labels.searchItems'
		| 'contentType.node.labels.setFeaturedImage'
		| 'contentType.node.labels.singularName'
		| 'contentType.node.labels.uploadedToThisItem'
		| 'contentType.node.labels.useFeaturedImage'
		| 'contentType.node.labels.viewItem'
		| 'contentType.node.labels.viewItems'
		| 'contentType.node.menuIcon'
		| 'contentType.node.menuPosition'
		| 'contentType.node.name'
		| 'contentType.node.nodeType'
		| 'contentType.node.parent.children'
		| 'contentType.node.parent.id'
		| 'contentType.node.public'
		| 'contentType.node.publiclyQueryable'
		| 'contentType.node.restBase'
		| 'contentType.node.restControllerClass'
		| 'contentType.node.showInAdminBar'
		| 'contentType.node.showInGraphql'
		| 'contentType.node.showInMenu'
		| 'contentType.node.showInNavMenus'
		| 'contentType.node.showInRest'
		| 'contentType.node.showUi'
		| 'contentType.node.uri'
		| 'databaseId'
		| 'date'
		| 'dateGmt'
		| 'description'
		| 'desiredSlug'
		| 'enclosure'
		| 'fileSize'
		| 'filename'
		| 'filesize'
		| 'gatsbyImage'
		| 'guid'
		| 'height'
		| 'id'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'isContentNode'
		| 'isTermNode'
		| 'lastEditedBy.node.avatar.default'
		| 'lastEditedBy.node.avatar.extraAttr'
		| 'lastEditedBy.node.avatar.forceDefault'
		| 'lastEditedBy.node.avatar.foundAvatar'
		| 'lastEditedBy.node.avatar.height'
		| 'lastEditedBy.node.avatar.rating'
		| 'lastEditedBy.node.avatar.scheme'
		| 'lastEditedBy.node.avatar.size'
		| 'lastEditedBy.node.avatar.url'
		| 'lastEditedBy.node.avatar.width'
		| 'lastEditedBy.node.capKey'
		| 'lastEditedBy.node.capabilities'
		| 'lastEditedBy.node.children'
		| 'lastEditedBy.node.children.children'
		| 'lastEditedBy.node.children.id'
		| 'lastEditedBy.node.comments.nodes'
		| 'lastEditedBy.node.databaseId'
		| 'lastEditedBy.node.description'
		| 'lastEditedBy.node.email'
		| 'lastEditedBy.node.extraCapabilities'
		| 'lastEditedBy.node.firstName'
		| 'lastEditedBy.node.id'
		| 'lastEditedBy.node.internal.content'
		| 'lastEditedBy.node.internal.contentDigest'
		| 'lastEditedBy.node.internal.contentFilePath'
		| 'lastEditedBy.node.internal.description'
		| 'lastEditedBy.node.internal.fieldOwners'
		| 'lastEditedBy.node.internal.ignoreType'
		| 'lastEditedBy.node.internal.mediaType'
		| 'lastEditedBy.node.internal.owner'
		| 'lastEditedBy.node.internal.type'
		| 'lastEditedBy.node.isContentNode'
		| 'lastEditedBy.node.isTermNode'
		| 'lastEditedBy.node.lastName'
		| 'lastEditedBy.node.locale'
		| 'lastEditedBy.node.name'
		| 'lastEditedBy.node.nicename'
		| 'lastEditedBy.node.nickname'
		| 'lastEditedBy.node.nodeType'
		| 'lastEditedBy.node.pages.nodes'
		| 'lastEditedBy.node.parent.children'
		| 'lastEditedBy.node.parent.id'
		| 'lastEditedBy.node.posts.nodes'
		| 'lastEditedBy.node.registeredDate'
		| 'lastEditedBy.node.roles.nodes'
		| 'lastEditedBy.node.slug'
		| 'lastEditedBy.node.uri'
		| 'lastEditedBy.node.url'
		| 'lastEditedBy.node.username'
		| 'link'
		| 'localFile.absolutePath'
		| 'localFile.accessTime'
		| 'localFile.atime'
		| 'localFile.atimeMs'
		| 'localFile.base'
		| 'localFile.birthTime'
		| 'localFile.birthtime'
		| 'localFile.birthtimeMs'
		| 'localFile.blksize'
		| 'localFile.blocks'
		| 'localFile.changeTime'
		| 'localFile.childImageSharp.children'
		| 'localFile.childImageSharp.children.children'
		| 'localFile.childImageSharp.children.id'
		| 'localFile.childImageSharp.fixed.aspectRatio'
		| 'localFile.childImageSharp.fixed.base64'
		| 'localFile.childImageSharp.fixed.height'
		| 'localFile.childImageSharp.fixed.originalName'
		| 'localFile.childImageSharp.fixed.src'
		| 'localFile.childImageSharp.fixed.srcSet'
		| 'localFile.childImageSharp.fixed.srcSetWebp'
		| 'localFile.childImageSharp.fixed.srcWebp'
		| 'localFile.childImageSharp.fixed.tracedSVG'
		| 'localFile.childImageSharp.fixed.width'
		| 'localFile.childImageSharp.fluid.aspectRatio'
		| 'localFile.childImageSharp.fluid.base64'
		| 'localFile.childImageSharp.fluid.originalImg'
		| 'localFile.childImageSharp.fluid.originalName'
		| 'localFile.childImageSharp.fluid.presentationHeight'
		| 'localFile.childImageSharp.fluid.presentationWidth'
		| 'localFile.childImageSharp.fluid.sizes'
		| 'localFile.childImageSharp.fluid.src'
		| 'localFile.childImageSharp.fluid.srcSet'
		| 'localFile.childImageSharp.fluid.srcSetWebp'
		| 'localFile.childImageSharp.fluid.srcWebp'
		| 'localFile.childImageSharp.fluid.tracedSVG'
		| 'localFile.childImageSharp.gatsbyImageData'
		| 'localFile.childImageSharp.id'
		| 'localFile.childImageSharp.internal.content'
		| 'localFile.childImageSharp.internal.contentDigest'
		| 'localFile.childImageSharp.internal.contentFilePath'
		| 'localFile.childImageSharp.internal.description'
		| 'localFile.childImageSharp.internal.fieldOwners'
		| 'localFile.childImageSharp.internal.ignoreType'
		| 'localFile.childImageSharp.internal.mediaType'
		| 'localFile.childImageSharp.internal.owner'
		| 'localFile.childImageSharp.internal.type'
		| 'localFile.childImageSharp.original.height'
		| 'localFile.childImageSharp.original.src'
		| 'localFile.childImageSharp.original.width'
		| 'localFile.childImageSharp.parent.children'
		| 'localFile.childImageSharp.parent.id'
		| 'localFile.childImageSharp.resize.aspectRatio'
		| 'localFile.childImageSharp.resize.height'
		| 'localFile.childImageSharp.resize.originalName'
		| 'localFile.childImageSharp.resize.src'
		| 'localFile.childImageSharp.resize.tracedSVG'
		| 'localFile.childImageSharp.resize.width'
		| 'localFile.children'
		| 'localFile.childrenImageSharp'
		| 'localFile.childrenImageSharp.children'
		| 'localFile.childrenImageSharp.children.children'
		| 'localFile.childrenImageSharp.children.id'
		| 'localFile.childrenImageSharp.fixed.aspectRatio'
		| 'localFile.childrenImageSharp.fixed.base64'
		| 'localFile.childrenImageSharp.fixed.height'
		| 'localFile.childrenImageSharp.fixed.originalName'
		| 'localFile.childrenImageSharp.fixed.src'
		| 'localFile.childrenImageSharp.fixed.srcSet'
		| 'localFile.childrenImageSharp.fixed.srcSetWebp'
		| 'localFile.childrenImageSharp.fixed.srcWebp'
		| 'localFile.childrenImageSharp.fixed.tracedSVG'
		| 'localFile.childrenImageSharp.fixed.width'
		| 'localFile.childrenImageSharp.fluid.aspectRatio'
		| 'localFile.childrenImageSharp.fluid.base64'
		| 'localFile.childrenImageSharp.fluid.originalImg'
		| 'localFile.childrenImageSharp.fluid.originalName'
		| 'localFile.childrenImageSharp.fluid.presentationHeight'
		| 'localFile.childrenImageSharp.fluid.presentationWidth'
		| 'localFile.childrenImageSharp.fluid.sizes'
		| 'localFile.childrenImageSharp.fluid.src'
		| 'localFile.childrenImageSharp.fluid.srcSet'
		| 'localFile.childrenImageSharp.fluid.srcSetWebp'
		| 'localFile.childrenImageSharp.fluid.srcWebp'
		| 'localFile.childrenImageSharp.fluid.tracedSVG'
		| 'localFile.childrenImageSharp.gatsbyImageData'
		| 'localFile.childrenImageSharp.id'
		| 'localFile.childrenImageSharp.internal.content'
		| 'localFile.childrenImageSharp.internal.contentDigest'
		| 'localFile.childrenImageSharp.internal.contentFilePath'
		| 'localFile.childrenImageSharp.internal.description'
		| 'localFile.childrenImageSharp.internal.fieldOwners'
		| 'localFile.childrenImageSharp.internal.ignoreType'
		| 'localFile.childrenImageSharp.internal.mediaType'
		| 'localFile.childrenImageSharp.internal.owner'
		| 'localFile.childrenImageSharp.internal.type'
		| 'localFile.childrenImageSharp.original.height'
		| 'localFile.childrenImageSharp.original.src'
		| 'localFile.childrenImageSharp.original.width'
		| 'localFile.childrenImageSharp.parent.children'
		| 'localFile.childrenImageSharp.parent.id'
		| 'localFile.childrenImageSharp.resize.aspectRatio'
		| 'localFile.childrenImageSharp.resize.height'
		| 'localFile.childrenImageSharp.resize.originalName'
		| 'localFile.childrenImageSharp.resize.src'
		| 'localFile.childrenImageSharp.resize.tracedSVG'
		| 'localFile.childrenImageSharp.resize.width'
		| 'localFile.children.children'
		| 'localFile.children.children.children'
		| 'localFile.children.children.id'
		| 'localFile.children.id'
		| 'localFile.children.internal.content'
		| 'localFile.children.internal.contentDigest'
		| 'localFile.children.internal.contentFilePath'
		| 'localFile.children.internal.description'
		| 'localFile.children.internal.fieldOwners'
		| 'localFile.children.internal.ignoreType'
		| 'localFile.children.internal.mediaType'
		| 'localFile.children.internal.owner'
		| 'localFile.children.internal.type'
		| 'localFile.children.parent.children'
		| 'localFile.children.parent.id'
		| 'localFile.ctime'
		| 'localFile.ctimeMs'
		| 'localFile.dev'
		| 'localFile.dir'
		| 'localFile.ext'
		| 'localFile.extension'
		| 'localFile.gid'
		| 'localFile.id'
		| 'localFile.ino'
		| 'localFile.internal.content'
		| 'localFile.internal.contentDigest'
		| 'localFile.internal.contentFilePath'
		| 'localFile.internal.description'
		| 'localFile.internal.fieldOwners'
		| 'localFile.internal.ignoreType'
		| 'localFile.internal.mediaType'
		| 'localFile.internal.owner'
		| 'localFile.internal.type'
		| 'localFile.mode'
		| 'localFile.modifiedTime'
		| 'localFile.mtime'
		| 'localFile.mtimeMs'
		| 'localFile.name'
		| 'localFile.nlink'
		| 'localFile.parent.children'
		| 'localFile.parent.children.children'
		| 'localFile.parent.children.id'
		| 'localFile.parent.id'
		| 'localFile.parent.internal.content'
		| 'localFile.parent.internal.contentDigest'
		| 'localFile.parent.internal.contentFilePath'
		| 'localFile.parent.internal.description'
		| 'localFile.parent.internal.fieldOwners'
		| 'localFile.parent.internal.ignoreType'
		| 'localFile.parent.internal.mediaType'
		| 'localFile.parent.internal.owner'
		| 'localFile.parent.internal.type'
		| 'localFile.parent.parent.children'
		| 'localFile.parent.parent.id'
		| 'localFile.prettySize'
		| 'localFile.publicURL'
		| 'localFile.rdev'
		| 'localFile.relativeDirectory'
		| 'localFile.relativePath'
		| 'localFile.root'
		| 'localFile.size'
		| 'localFile.sourceInstanceName'
		| 'localFile.uid'
		| 'localFile.url'
		| 'mediaDetails.file'
		| 'mediaDetails.height'
		| 'mediaDetails.meta.aperture'
		| 'mediaDetails.meta.camera'
		| 'mediaDetails.meta.caption'
		| 'mediaDetails.meta.copyright'
		| 'mediaDetails.meta.createdTimestamp'
		| 'mediaDetails.meta.credit'
		| 'mediaDetails.meta.focalLength'
		| 'mediaDetails.meta.iso'
		| 'mediaDetails.meta.keywords'
		| 'mediaDetails.meta.orientation'
		| 'mediaDetails.meta.shutterSpeed'
		| 'mediaDetails.meta.title'
		| 'mediaDetails.sizes'
		| 'mediaDetails.sizes.file'
		| 'mediaDetails.sizes.fileSize'
		| 'mediaDetails.sizes.height'
		| 'mediaDetails.sizes.mimeType'
		| 'mediaDetails.sizes.name'
		| 'mediaDetails.sizes.sourceUrl'
		| 'mediaDetails.sizes.width'
		| 'mediaDetails.width'
		| 'mediaItemUrl'
		| 'mediaType'
		| 'mimeType'
		| 'modified'
		| 'modifiedGmt'
		| 'nodeType'
		| 'parentDatabaseId'
		| 'parentId'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id'
		| 'publicUrl'
		| 'resize.height'
		| 'resize.src'
		| 'resize.width'
		| 'sizes'
		| 'slug'
		| 'sourceUrl'
		| 'srcSet'
		| 'status'
		| 'template.templateName'
		| 'title'
		| 'uri'
		| 'width'
		| 'wpChildren.nodes'
		| 'wpChildren.nodes.children'
		| 'wpChildren.nodes.children.children'
		| 'wpChildren.nodes.children.id'
		| 'wpChildren.nodes.contentTypeName'
		| 'wpChildren.nodes.databaseId'
		| 'wpChildren.nodes.date'
		| 'wpChildren.nodes.dateGmt'
		| 'wpChildren.nodes.desiredSlug'
		| 'wpChildren.nodes.enclosure'
		| 'wpChildren.nodes.guid'
		| 'wpChildren.nodes.id'
		| 'wpChildren.nodes.internal.content'
		| 'wpChildren.nodes.internal.contentDigest'
		| 'wpChildren.nodes.internal.contentFilePath'
		| 'wpChildren.nodes.internal.description'
		| 'wpChildren.nodes.internal.fieldOwners'
		| 'wpChildren.nodes.internal.ignoreType'
		| 'wpChildren.nodes.internal.mediaType'
		| 'wpChildren.nodes.internal.owner'
		| 'wpChildren.nodes.internal.type'
		| 'wpChildren.nodes.isContentNode'
		| 'wpChildren.nodes.isTermNode'
		| 'wpChildren.nodes.link'
		| 'wpChildren.nodes.modified'
		| 'wpChildren.nodes.modifiedGmt'
		| 'wpChildren.nodes.nodeType'
		| 'wpChildren.nodes.parent.children'
		| 'wpChildren.nodes.parent.id'
		| 'wpChildren.nodes.slug'
		| 'wpChildren.nodes.status'
		| 'wpChildren.nodes.template.templateName'
		| 'wpChildren.nodes.uri'
		| 'wpParent.node.children'
		| 'wpParent.node.children.children'
		| 'wpParent.node.children.id'
		| 'wpParent.node.contentTypeName'
		| 'wpParent.node.databaseId'
		| 'wpParent.node.date'
		| 'wpParent.node.dateGmt'
		| 'wpParent.node.desiredSlug'
		| 'wpParent.node.enclosure'
		| 'wpParent.node.guid'
		| 'wpParent.node.id'
		| 'wpParent.node.internal.content'
		| 'wpParent.node.internal.contentDigest'
		| 'wpParent.node.internal.contentFilePath'
		| 'wpParent.node.internal.description'
		| 'wpParent.node.internal.fieldOwners'
		| 'wpParent.node.internal.ignoreType'
		| 'wpParent.node.internal.mediaType'
		| 'wpParent.node.internal.owner'
		| 'wpParent.node.internal.type'
		| 'wpParent.node.isContentNode'
		| 'wpParent.node.isTermNode'
		| 'wpParent.node.link'
		| 'wpParent.node.modified'
		| 'wpParent.node.modifiedGmt'
		| 'wpParent.node.nodeType'
		| 'wpParent.node.parent.children'
		| 'wpParent.node.parent.id'
		| 'wpParent.node.slug'
		| 'wpParent.node.status'
		| 'wpParent.node.template.templateName'
		| 'wpParent.node.uri';

	type WpMediaItemFilterInput = {
		readonly altText: InputMaybe<StringQueryOperatorInput>;
		readonly ancestors: InputMaybe<WpHierarchicalContentNodeToContentNodeAncestorsConnectionTypeFilterInput>;
		readonly author: InputMaybe<WpNodeWithAuthorToUserConnectionEdgeTypeFilterInput>;
		readonly authorDatabaseId: InputMaybe<IntQueryOperatorInput>;
		readonly authorId: InputMaybe<IDQueryOperatorInput>;
		readonly caption: InputMaybe<StringQueryOperatorInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly commentCount: InputMaybe<IntQueryOperatorInput>;
		readonly commentStatus: InputMaybe<StringQueryOperatorInput>;
		readonly comments: InputMaybe<WpMediaItemToCommentConnectionTypeFilterInput>;
		readonly contentType: InputMaybe<WpContentNodeToContentTypeConnectionEdgeTypeFilterInput>;
		readonly contentTypeName: InputMaybe<StringQueryOperatorInput>;
		readonly databaseId: InputMaybe<IntQueryOperatorInput>;
		readonly date: InputMaybe<DateQueryOperatorInput>;
		readonly dateGmt: InputMaybe<DateQueryOperatorInput>;
		readonly description: InputMaybe<StringQueryOperatorInput>;
		readonly desiredSlug: InputMaybe<StringQueryOperatorInput>;
		readonly enclosure: InputMaybe<StringQueryOperatorInput>;
		readonly fileSize: InputMaybe<IntQueryOperatorInput>;
		readonly filename: InputMaybe<StringQueryOperatorInput>;
		readonly filesize: InputMaybe<IntQueryOperatorInput>;
		readonly gatsbyImage: InputMaybe<GatsbyImageDataQueryOperatorInput>;
		readonly guid: InputMaybe<StringQueryOperatorInput>;
		readonly height: InputMaybe<IntQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly isContentNode: InputMaybe<BooleanQueryOperatorInput>;
		readonly isTermNode: InputMaybe<BooleanQueryOperatorInput>;
		readonly lastEditedBy: InputMaybe<WpContentNodeToEditLastConnectionEdgeTypeFilterInput>;
		readonly link: InputMaybe<StringQueryOperatorInput>;
		readonly localFile: InputMaybe<FileFilterInput>;
		readonly mediaDetails: InputMaybe<WpMediaDetailsFilterInput>;
		readonly mediaItemUrl: InputMaybe<StringQueryOperatorInput>;
		readonly mediaType: InputMaybe<StringQueryOperatorInput>;
		readonly mimeType: InputMaybe<StringQueryOperatorInput>;
		readonly modified: InputMaybe<DateQueryOperatorInput>;
		readonly modifiedGmt: InputMaybe<DateQueryOperatorInput>;
		readonly nodeType: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly parentDatabaseId: InputMaybe<IntQueryOperatorInput>;
		readonly parentId: InputMaybe<IDQueryOperatorInput>;
		readonly publicUrl: InputMaybe<StringQueryOperatorInput>;
		readonly resize: InputMaybe<RemoteFileResizeFilterInput>;
		readonly sizes: InputMaybe<StringQueryOperatorInput>;
		readonly slug: InputMaybe<StringQueryOperatorInput>;
		readonly sourceUrl: InputMaybe<StringQueryOperatorInput>;
		readonly srcSet: InputMaybe<StringQueryOperatorInput>;
		readonly status: InputMaybe<StringQueryOperatorInput>;
		readonly template: InputMaybe<WpContentTemplateFilterInput>;
		readonly title: InputMaybe<StringQueryOperatorInput>;
		readonly uri: InputMaybe<StringQueryOperatorInput>;
		readonly width: InputMaybe<IntQueryOperatorInput>;
		readonly wpChildren: InputMaybe<WpHierarchicalContentNodeToContentNodeChildrenConnectionTypeFilterInput>;
		readonly wpParent: InputMaybe<WpHierarchicalContentNodeToParentContentNodeConnectionEdgeTypeFilterInput>;
	};

	type WpMediaItemGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpMediaItemEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<WpMediaItemGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpMediaItem>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpMediaItemGroupConnection_distinctArgs = {
		field: WpMediaItemFieldsEnum;
	};

	type WpMediaItemGroupConnection_groupArgs = {
		field: WpMediaItemFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpMediaItemGroupConnection_maxArgs = {
		field: WpMediaItemFieldsEnum;
	};

	type WpMediaItemGroupConnection_minArgs = {
		field: WpMediaItemFieldsEnum;
	};

	type WpMediaItemGroupConnection_sumArgs = {
		field: WpMediaItemFieldsEnum;
	};

	/** Meta connected to a MediaItem */
	type WpMediaItemMeta = {
		/** Aperture measurement of the media item. */
		readonly aperture: Maybe<Scalars['Float']>;
		/** Information about the camera used to create the media item. */
		readonly camera: Maybe<Scalars['String']>;
		/** The text string description associated with the media item. */
		readonly caption: Maybe<Scalars['String']>;
		/** Copyright information associated with the media item. */
		readonly copyright: Maybe<Scalars['String']>;
		/** The date/time when the media was created. */
		readonly createdTimestamp: Maybe<Scalars['Int']>;
		/** The original creator of the media item. */
		readonly credit: Maybe<Scalars['String']>;
		/** The focal length value of the media item. */
		readonly focalLength: Maybe<Scalars['Float']>;
		/** The ISO (International Organization for Standardization) value of the media item. */
		readonly iso: Maybe<Scalars['Int']>;
		/** List of keywords used to describe or identfy the media item. */
		readonly keywords: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
		/** The vertical or horizontal aspect of the media item. */
		readonly orientation: Maybe<Scalars['String']>;
		/** The shutter speed information of the media item. */
		readonly shutterSpeed: Maybe<Scalars['Float']>;
		/** A useful title for the media item. */
		readonly title: Maybe<Scalars['String']>;
	};

	type WpMediaItemMetaFilterInput = {
		readonly aperture: InputMaybe<FloatQueryOperatorInput>;
		readonly camera: InputMaybe<StringQueryOperatorInput>;
		readonly caption: InputMaybe<StringQueryOperatorInput>;
		readonly copyright: InputMaybe<StringQueryOperatorInput>;
		readonly createdTimestamp: InputMaybe<IntQueryOperatorInput>;
		readonly credit: InputMaybe<StringQueryOperatorInput>;
		readonly focalLength: InputMaybe<FloatQueryOperatorInput>;
		readonly iso: InputMaybe<IntQueryOperatorInput>;
		readonly keywords: InputMaybe<StringQueryOperatorInput>;
		readonly orientation: InputMaybe<StringQueryOperatorInput>;
		readonly shutterSpeed: InputMaybe<FloatQueryOperatorInput>;
		readonly title: InputMaybe<StringQueryOperatorInput>;
	};

	type WpMediaItemSortInput = {
		readonly fields: InputMaybe<
			ReadonlyArray<InputMaybe<WpMediaItemFieldsEnum>>
		>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	/** Connection between the MediaItem type and the Comment type */
	type WpMediaItemToCommentConnectionType = WpCommentConnectionType &
		WpConnectionType & {
			/** The nodes of the connection, without the edges */
			readonly nodes: ReadonlyArray<WpComment>;
		};

	type WpMediaItemToCommentConnectionTypeFilterInput = {
		readonly nodes: InputMaybe<WpCommentFilterListInput>;
	};

	/** Details of an available size for a media item */
	type WpMediaSize = {
		/** The filename of the referenced size */
		readonly file: Maybe<Scalars['String']>;
		/** The filesize of the resource */
		readonly fileSize: Maybe<Scalars['Int']>;
		/** The height of the referenced size */
		readonly height: Maybe<Scalars['String']>;
		/** The mime type of the referenced size */
		readonly mimeType: Maybe<Scalars['String']>;
		/** The referenced size name */
		readonly name: Maybe<Scalars['String']>;
		/** The url of the referenced size */
		readonly sourceUrl: Maybe<Scalars['String']>;
		/** The width of the referenced size */
		readonly width: Maybe<Scalars['String']>;
	};

	type WpMediaSizeFilterInput = {
		readonly file: InputMaybe<StringQueryOperatorInput>;
		readonly fileSize: InputMaybe<IntQueryOperatorInput>;
		readonly height: InputMaybe<StringQueryOperatorInput>;
		readonly mimeType: InputMaybe<StringQueryOperatorInput>;
		readonly name: InputMaybe<StringQueryOperatorInput>;
		readonly sourceUrl: InputMaybe<StringQueryOperatorInput>;
		readonly width: InputMaybe<StringQueryOperatorInput>;
	};

	type WpMediaSizeFilterListInput = {
		readonly elemMatch: InputMaybe<WpMediaSizeFilterInput>;
	};

	/** Menus are the containers for navigation items. Menus can be assigned to menu locations, which are typically registered by the active theme. */
	type WpMenu = Node &
		WpDatabaseIdentifier &
		WpNode & {
			readonly children: ReadonlyArray<Node>;
			/** The number of items in the menu */
			readonly count: Maybe<Scalars['Int']>;
			/** The unique identifier stored in the database */
			readonly databaseId: Scalars['Int'];
			readonly id: Scalars['ID'];
			readonly internal: Internal;
			/** The locations a menu is assigned to */
			readonly locations: Maybe<ReadonlyArray<Maybe<WpMenuLocationEnum>>>;
			/** Connection between the Menu type and the MenuItem type */
			readonly menuItems: Maybe<WpMenuToMenuItemConnectionType>;
			/** Display name of the menu. Equivalent to WP_Term-&gt;name. */
			readonly name: Maybe<Scalars['String']>;
			readonly nodeType: Maybe<Scalars['String']>;
			readonly parent: Maybe<Node>;
			/** The url friendly name of the menu. Equivalent to WP_Term-&gt;slug */
			readonly slug: Maybe<Scalars['String']>;
		};

	type WpMenuConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpMenuEdge>;
		readonly group: ReadonlyArray<WpMenuGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpMenu>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpMenuConnection_distinctArgs = {
		field: WpMenuFieldsEnum;
	};

	type WpMenuConnection_groupArgs = {
		field: WpMenuFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpMenuConnection_maxArgs = {
		field: WpMenuFieldsEnum;
	};

	type WpMenuConnection_minArgs = {
		field: WpMenuFieldsEnum;
	};

	type WpMenuConnection_sumArgs = {
		field: WpMenuFieldsEnum;
	};

	type WpMenuConnectionEdgeType = {
		/** The connected Menu Node */
		readonly node: WpMenu;
	};

	type WpMenuConnectionType = {
		/** A list of connected Menu Nodes */
		readonly nodes: ReadonlyArray<WpMenu>;
	};

	type WpMenuEdge = {
		readonly next: Maybe<WpMenu>;
		readonly node: WpMenu;
		readonly previous: Maybe<WpMenu>;
	};

	type WpMenuFieldsEnum =
		| 'children'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'count'
		| 'databaseId'
		| 'id'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'locations'
		| 'menuItems.nodes'
		| 'menuItems.nodes.childItems.nodes'
		| 'menuItems.nodes.children'
		| 'menuItems.nodes.children.children'
		| 'menuItems.nodes.children.id'
		| 'menuItems.nodes.cssClasses'
		| 'menuItems.nodes.databaseId'
		| 'menuItems.nodes.description'
		| 'menuItems.nodes.id'
		| 'menuItems.nodes.internal.content'
		| 'menuItems.nodes.internal.contentDigest'
		| 'menuItems.nodes.internal.contentFilePath'
		| 'menuItems.nodes.internal.description'
		| 'menuItems.nodes.internal.fieldOwners'
		| 'menuItems.nodes.internal.ignoreType'
		| 'menuItems.nodes.internal.mediaType'
		| 'menuItems.nodes.internal.owner'
		| 'menuItems.nodes.internal.type'
		| 'menuItems.nodes.label'
		| 'menuItems.nodes.linkRelationship'
		| 'menuItems.nodes.locations'
		| 'menuItems.nodes.nodeType'
		| 'menuItems.nodes.order'
		| 'menuItems.nodes.parentDatabaseId'
		| 'menuItems.nodes.parentId'
		| 'menuItems.nodes.parent.children'
		| 'menuItems.nodes.parent.id'
		| 'menuItems.nodes.path'
		| 'menuItems.nodes.target'
		| 'menuItems.nodes.title'
		| 'menuItems.nodes.uri'
		| 'menuItems.nodes.url'
		| 'name'
		| 'nodeType'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id'
		| 'slug';

	type WpMenuFilterInput = {
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly count: InputMaybe<IntQueryOperatorInput>;
		readonly databaseId: InputMaybe<IntQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly locations: InputMaybe<WpMenuLocationEnumQueryOperatorInput>;
		readonly menuItems: InputMaybe<WpMenuToMenuItemConnectionTypeFilterInput>;
		readonly name: InputMaybe<StringQueryOperatorInput>;
		readonly nodeType: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly slug: InputMaybe<StringQueryOperatorInput>;
	};

	type WpMenuGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpMenuEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<WpMenuGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpMenu>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpMenuGroupConnection_distinctArgs = {
		field: WpMenuFieldsEnum;
	};

	type WpMenuGroupConnection_groupArgs = {
		field: WpMenuFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpMenuGroupConnection_maxArgs = {
		field: WpMenuFieldsEnum;
	};

	type WpMenuGroupConnection_minArgs = {
		field: WpMenuFieldsEnum;
	};

	type WpMenuGroupConnection_sumArgs = {
		field: WpMenuFieldsEnum;
	};

	/** Navigation menu items are the individual items assigned to a menu. These are rendered as the links in a navigation menu. */
	type WpMenuItem = Node &
		WpDatabaseIdentifier &
		WpNode & {
			/** Connection between the MenuItem type and the MenuItem type */
			readonly childItems: Maybe<WpMenuItemToMenuItemConnectionType>;
			readonly children: ReadonlyArray<Node>;
			/** Connection from MenuItem to it&#039;s connected node */
			readonly connectedNode: Maybe<WpMenuItemToMenuItemLinkableConnectionEdgeType>;
			/** Class attribute for the menu item link */
			readonly cssClasses: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
			/** The unique identifier stored in the database */
			readonly databaseId: Scalars['Int'];
			/** Description of the menu item. */
			readonly description: Maybe<Scalars['String']>;
			readonly id: Scalars['ID'];
			readonly internal: Internal;
			/** Label or title of the menu item. */
			readonly label: Maybe<Scalars['String']>;
			/** Link relationship (XFN) of the menu item. */
			readonly linkRelationship: Maybe<Scalars['String']>;
			/** The locations the menu item&#039;s Menu is assigned to */
			readonly locations: Maybe<ReadonlyArray<Maybe<WpMenuLocationEnum>>>;
			/** The Menu a MenuItem is part of */
			readonly menu: Maybe<WpMenuItemToMenuConnectionEdgeType>;
			readonly nodeType: Maybe<Scalars['String']>;
			/** Menu item order */
			readonly order: Maybe<Scalars['Int']>;
			readonly parent: Maybe<Node>;
			/** The database id of the parent menu item or null if it is the root */
			readonly parentDatabaseId: Maybe<Scalars['Int']>;
			/** The globally unique identifier of the parent nav menu item object. */
			readonly parentId: Maybe<Scalars['ID']>;
			/** Path for the resource. Relative path for internal resources. Absolute path for external resources. */
			readonly path: Maybe<Scalars['String']>;
			/** Target attribute for the menu item link. */
			readonly target: Maybe<Scalars['String']>;
			/** Title attribute for the menu item link */
			readonly title: Maybe<Scalars['String']>;
			/** The uri of the resource the menu item links to */
			readonly uri: Maybe<Scalars['String']>;
			/** URL or destination of the menu item. */
			readonly url: Maybe<Scalars['String']>;
		};

	type WpMenuItemConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpMenuItemEdge>;
		readonly group: ReadonlyArray<WpMenuItemGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpMenuItem>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpMenuItemConnection_distinctArgs = {
		field: WpMenuItemFieldsEnum;
	};

	type WpMenuItemConnection_groupArgs = {
		field: WpMenuItemFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpMenuItemConnection_maxArgs = {
		field: WpMenuItemFieldsEnum;
	};

	type WpMenuItemConnection_minArgs = {
		field: WpMenuItemFieldsEnum;
	};

	type WpMenuItemConnection_sumArgs = {
		field: WpMenuItemFieldsEnum;
	};

	type WpMenuItemConnectionEdgeType = {
		/** The connected MenuItem Node */
		readonly node: WpMenuItem;
	};

	type WpMenuItemConnectionType = {
		/** A list of connected MenuItem Nodes */
		readonly nodes: ReadonlyArray<WpMenuItem>;
	};

	type WpMenuItemEdge = {
		readonly next: Maybe<WpMenuItem>;
		readonly node: WpMenuItem;
		readonly previous: Maybe<WpMenuItem>;
	};

	type WpMenuItemFieldsEnum =
		| 'childItems.nodes'
		| 'childItems.nodes.childItems.nodes'
		| 'childItems.nodes.children'
		| 'childItems.nodes.children.children'
		| 'childItems.nodes.children.id'
		| 'childItems.nodes.cssClasses'
		| 'childItems.nodes.databaseId'
		| 'childItems.nodes.description'
		| 'childItems.nodes.id'
		| 'childItems.nodes.internal.content'
		| 'childItems.nodes.internal.contentDigest'
		| 'childItems.nodes.internal.contentFilePath'
		| 'childItems.nodes.internal.description'
		| 'childItems.nodes.internal.fieldOwners'
		| 'childItems.nodes.internal.ignoreType'
		| 'childItems.nodes.internal.mediaType'
		| 'childItems.nodes.internal.owner'
		| 'childItems.nodes.internal.type'
		| 'childItems.nodes.label'
		| 'childItems.nodes.linkRelationship'
		| 'childItems.nodes.locations'
		| 'childItems.nodes.nodeType'
		| 'childItems.nodes.order'
		| 'childItems.nodes.parentDatabaseId'
		| 'childItems.nodes.parentId'
		| 'childItems.nodes.parent.children'
		| 'childItems.nodes.parent.id'
		| 'childItems.nodes.path'
		| 'childItems.nodes.target'
		| 'childItems.nodes.title'
		| 'childItems.nodes.uri'
		| 'childItems.nodes.url'
		| 'children'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'connectedNode.node.children'
		| 'connectedNode.node.children.children'
		| 'connectedNode.node.children.id'
		| 'connectedNode.node.databaseId'
		| 'connectedNode.node.id'
		| 'connectedNode.node.internal.content'
		| 'connectedNode.node.internal.contentDigest'
		| 'connectedNode.node.internal.contentFilePath'
		| 'connectedNode.node.internal.description'
		| 'connectedNode.node.internal.fieldOwners'
		| 'connectedNode.node.internal.ignoreType'
		| 'connectedNode.node.internal.mediaType'
		| 'connectedNode.node.internal.owner'
		| 'connectedNode.node.internal.type'
		| 'connectedNode.node.isContentNode'
		| 'connectedNode.node.isTermNode'
		| 'connectedNode.node.nodeType'
		| 'connectedNode.node.parent.children'
		| 'connectedNode.node.parent.id'
		| 'connectedNode.node.uri'
		| 'cssClasses'
		| 'databaseId'
		| 'description'
		| 'id'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'label'
		| 'linkRelationship'
		| 'locations'
		| 'menu.node.children'
		| 'menu.node.children.children'
		| 'menu.node.children.id'
		| 'menu.node.count'
		| 'menu.node.databaseId'
		| 'menu.node.id'
		| 'menu.node.internal.content'
		| 'menu.node.internal.contentDigest'
		| 'menu.node.internal.contentFilePath'
		| 'menu.node.internal.description'
		| 'menu.node.internal.fieldOwners'
		| 'menu.node.internal.ignoreType'
		| 'menu.node.internal.mediaType'
		| 'menu.node.internal.owner'
		| 'menu.node.internal.type'
		| 'menu.node.locations'
		| 'menu.node.menuItems.nodes'
		| 'menu.node.name'
		| 'menu.node.nodeType'
		| 'menu.node.parent.children'
		| 'menu.node.parent.id'
		| 'menu.node.slug'
		| 'nodeType'
		| 'order'
		| 'parentDatabaseId'
		| 'parentId'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id'
		| 'path'
		| 'target'
		| 'title'
		| 'uri'
		| 'url';

	type WpMenuItemFilterInput = {
		readonly childItems: InputMaybe<WpMenuItemToMenuItemConnectionTypeFilterInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly connectedNode: InputMaybe<WpMenuItemToMenuItemLinkableConnectionEdgeTypeFilterInput>;
		readonly cssClasses: InputMaybe<StringQueryOperatorInput>;
		readonly databaseId: InputMaybe<IntQueryOperatorInput>;
		readonly description: InputMaybe<StringQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly label: InputMaybe<StringQueryOperatorInput>;
		readonly linkRelationship: InputMaybe<StringQueryOperatorInput>;
		readonly locations: InputMaybe<WpMenuLocationEnumQueryOperatorInput>;
		readonly menu: InputMaybe<WpMenuItemToMenuConnectionEdgeTypeFilterInput>;
		readonly nodeType: InputMaybe<StringQueryOperatorInput>;
		readonly order: InputMaybe<IntQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly parentDatabaseId: InputMaybe<IntQueryOperatorInput>;
		readonly parentId: InputMaybe<IDQueryOperatorInput>;
		readonly path: InputMaybe<StringQueryOperatorInput>;
		readonly target: InputMaybe<StringQueryOperatorInput>;
		readonly title: InputMaybe<StringQueryOperatorInput>;
		readonly uri: InputMaybe<StringQueryOperatorInput>;
		readonly url: InputMaybe<StringQueryOperatorInput>;
	};

	type WpMenuItemFilterListInput = {
		readonly elemMatch: InputMaybe<WpMenuItemFilterInput>;
	};

	type WpMenuItemGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpMenuItemEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<WpMenuItemGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpMenuItem>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpMenuItemGroupConnection_distinctArgs = {
		field: WpMenuItemFieldsEnum;
	};

	type WpMenuItemGroupConnection_groupArgs = {
		field: WpMenuItemFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpMenuItemGroupConnection_maxArgs = {
		field: WpMenuItemFieldsEnum;
	};

	type WpMenuItemGroupConnection_minArgs = {
		field: WpMenuItemFieldsEnum;
	};

	type WpMenuItemGroupConnection_sumArgs = {
		field: WpMenuItemFieldsEnum;
	};

	type WpMenuItemLinkable = {
		readonly children: ReadonlyArray<Node>;
		/** The unique identifier stored in the database */
		readonly databaseId: Scalars['Int'];
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		/** Whether the node is a Content Node */
		readonly isContentNode: Scalars['Boolean'];
		/** Whether the node is a Term */
		readonly isTermNode: Scalars['Boolean'];
		readonly nodeType: Maybe<Scalars['String']>;
		readonly parent: Maybe<Node>;
		/** The unique resource identifier path */
		readonly uri: Maybe<Scalars['String']>;
	};

	type WpMenuItemLinkableConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpMenuItemLinkableEdge>;
		readonly group: ReadonlyArray<WpMenuItemLinkableGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpMenuItemLinkable>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpMenuItemLinkableConnection_distinctArgs = {
		field: WpMenuItemLinkableFieldsEnum;
	};

	type WpMenuItemLinkableConnection_groupArgs = {
		field: WpMenuItemLinkableFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpMenuItemLinkableConnection_maxArgs = {
		field: WpMenuItemLinkableFieldsEnum;
	};

	type WpMenuItemLinkableConnection_minArgs = {
		field: WpMenuItemLinkableFieldsEnum;
	};

	type WpMenuItemLinkableConnection_sumArgs = {
		field: WpMenuItemLinkableFieldsEnum;
	};

	type WpMenuItemLinkableConnectionEdgeType = {
		/** The connected MenuItemLinkable Node */
		readonly node: WpMenuItemLinkable;
	};

	type WpMenuItemLinkableEdge = {
		readonly next: Maybe<WpMenuItemLinkable>;
		readonly node: WpMenuItemLinkable;
		readonly previous: Maybe<WpMenuItemLinkable>;
	};

	type WpMenuItemLinkableFieldsEnum =
		| 'children'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'databaseId'
		| 'id'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'isContentNode'
		| 'isTermNode'
		| 'nodeType'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id'
		| 'uri';

	type WpMenuItemLinkableFilterInput = {
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly databaseId: InputMaybe<IntQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly isContentNode: InputMaybe<BooleanQueryOperatorInput>;
		readonly isTermNode: InputMaybe<BooleanQueryOperatorInput>;
		readonly nodeType: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly uri: InputMaybe<StringQueryOperatorInput>;
	};

	type WpMenuItemLinkableGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpMenuItemLinkableEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<WpMenuItemLinkableGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpMenuItemLinkable>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpMenuItemLinkableGroupConnection_distinctArgs = {
		field: WpMenuItemLinkableFieldsEnum;
	};

	type WpMenuItemLinkableGroupConnection_groupArgs = {
		field: WpMenuItemLinkableFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpMenuItemLinkableGroupConnection_maxArgs = {
		field: WpMenuItemLinkableFieldsEnum;
	};

	type WpMenuItemLinkableGroupConnection_minArgs = {
		field: WpMenuItemLinkableFieldsEnum;
	};

	type WpMenuItemLinkableGroupConnection_sumArgs = {
		field: WpMenuItemLinkableFieldsEnum;
	};

	type WpMenuItemLinkableSortInput = {
		readonly fields: InputMaybe<
			ReadonlyArray<InputMaybe<WpMenuItemLinkableFieldsEnum>>
		>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	type WpMenuItemSortInput = {
		readonly fields: InputMaybe<
			ReadonlyArray<InputMaybe<WpMenuItemFieldsEnum>>
		>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	/** Connection between the MenuItem type and the Menu type */
	type WpMenuItemToMenuConnectionEdgeType = WpEdgeType &
		WpMenuConnectionEdgeType &
		WpOneToOneConnectionType & {
			/** The node of the connection, without the edges */
			readonly node: WpMenu;
		};

	type WpMenuItemToMenuConnectionEdgeTypeFilterInput = {
		readonly node: InputMaybe<WpMenuFilterInput>;
	};

	/** Connection between the MenuItem type and the MenuItem type */
	type WpMenuItemToMenuItemConnectionType = WpConnectionType &
		WpMenuItemConnectionType & {
			/** The nodes of the connection, without the edges */
			readonly nodes: ReadonlyArray<WpMenuItem>;
		};

	type WpMenuItemToMenuItemConnectionTypeFilterInput = {
		readonly nodes: InputMaybe<WpMenuItemFilterListInput>;
	};

	/** Connection between the MenuItem type and the MenuItemLinkable type */
	type WpMenuItemToMenuItemLinkableConnectionEdgeType = WpEdgeType &
		WpMenuItemLinkableConnectionEdgeType &
		WpOneToOneConnectionType & {
			/** The node of the connection, without the edges */
			readonly node: WpMenuItemLinkable;
		};

	type WpMenuItemToMenuItemLinkableConnectionEdgeTypeFilterInput = {
		readonly node: InputMaybe<WpMenuItemLinkableFilterInput>;
	};

	/** Registered menu locations */
	type WpMenuLocationEnum = 'EMPTY';

	type WpMenuLocationEnumQueryOperatorInput = {
		readonly eq: InputMaybe<WpMenuLocationEnum>;
		readonly in: InputMaybe<ReadonlyArray<InputMaybe<WpMenuLocationEnum>>>;
		readonly ne: InputMaybe<WpMenuLocationEnum>;
		readonly nin: InputMaybe<ReadonlyArray<InputMaybe<WpMenuLocationEnum>>>;
	};

	type WpMenuSortInput = {
		readonly fields: InputMaybe<ReadonlyArray<InputMaybe<WpMenuFieldsEnum>>>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	/** Connection between the Menu type and the MenuItem type */
	type WpMenuToMenuItemConnectionType = WpConnectionType &
		WpMenuItemConnectionType & {
			/** The nodes of the connection, without the edges */
			readonly nodes: ReadonlyArray<WpMenuItem>;
		};

	type WpMenuToMenuItemConnectionTypeFilterInput = {
		readonly nodes: InputMaybe<WpMenuItemFilterListInput>;
	};

	type WpNode = {
		/** The globally unique ID for the object */
		readonly id: Scalars['ID'];
	};

	type WpNodeWithAuthor = {
		/** Connection between the NodeWithAuthor type and the User type */
		readonly author: Maybe<WpNodeWithAuthorToUserConnectionEdgeType>;
		/** The database identifier of the author of the node */
		readonly authorDatabaseId: Maybe<Scalars['Int']>;
		/** The globally unique identifier of the author of the node */
		readonly authorId: Maybe<Scalars['ID']>;
		readonly children: ReadonlyArray<Node>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly nodeType: Maybe<Scalars['String']>;
		readonly parent: Maybe<Node>;
	};

	type WpNodeWithAuthorConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpNodeWithAuthorEdge>;
		readonly group: ReadonlyArray<WpNodeWithAuthorGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpNodeWithAuthor>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpNodeWithAuthorConnection_distinctArgs = {
		field: WpNodeWithAuthorFieldsEnum;
	};

	type WpNodeWithAuthorConnection_groupArgs = {
		field: WpNodeWithAuthorFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpNodeWithAuthorConnection_maxArgs = {
		field: WpNodeWithAuthorFieldsEnum;
	};

	type WpNodeWithAuthorConnection_minArgs = {
		field: WpNodeWithAuthorFieldsEnum;
	};

	type WpNodeWithAuthorConnection_sumArgs = {
		field: WpNodeWithAuthorFieldsEnum;
	};

	type WpNodeWithAuthorEdge = {
		readonly next: Maybe<WpNodeWithAuthor>;
		readonly node: WpNodeWithAuthor;
		readonly previous: Maybe<WpNodeWithAuthor>;
	};

	type WpNodeWithAuthorFieldsEnum =
		| 'authorDatabaseId'
		| 'authorId'
		| 'author.node.avatar.default'
		| 'author.node.avatar.extraAttr'
		| 'author.node.avatar.forceDefault'
		| 'author.node.avatar.foundAvatar'
		| 'author.node.avatar.height'
		| 'author.node.avatar.rating'
		| 'author.node.avatar.scheme'
		| 'author.node.avatar.size'
		| 'author.node.avatar.url'
		| 'author.node.avatar.width'
		| 'author.node.capKey'
		| 'author.node.capabilities'
		| 'author.node.children'
		| 'author.node.children.children'
		| 'author.node.children.id'
		| 'author.node.comments.nodes'
		| 'author.node.databaseId'
		| 'author.node.description'
		| 'author.node.email'
		| 'author.node.extraCapabilities'
		| 'author.node.firstName'
		| 'author.node.id'
		| 'author.node.internal.content'
		| 'author.node.internal.contentDigest'
		| 'author.node.internal.contentFilePath'
		| 'author.node.internal.description'
		| 'author.node.internal.fieldOwners'
		| 'author.node.internal.ignoreType'
		| 'author.node.internal.mediaType'
		| 'author.node.internal.owner'
		| 'author.node.internal.type'
		| 'author.node.isContentNode'
		| 'author.node.isTermNode'
		| 'author.node.lastName'
		| 'author.node.locale'
		| 'author.node.name'
		| 'author.node.nicename'
		| 'author.node.nickname'
		| 'author.node.nodeType'
		| 'author.node.pages.nodes'
		| 'author.node.parent.children'
		| 'author.node.parent.id'
		| 'author.node.posts.nodes'
		| 'author.node.registeredDate'
		| 'author.node.roles.nodes'
		| 'author.node.slug'
		| 'author.node.uri'
		| 'author.node.url'
		| 'author.node.username'
		| 'children'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'id'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'nodeType'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id';

	type WpNodeWithAuthorFilterInput = {
		readonly author: InputMaybe<WpNodeWithAuthorToUserConnectionEdgeTypeFilterInput>;
		readonly authorDatabaseId: InputMaybe<IntQueryOperatorInput>;
		readonly authorId: InputMaybe<IDQueryOperatorInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly nodeType: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
	};

	type WpNodeWithAuthorGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpNodeWithAuthorEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<WpNodeWithAuthorGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpNodeWithAuthor>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpNodeWithAuthorGroupConnection_distinctArgs = {
		field: WpNodeWithAuthorFieldsEnum;
	};

	type WpNodeWithAuthorGroupConnection_groupArgs = {
		field: WpNodeWithAuthorFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpNodeWithAuthorGroupConnection_maxArgs = {
		field: WpNodeWithAuthorFieldsEnum;
	};

	type WpNodeWithAuthorGroupConnection_minArgs = {
		field: WpNodeWithAuthorFieldsEnum;
	};

	type WpNodeWithAuthorGroupConnection_sumArgs = {
		field: WpNodeWithAuthorFieldsEnum;
	};

	type WpNodeWithAuthorSortInput = {
		readonly fields: InputMaybe<
			ReadonlyArray<InputMaybe<WpNodeWithAuthorFieldsEnum>>
		>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	/** Connection between the NodeWithAuthor type and the User type */
	type WpNodeWithAuthorToUserConnectionEdgeType = WpEdgeType &
		WpOneToOneConnectionType &
		WpUserConnectionEdgeType & {
			/** The node of the connection, without the edges */
			readonly node: WpUser;
		};

	type WpNodeWithAuthorToUserConnectionEdgeTypeFilterInput = {
		readonly node: InputMaybe<WpUserFilterInput>;
	};

	type WpNodeWithComments = {
		readonly children: ReadonlyArray<Node>;
		/** The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility. */
		readonly commentCount: Maybe<Scalars['Int']>;
		/** Whether the comments are open or closed for this particular post. */
		readonly commentStatus: Maybe<Scalars['String']>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly nodeType: Maybe<Scalars['String']>;
		readonly parent: Maybe<Node>;
	};

	type WpNodeWithCommentsConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpNodeWithCommentsEdge>;
		readonly group: ReadonlyArray<WpNodeWithCommentsGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpNodeWithComments>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpNodeWithCommentsConnection_distinctArgs = {
		field: WpNodeWithCommentsFieldsEnum;
	};

	type WpNodeWithCommentsConnection_groupArgs = {
		field: WpNodeWithCommentsFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpNodeWithCommentsConnection_maxArgs = {
		field: WpNodeWithCommentsFieldsEnum;
	};

	type WpNodeWithCommentsConnection_minArgs = {
		field: WpNodeWithCommentsFieldsEnum;
	};

	type WpNodeWithCommentsConnection_sumArgs = {
		field: WpNodeWithCommentsFieldsEnum;
	};

	type WpNodeWithCommentsEdge = {
		readonly next: Maybe<WpNodeWithComments>;
		readonly node: WpNodeWithComments;
		readonly previous: Maybe<WpNodeWithComments>;
	};

	type WpNodeWithCommentsFieldsEnum =
		| 'children'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'commentCount'
		| 'commentStatus'
		| 'id'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'nodeType'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id';

	type WpNodeWithCommentsFilterInput = {
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly commentCount: InputMaybe<IntQueryOperatorInput>;
		readonly commentStatus: InputMaybe<StringQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly nodeType: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
	};

	type WpNodeWithCommentsGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpNodeWithCommentsEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<WpNodeWithCommentsGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpNodeWithComments>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpNodeWithCommentsGroupConnection_distinctArgs = {
		field: WpNodeWithCommentsFieldsEnum;
	};

	type WpNodeWithCommentsGroupConnection_groupArgs = {
		field: WpNodeWithCommentsFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpNodeWithCommentsGroupConnection_maxArgs = {
		field: WpNodeWithCommentsFieldsEnum;
	};

	type WpNodeWithCommentsGroupConnection_minArgs = {
		field: WpNodeWithCommentsFieldsEnum;
	};

	type WpNodeWithCommentsGroupConnection_sumArgs = {
		field: WpNodeWithCommentsFieldsEnum;
	};

	type WpNodeWithCommentsSortInput = {
		readonly fields: InputMaybe<
			ReadonlyArray<InputMaybe<WpNodeWithCommentsFieldsEnum>>
		>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	type WpNodeWithContentEditor = {
		readonly children: ReadonlyArray<Node>;
		/** The content of the post. */
		readonly content: Maybe<Scalars['String']>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly nodeType: Maybe<Scalars['String']>;
		readonly parent: Maybe<Node>;
	};

	type WpNodeWithContentEditorConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpNodeWithContentEditorEdge>;
		readonly group: ReadonlyArray<WpNodeWithContentEditorGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpNodeWithContentEditor>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpNodeWithContentEditorConnection_distinctArgs = {
		field: WpNodeWithContentEditorFieldsEnum;
	};

	type WpNodeWithContentEditorConnection_groupArgs = {
		field: WpNodeWithContentEditorFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpNodeWithContentEditorConnection_maxArgs = {
		field: WpNodeWithContentEditorFieldsEnum;
	};

	type WpNodeWithContentEditorConnection_minArgs = {
		field: WpNodeWithContentEditorFieldsEnum;
	};

	type WpNodeWithContentEditorConnection_sumArgs = {
		field: WpNodeWithContentEditorFieldsEnum;
	};

	type WpNodeWithContentEditorEdge = {
		readonly next: Maybe<WpNodeWithContentEditor>;
		readonly node: WpNodeWithContentEditor;
		readonly previous: Maybe<WpNodeWithContentEditor>;
	};

	type WpNodeWithContentEditorFieldsEnum =
		| 'children'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'content'
		| 'id'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'nodeType'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id';

	type WpNodeWithContentEditorFilterInput = {
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly content: InputMaybe<StringQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly nodeType: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
	};

	type WpNodeWithContentEditorGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpNodeWithContentEditorEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<WpNodeWithContentEditorGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpNodeWithContentEditor>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpNodeWithContentEditorGroupConnection_distinctArgs = {
		field: WpNodeWithContentEditorFieldsEnum;
	};

	type WpNodeWithContentEditorGroupConnection_groupArgs = {
		field: WpNodeWithContentEditorFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpNodeWithContentEditorGroupConnection_maxArgs = {
		field: WpNodeWithContentEditorFieldsEnum;
	};

	type WpNodeWithContentEditorGroupConnection_minArgs = {
		field: WpNodeWithContentEditorFieldsEnum;
	};

	type WpNodeWithContentEditorGroupConnection_sumArgs = {
		field: WpNodeWithContentEditorFieldsEnum;
	};

	type WpNodeWithContentEditorSortInput = {
		readonly fields: InputMaybe<
			ReadonlyArray<InputMaybe<WpNodeWithContentEditorFieldsEnum>>
		>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	type WpNodeWithExcerpt = {
		readonly children: ReadonlyArray<Node>;
		/** The excerpt of the post. */
		readonly excerpt: Maybe<Scalars['String']>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly nodeType: Maybe<Scalars['String']>;
		readonly parent: Maybe<Node>;
	};

	type WpNodeWithExcerptConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpNodeWithExcerptEdge>;
		readonly group: ReadonlyArray<WpNodeWithExcerptGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpNodeWithExcerpt>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpNodeWithExcerptConnection_distinctArgs = {
		field: WpNodeWithExcerptFieldsEnum;
	};

	type WpNodeWithExcerptConnection_groupArgs = {
		field: WpNodeWithExcerptFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpNodeWithExcerptConnection_maxArgs = {
		field: WpNodeWithExcerptFieldsEnum;
	};

	type WpNodeWithExcerptConnection_minArgs = {
		field: WpNodeWithExcerptFieldsEnum;
	};

	type WpNodeWithExcerptConnection_sumArgs = {
		field: WpNodeWithExcerptFieldsEnum;
	};

	type WpNodeWithExcerptEdge = {
		readonly next: Maybe<WpNodeWithExcerpt>;
		readonly node: WpNodeWithExcerpt;
		readonly previous: Maybe<WpNodeWithExcerpt>;
	};

	type WpNodeWithExcerptFieldsEnum =
		| 'children'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'excerpt'
		| 'id'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'nodeType'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id';

	type WpNodeWithExcerptFilterInput = {
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly excerpt: InputMaybe<StringQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly nodeType: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
	};

	type WpNodeWithExcerptGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpNodeWithExcerptEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<WpNodeWithExcerptGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpNodeWithExcerpt>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpNodeWithExcerptGroupConnection_distinctArgs = {
		field: WpNodeWithExcerptFieldsEnum;
	};

	type WpNodeWithExcerptGroupConnection_groupArgs = {
		field: WpNodeWithExcerptFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpNodeWithExcerptGroupConnection_maxArgs = {
		field: WpNodeWithExcerptFieldsEnum;
	};

	type WpNodeWithExcerptGroupConnection_minArgs = {
		field: WpNodeWithExcerptFieldsEnum;
	};

	type WpNodeWithExcerptGroupConnection_sumArgs = {
		field: WpNodeWithExcerptFieldsEnum;
	};

	type WpNodeWithExcerptSortInput = {
		readonly fields: InputMaybe<
			ReadonlyArray<InputMaybe<WpNodeWithExcerptFieldsEnum>>
		>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	type WpNodeWithFeaturedImage = {
		readonly children: ReadonlyArray<Node>;
		/** Connection between the NodeWithFeaturedImage type and the MediaItem type */
		readonly featuredImage: Maybe<WpNodeWithFeaturedImageToMediaItemConnectionEdgeType>;
		/** The database identifier for the featured image node assigned to the content node */
		readonly featuredImageDatabaseId: Maybe<Scalars['Int']>;
		/** Globally unique ID of the featured image assigned to the node */
		readonly featuredImageId: Maybe<Scalars['ID']>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly nodeType: Maybe<Scalars['String']>;
		readonly parent: Maybe<Node>;
	};

	type WpNodeWithFeaturedImageConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpNodeWithFeaturedImageEdge>;
		readonly group: ReadonlyArray<WpNodeWithFeaturedImageGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpNodeWithFeaturedImage>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpNodeWithFeaturedImageConnection_distinctArgs = {
		field: WpNodeWithFeaturedImageFieldsEnum;
	};

	type WpNodeWithFeaturedImageConnection_groupArgs = {
		field: WpNodeWithFeaturedImageFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpNodeWithFeaturedImageConnection_maxArgs = {
		field: WpNodeWithFeaturedImageFieldsEnum;
	};

	type WpNodeWithFeaturedImageConnection_minArgs = {
		field: WpNodeWithFeaturedImageFieldsEnum;
	};

	type WpNodeWithFeaturedImageConnection_sumArgs = {
		field: WpNodeWithFeaturedImageFieldsEnum;
	};

	type WpNodeWithFeaturedImageEdge = {
		readonly next: Maybe<WpNodeWithFeaturedImage>;
		readonly node: WpNodeWithFeaturedImage;
		readonly previous: Maybe<WpNodeWithFeaturedImage>;
	};

	type WpNodeWithFeaturedImageFieldsEnum =
		| 'children'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'featuredImageDatabaseId'
		| 'featuredImageId'
		| 'featuredImage.node.altText'
		| 'featuredImage.node.ancestors.nodes'
		| 'featuredImage.node.authorDatabaseId'
		| 'featuredImage.node.authorId'
		| 'featuredImage.node.caption'
		| 'featuredImage.node.children'
		| 'featuredImage.node.children.children'
		| 'featuredImage.node.children.id'
		| 'featuredImage.node.commentCount'
		| 'featuredImage.node.commentStatus'
		| 'featuredImage.node.comments.nodes'
		| 'featuredImage.node.contentTypeName'
		| 'featuredImage.node.databaseId'
		| 'featuredImage.node.date'
		| 'featuredImage.node.dateGmt'
		| 'featuredImage.node.description'
		| 'featuredImage.node.desiredSlug'
		| 'featuredImage.node.enclosure'
		| 'featuredImage.node.fileSize'
		| 'featuredImage.node.filename'
		| 'featuredImage.node.filesize'
		| 'featuredImage.node.gatsbyImage'
		| 'featuredImage.node.guid'
		| 'featuredImage.node.height'
		| 'featuredImage.node.id'
		| 'featuredImage.node.internal.content'
		| 'featuredImage.node.internal.contentDigest'
		| 'featuredImage.node.internal.contentFilePath'
		| 'featuredImage.node.internal.description'
		| 'featuredImage.node.internal.fieldOwners'
		| 'featuredImage.node.internal.ignoreType'
		| 'featuredImage.node.internal.mediaType'
		| 'featuredImage.node.internal.owner'
		| 'featuredImage.node.internal.type'
		| 'featuredImage.node.isContentNode'
		| 'featuredImage.node.isTermNode'
		| 'featuredImage.node.link'
		| 'featuredImage.node.localFile.absolutePath'
		| 'featuredImage.node.localFile.accessTime'
		| 'featuredImage.node.localFile.atime'
		| 'featuredImage.node.localFile.atimeMs'
		| 'featuredImage.node.localFile.base'
		| 'featuredImage.node.localFile.birthTime'
		| 'featuredImage.node.localFile.birthtime'
		| 'featuredImage.node.localFile.birthtimeMs'
		| 'featuredImage.node.localFile.blksize'
		| 'featuredImage.node.localFile.blocks'
		| 'featuredImage.node.localFile.changeTime'
		| 'featuredImage.node.localFile.children'
		| 'featuredImage.node.localFile.childrenImageSharp'
		| 'featuredImage.node.localFile.ctime'
		| 'featuredImage.node.localFile.ctimeMs'
		| 'featuredImage.node.localFile.dev'
		| 'featuredImage.node.localFile.dir'
		| 'featuredImage.node.localFile.ext'
		| 'featuredImage.node.localFile.extension'
		| 'featuredImage.node.localFile.gid'
		| 'featuredImage.node.localFile.id'
		| 'featuredImage.node.localFile.ino'
		| 'featuredImage.node.localFile.mode'
		| 'featuredImage.node.localFile.modifiedTime'
		| 'featuredImage.node.localFile.mtime'
		| 'featuredImage.node.localFile.mtimeMs'
		| 'featuredImage.node.localFile.name'
		| 'featuredImage.node.localFile.nlink'
		| 'featuredImage.node.localFile.prettySize'
		| 'featuredImage.node.localFile.publicURL'
		| 'featuredImage.node.localFile.rdev'
		| 'featuredImage.node.localFile.relativeDirectory'
		| 'featuredImage.node.localFile.relativePath'
		| 'featuredImage.node.localFile.root'
		| 'featuredImage.node.localFile.size'
		| 'featuredImage.node.localFile.sourceInstanceName'
		| 'featuredImage.node.localFile.uid'
		| 'featuredImage.node.localFile.url'
		| 'featuredImage.node.mediaDetails.file'
		| 'featuredImage.node.mediaDetails.height'
		| 'featuredImage.node.mediaDetails.sizes'
		| 'featuredImage.node.mediaDetails.width'
		| 'featuredImage.node.mediaItemUrl'
		| 'featuredImage.node.mediaType'
		| 'featuredImage.node.mimeType'
		| 'featuredImage.node.modified'
		| 'featuredImage.node.modifiedGmt'
		| 'featuredImage.node.nodeType'
		| 'featuredImage.node.parentDatabaseId'
		| 'featuredImage.node.parentId'
		| 'featuredImage.node.parent.children'
		| 'featuredImage.node.parent.id'
		| 'featuredImage.node.publicUrl'
		| 'featuredImage.node.resize.height'
		| 'featuredImage.node.resize.src'
		| 'featuredImage.node.resize.width'
		| 'featuredImage.node.sizes'
		| 'featuredImage.node.slug'
		| 'featuredImage.node.sourceUrl'
		| 'featuredImage.node.srcSet'
		| 'featuredImage.node.status'
		| 'featuredImage.node.template.templateName'
		| 'featuredImage.node.title'
		| 'featuredImage.node.uri'
		| 'featuredImage.node.width'
		| 'featuredImage.node.wpChildren.nodes'
		| 'id'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'nodeType'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id';

	type WpNodeWithFeaturedImageFilterInput = {
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly featuredImage: InputMaybe<WpNodeWithFeaturedImageToMediaItemConnectionEdgeTypeFilterInput>;
		readonly featuredImageDatabaseId: InputMaybe<IntQueryOperatorInput>;
		readonly featuredImageId: InputMaybe<IDQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly nodeType: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
	};

	type WpNodeWithFeaturedImageGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpNodeWithFeaturedImageEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<WpNodeWithFeaturedImageGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpNodeWithFeaturedImage>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpNodeWithFeaturedImageGroupConnection_distinctArgs = {
		field: WpNodeWithFeaturedImageFieldsEnum;
	};

	type WpNodeWithFeaturedImageGroupConnection_groupArgs = {
		field: WpNodeWithFeaturedImageFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpNodeWithFeaturedImageGroupConnection_maxArgs = {
		field: WpNodeWithFeaturedImageFieldsEnum;
	};

	type WpNodeWithFeaturedImageGroupConnection_minArgs = {
		field: WpNodeWithFeaturedImageFieldsEnum;
	};

	type WpNodeWithFeaturedImageGroupConnection_sumArgs = {
		field: WpNodeWithFeaturedImageFieldsEnum;
	};

	type WpNodeWithFeaturedImageSortInput = {
		readonly fields: InputMaybe<
			ReadonlyArray<InputMaybe<WpNodeWithFeaturedImageFieldsEnum>>
		>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	/** Connection between the NodeWithFeaturedImage type and the MediaItem type */
	type WpNodeWithFeaturedImageToMediaItemConnectionEdgeType = WpEdgeType &
		WpMediaItemConnectionEdgeType &
		WpOneToOneConnectionType & {
			/** The node of the connection, without the edges */
			readonly node: WpMediaItem;
		};

	type WpNodeWithFeaturedImageToMediaItemConnectionEdgeTypeFilterInput = {
		readonly node: InputMaybe<WpMediaItemFilterInput>;
	};

	type WpNodeWithPageAttributes = {
		readonly children: ReadonlyArray<Node>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		/** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
		readonly menuOrder: Maybe<Scalars['Int']>;
		readonly nodeType: Maybe<Scalars['String']>;
		readonly parent: Maybe<Node>;
	};

	type WpNodeWithPageAttributesConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpNodeWithPageAttributesEdge>;
		readonly group: ReadonlyArray<WpNodeWithPageAttributesGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpNodeWithPageAttributes>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpNodeWithPageAttributesConnection_distinctArgs = {
		field: WpNodeWithPageAttributesFieldsEnum;
	};

	type WpNodeWithPageAttributesConnection_groupArgs = {
		field: WpNodeWithPageAttributesFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpNodeWithPageAttributesConnection_maxArgs = {
		field: WpNodeWithPageAttributesFieldsEnum;
	};

	type WpNodeWithPageAttributesConnection_minArgs = {
		field: WpNodeWithPageAttributesFieldsEnum;
	};

	type WpNodeWithPageAttributesConnection_sumArgs = {
		field: WpNodeWithPageAttributesFieldsEnum;
	};

	type WpNodeWithPageAttributesEdge = {
		readonly next: Maybe<WpNodeWithPageAttributes>;
		readonly node: WpNodeWithPageAttributes;
		readonly previous: Maybe<WpNodeWithPageAttributes>;
	};

	type WpNodeWithPageAttributesFieldsEnum =
		| 'children'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'id'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'menuOrder'
		| 'nodeType'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id';

	type WpNodeWithPageAttributesFilterInput = {
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly menuOrder: InputMaybe<IntQueryOperatorInput>;
		readonly nodeType: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
	};

	type WpNodeWithPageAttributesGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpNodeWithPageAttributesEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<WpNodeWithPageAttributesGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpNodeWithPageAttributes>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpNodeWithPageAttributesGroupConnection_distinctArgs = {
		field: WpNodeWithPageAttributesFieldsEnum;
	};

	type WpNodeWithPageAttributesGroupConnection_groupArgs = {
		field: WpNodeWithPageAttributesFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpNodeWithPageAttributesGroupConnection_maxArgs = {
		field: WpNodeWithPageAttributesFieldsEnum;
	};

	type WpNodeWithPageAttributesGroupConnection_minArgs = {
		field: WpNodeWithPageAttributesFieldsEnum;
	};

	type WpNodeWithPageAttributesGroupConnection_sumArgs = {
		field: WpNodeWithPageAttributesFieldsEnum;
	};

	type WpNodeWithPageAttributesSortInput = {
		readonly fields: InputMaybe<
			ReadonlyArray<InputMaybe<WpNodeWithPageAttributesFieldsEnum>>
		>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	type WpNodeWithRevisions = {
		readonly children: ReadonlyArray<Node>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		/** True if the node is a revision of another node */
		readonly isRevision: Maybe<Scalars['Boolean']>;
		readonly nodeType: Maybe<Scalars['String']>;
		readonly parent: Maybe<Node>;
	};

	type WpNodeWithRevisionsConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpNodeWithRevisionsEdge>;
		readonly group: ReadonlyArray<WpNodeWithRevisionsGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpNodeWithRevisions>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpNodeWithRevisionsConnection_distinctArgs = {
		field: WpNodeWithRevisionsFieldsEnum;
	};

	type WpNodeWithRevisionsConnection_groupArgs = {
		field: WpNodeWithRevisionsFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpNodeWithRevisionsConnection_maxArgs = {
		field: WpNodeWithRevisionsFieldsEnum;
	};

	type WpNodeWithRevisionsConnection_minArgs = {
		field: WpNodeWithRevisionsFieldsEnum;
	};

	type WpNodeWithRevisionsConnection_sumArgs = {
		field: WpNodeWithRevisionsFieldsEnum;
	};

	type WpNodeWithRevisionsEdge = {
		readonly next: Maybe<WpNodeWithRevisions>;
		readonly node: WpNodeWithRevisions;
		readonly previous: Maybe<WpNodeWithRevisions>;
	};

	type WpNodeWithRevisionsFieldsEnum =
		| 'children'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'id'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'isRevision'
		| 'nodeType'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id';

	type WpNodeWithRevisionsFilterInput = {
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly isRevision: InputMaybe<BooleanQueryOperatorInput>;
		readonly nodeType: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
	};

	type WpNodeWithRevisionsGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpNodeWithRevisionsEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<WpNodeWithRevisionsGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpNodeWithRevisions>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpNodeWithRevisionsGroupConnection_distinctArgs = {
		field: WpNodeWithRevisionsFieldsEnum;
	};

	type WpNodeWithRevisionsGroupConnection_groupArgs = {
		field: WpNodeWithRevisionsFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpNodeWithRevisionsGroupConnection_maxArgs = {
		field: WpNodeWithRevisionsFieldsEnum;
	};

	type WpNodeWithRevisionsGroupConnection_minArgs = {
		field: WpNodeWithRevisionsFieldsEnum;
	};

	type WpNodeWithRevisionsGroupConnection_sumArgs = {
		field: WpNodeWithRevisionsFieldsEnum;
	};

	type WpNodeWithRevisionsSortInput = {
		readonly fields: InputMaybe<
			ReadonlyArray<InputMaybe<WpNodeWithRevisionsFieldsEnum>>
		>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	/** Connection between the NodeWithRevisions type and the ContentNode type */
	type WpNodeWithRevisionsToContentNodeConnectionEdgeType =
		WpContentNodeConnectionEdgeType &
			WpEdgeType &
			WpOneToOneConnectionType & {
				/** The node of the connection, without the edges */
				readonly node: WpContentNode;
			};

	type WpNodeWithTemplate = {
		readonly children: ReadonlyArray<Node>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly nodeType: Maybe<Scalars['String']>;
		readonly parent: Maybe<Node>;
		/** The template assigned to the node */
		readonly template: Maybe<WpContentTemplate>;
	};

	type WpNodeWithTemplateConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpNodeWithTemplateEdge>;
		readonly group: ReadonlyArray<WpNodeWithTemplateGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpNodeWithTemplate>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpNodeWithTemplateConnection_distinctArgs = {
		field: WpNodeWithTemplateFieldsEnum;
	};

	type WpNodeWithTemplateConnection_groupArgs = {
		field: WpNodeWithTemplateFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpNodeWithTemplateConnection_maxArgs = {
		field: WpNodeWithTemplateFieldsEnum;
	};

	type WpNodeWithTemplateConnection_minArgs = {
		field: WpNodeWithTemplateFieldsEnum;
	};

	type WpNodeWithTemplateConnection_sumArgs = {
		field: WpNodeWithTemplateFieldsEnum;
	};

	type WpNodeWithTemplateEdge = {
		readonly next: Maybe<WpNodeWithTemplate>;
		readonly node: WpNodeWithTemplate;
		readonly previous: Maybe<WpNodeWithTemplate>;
	};

	type WpNodeWithTemplateFieldsEnum =
		| 'children'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'id'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'nodeType'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id'
		| 'template.templateName';

	type WpNodeWithTemplateFilterInput = {
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly nodeType: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly template: InputMaybe<WpContentTemplateFilterInput>;
	};

	type WpNodeWithTemplateGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpNodeWithTemplateEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<WpNodeWithTemplateGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpNodeWithTemplate>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpNodeWithTemplateGroupConnection_distinctArgs = {
		field: WpNodeWithTemplateFieldsEnum;
	};

	type WpNodeWithTemplateGroupConnection_groupArgs = {
		field: WpNodeWithTemplateFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpNodeWithTemplateGroupConnection_maxArgs = {
		field: WpNodeWithTemplateFieldsEnum;
	};

	type WpNodeWithTemplateGroupConnection_minArgs = {
		field: WpNodeWithTemplateFieldsEnum;
	};

	type WpNodeWithTemplateGroupConnection_sumArgs = {
		field: WpNodeWithTemplateFieldsEnum;
	};

	type WpNodeWithTemplateSortInput = {
		readonly fields: InputMaybe<
			ReadonlyArray<InputMaybe<WpNodeWithTemplateFieldsEnum>>
		>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	type WpNodeWithTitle = {
		readonly children: ReadonlyArray<Node>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly nodeType: Maybe<Scalars['String']>;
		readonly parent: Maybe<Node>;
		/** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
		readonly title: Maybe<Scalars['String']>;
	};

	type WpNodeWithTitleConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpNodeWithTitleEdge>;
		readonly group: ReadonlyArray<WpNodeWithTitleGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpNodeWithTitle>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpNodeWithTitleConnection_distinctArgs = {
		field: WpNodeWithTitleFieldsEnum;
	};

	type WpNodeWithTitleConnection_groupArgs = {
		field: WpNodeWithTitleFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpNodeWithTitleConnection_maxArgs = {
		field: WpNodeWithTitleFieldsEnum;
	};

	type WpNodeWithTitleConnection_minArgs = {
		field: WpNodeWithTitleFieldsEnum;
	};

	type WpNodeWithTitleConnection_sumArgs = {
		field: WpNodeWithTitleFieldsEnum;
	};

	type WpNodeWithTitleEdge = {
		readonly next: Maybe<WpNodeWithTitle>;
		readonly node: WpNodeWithTitle;
		readonly previous: Maybe<WpNodeWithTitle>;
	};

	type WpNodeWithTitleFieldsEnum =
		| 'children'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'id'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'nodeType'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id'
		| 'title';

	type WpNodeWithTitleFilterInput = {
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly nodeType: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly title: InputMaybe<StringQueryOperatorInput>;
	};

	type WpNodeWithTitleGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpNodeWithTitleEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<WpNodeWithTitleGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpNodeWithTitle>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpNodeWithTitleGroupConnection_distinctArgs = {
		field: WpNodeWithTitleFieldsEnum;
	};

	type WpNodeWithTitleGroupConnection_groupArgs = {
		field: WpNodeWithTitleFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpNodeWithTitleGroupConnection_maxArgs = {
		field: WpNodeWithTitleFieldsEnum;
	};

	type WpNodeWithTitleGroupConnection_minArgs = {
		field: WpNodeWithTitleFieldsEnum;
	};

	type WpNodeWithTitleGroupConnection_sumArgs = {
		field: WpNodeWithTitleFieldsEnum;
	};

	type WpNodeWithTitleSortInput = {
		readonly fields: InputMaybe<
			ReadonlyArray<InputMaybe<WpNodeWithTitleFieldsEnum>>
		>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	type WpNodeWithTrackbacks = {
		readonly children: ReadonlyArray<Node>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly nodeType: Maybe<Scalars['String']>;
		readonly parent: Maybe<Node>;
		/** Whether the pings are open or closed for this particular post. */
		readonly pingStatus: Maybe<Scalars['String']>;
		/** URLs that have been pinged. */
		readonly pinged: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
		/** URLs queued to be pinged. */
		readonly toPing: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
	};

	type WpNodeWithTrackbacksConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpNodeWithTrackbacksEdge>;
		readonly group: ReadonlyArray<WpNodeWithTrackbacksGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpNodeWithTrackbacks>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpNodeWithTrackbacksConnection_distinctArgs = {
		field: WpNodeWithTrackbacksFieldsEnum;
	};

	type WpNodeWithTrackbacksConnection_groupArgs = {
		field: WpNodeWithTrackbacksFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpNodeWithTrackbacksConnection_maxArgs = {
		field: WpNodeWithTrackbacksFieldsEnum;
	};

	type WpNodeWithTrackbacksConnection_minArgs = {
		field: WpNodeWithTrackbacksFieldsEnum;
	};

	type WpNodeWithTrackbacksConnection_sumArgs = {
		field: WpNodeWithTrackbacksFieldsEnum;
	};

	type WpNodeWithTrackbacksEdge = {
		readonly next: Maybe<WpNodeWithTrackbacks>;
		readonly node: WpNodeWithTrackbacks;
		readonly previous: Maybe<WpNodeWithTrackbacks>;
	};

	type WpNodeWithTrackbacksFieldsEnum =
		| 'children'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'id'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'nodeType'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id'
		| 'pingStatus'
		| 'pinged'
		| 'toPing';

	type WpNodeWithTrackbacksFilterInput = {
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly nodeType: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly pingStatus: InputMaybe<StringQueryOperatorInput>;
		readonly pinged: InputMaybe<StringQueryOperatorInput>;
		readonly toPing: InputMaybe<StringQueryOperatorInput>;
	};

	type WpNodeWithTrackbacksGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpNodeWithTrackbacksEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<WpNodeWithTrackbacksGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpNodeWithTrackbacks>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpNodeWithTrackbacksGroupConnection_distinctArgs = {
		field: WpNodeWithTrackbacksFieldsEnum;
	};

	type WpNodeWithTrackbacksGroupConnection_groupArgs = {
		field: WpNodeWithTrackbacksFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpNodeWithTrackbacksGroupConnection_maxArgs = {
		field: WpNodeWithTrackbacksFieldsEnum;
	};

	type WpNodeWithTrackbacksGroupConnection_minArgs = {
		field: WpNodeWithTrackbacksFieldsEnum;
	};

	type WpNodeWithTrackbacksGroupConnection_sumArgs = {
		field: WpNodeWithTrackbacksFieldsEnum;
	};

	type WpNodeWithTrackbacksSortInput = {
		readonly fields: InputMaybe<
			ReadonlyArray<InputMaybe<WpNodeWithTrackbacksFieldsEnum>>
		>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	type WpOneToOneConnectionType = {
		/** The connected node */
		readonly node: WpNode;
	};

	/** The page type */
	type WpPage = Node &
		WpContentNode &
		WpDatabaseIdentifier &
		WpHierarchicalContentNode &
		WpHierarchicalNode &
		WpMenuItemLinkable &
		WpNode &
		WpNodeWithAuthor &
		WpNodeWithComments &
		WpNodeWithContentEditor &
		WpNodeWithFeaturedImage &
		WpNodeWithPageAttributes &
		WpNodeWithRevisions &
		WpNodeWithTemplate &
		WpNodeWithTitle &
		WpUniformResourceIdentifiable & {
			/** Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */
			readonly ancestors: Maybe<WpHierarchicalContentNodeToContentNodeAncestorsConnectionType>;
			/** Connection between the NodeWithAuthor type and the User type */
			readonly author: Maybe<WpNodeWithAuthorToUserConnectionEdgeType>;
			/** The database identifier of the author of the node */
			readonly authorDatabaseId: Maybe<Scalars['Int']>;
			/** The globally unique identifier of the author of the node */
			readonly authorId: Maybe<Scalars['ID']>;
			readonly children: ReadonlyArray<Node>;
			/** The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility. */
			readonly commentCount: Maybe<Scalars['Int']>;
			/** Whether the comments are open or closed for this particular post. */
			readonly commentStatus: Maybe<Scalars['String']>;
			/** Connection between the Page type and the Comment type */
			readonly comments: Maybe<WpPageToCommentConnectionType>;
			/** The content of the post. */
			readonly content: Maybe<Scalars['String']>;
			/** Connection between the ContentNode type and the ContentType type */
			readonly contentType: Maybe<WpContentNodeToContentTypeConnectionEdgeType>;
			/** The name of the Content Type the node belongs to */
			readonly contentTypeName: Scalars['String'];
			/** The unique identifier stored in the database */
			readonly databaseId: Scalars['Int'];
			/** Post publishing date. */
			readonly date: Maybe<Scalars['Date']>;
			/** The publishing date set in GMT. */
			readonly dateGmt: Maybe<Scalars['Date']>;
			/** The desired slug of the post */
			readonly desiredSlug: Maybe<Scalars['String']>;
			/** The RSS enclosure for the object */
			readonly enclosure: Maybe<Scalars['String']>;
			/** Connection between the NodeWithFeaturedImage type and the MediaItem type */
			readonly featuredImage: Maybe<WpNodeWithFeaturedImageToMediaItemConnectionEdgeType>;
			/** The database identifier for the featured image node assigned to the content node */
			readonly featuredImageDatabaseId: Maybe<Scalars['Int']>;
			/** Globally unique ID of the featured image assigned to the node */
			readonly featuredImageId: Maybe<Scalars['ID']>;
			/** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
			readonly guid: Maybe<Scalars['String']>;
			readonly id: Scalars['ID'];
			readonly internal: Internal;
			/** Whether the node is a Content Node */
			readonly isContentNode: Scalars['Boolean'];
			/** Whether this page is set to the static front page. */
			readonly isFrontPage: Scalars['Boolean'];
			/** Whether this page is set to the blog posts page. */
			readonly isPostsPage: Scalars['Boolean'];
			/** Whether this page is set to the privacy page. */
			readonly isPrivacyPage: Scalars['Boolean'];
			/** True if the node is a revision of another node */
			readonly isRevision: Maybe<Scalars['Boolean']>;
			/** Whether the node is a Term */
			readonly isTermNode: Scalars['Boolean'];
			/** The user that most recently edited the node */
			readonly lastEditedBy: Maybe<WpContentNodeToEditLastConnectionEdgeType>;
			/** The permalink of the post */
			readonly link: Maybe<Scalars['String']>;
			/** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
			readonly menuOrder: Maybe<Scalars['Int']>;
			/** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
			readonly modified: Maybe<Scalars['Date']>;
			/** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
			readonly modifiedGmt: Maybe<Scalars['Date']>;
			readonly nodeType: Maybe<Scalars['String']>;
			readonly parent: Maybe<Node>;
			/** Database id of the parent node */
			readonly parentDatabaseId: Maybe<Scalars['Int']>;
			/** The globally unique identifier of the parent node. */
			readonly parentId: Maybe<Scalars['ID']>;
			/** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
			readonly slug: Maybe<Scalars['String']>;
			/** The current status of the object */
			readonly status: Maybe<Scalars['String']>;
			/** The template assigned to a node of content */
			readonly template: Maybe<WpContentTemplate>;
			/** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
			readonly title: Maybe<Scalars['String']>;
			/** The unique resource identifier path */
			readonly uri: Maybe<Scalars['String']>;
			/** Connection between the HierarchicalContentNode type and the ContentNode type */
			readonly wpChildren: Maybe<WpHierarchicalContentNodeToContentNodeChildrenConnectionType>;
			/** The parent of the node. The parent object can be of various types */
			readonly wpParent: Maybe<WpHierarchicalContentNodeToParentContentNodeConnectionEdgeType>;
		};

	/** The page type */
	type WpPage_dateArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	/** The page type */
	type WpPage_dateGmtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	/** The page type */
	type WpPage_modifiedArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	/** The page type */
	type WpPage_modifiedGmtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type WpPageConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpPageEdge>;
		readonly group: ReadonlyArray<WpPageGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpPage>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpPageConnection_distinctArgs = {
		field: WpPageFieldsEnum;
	};

	type WpPageConnection_groupArgs = {
		field: WpPageFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpPageConnection_maxArgs = {
		field: WpPageFieldsEnum;
	};

	type WpPageConnection_minArgs = {
		field: WpPageFieldsEnum;
	};

	type WpPageConnection_sumArgs = {
		field: WpPageFieldsEnum;
	};

	type WpPageConnectionEdgeType = {
		/** The connected page Node */
		readonly node: WpPage;
	};

	type WpPageConnectionType = {
		/** A list of connected page Nodes */
		readonly nodes: ReadonlyArray<WpPage>;
	};

	type WpPageEdge = {
		readonly next: Maybe<WpPage>;
		readonly node: WpPage;
		readonly previous: Maybe<WpPage>;
	};

	type WpPageFieldsEnum =
		| 'ancestors.nodes'
		| 'ancestors.nodes.children'
		| 'ancestors.nodes.children.children'
		| 'ancestors.nodes.children.id'
		| 'ancestors.nodes.contentTypeName'
		| 'ancestors.nodes.databaseId'
		| 'ancestors.nodes.date'
		| 'ancestors.nodes.dateGmt'
		| 'ancestors.nodes.desiredSlug'
		| 'ancestors.nodes.enclosure'
		| 'ancestors.nodes.guid'
		| 'ancestors.nodes.id'
		| 'ancestors.nodes.internal.content'
		| 'ancestors.nodes.internal.contentDigest'
		| 'ancestors.nodes.internal.contentFilePath'
		| 'ancestors.nodes.internal.description'
		| 'ancestors.nodes.internal.fieldOwners'
		| 'ancestors.nodes.internal.ignoreType'
		| 'ancestors.nodes.internal.mediaType'
		| 'ancestors.nodes.internal.owner'
		| 'ancestors.nodes.internal.type'
		| 'ancestors.nodes.isContentNode'
		| 'ancestors.nodes.isTermNode'
		| 'ancestors.nodes.link'
		| 'ancestors.nodes.modified'
		| 'ancestors.nodes.modifiedGmt'
		| 'ancestors.nodes.nodeType'
		| 'ancestors.nodes.parent.children'
		| 'ancestors.nodes.parent.id'
		| 'ancestors.nodes.slug'
		| 'ancestors.nodes.status'
		| 'ancestors.nodes.template.templateName'
		| 'ancestors.nodes.uri'
		| 'authorDatabaseId'
		| 'authorId'
		| 'author.node.avatar.default'
		| 'author.node.avatar.extraAttr'
		| 'author.node.avatar.forceDefault'
		| 'author.node.avatar.foundAvatar'
		| 'author.node.avatar.height'
		| 'author.node.avatar.rating'
		| 'author.node.avatar.scheme'
		| 'author.node.avatar.size'
		| 'author.node.avatar.url'
		| 'author.node.avatar.width'
		| 'author.node.capKey'
		| 'author.node.capabilities'
		| 'author.node.children'
		| 'author.node.children.children'
		| 'author.node.children.id'
		| 'author.node.comments.nodes'
		| 'author.node.databaseId'
		| 'author.node.description'
		| 'author.node.email'
		| 'author.node.extraCapabilities'
		| 'author.node.firstName'
		| 'author.node.id'
		| 'author.node.internal.content'
		| 'author.node.internal.contentDigest'
		| 'author.node.internal.contentFilePath'
		| 'author.node.internal.description'
		| 'author.node.internal.fieldOwners'
		| 'author.node.internal.ignoreType'
		| 'author.node.internal.mediaType'
		| 'author.node.internal.owner'
		| 'author.node.internal.type'
		| 'author.node.isContentNode'
		| 'author.node.isTermNode'
		| 'author.node.lastName'
		| 'author.node.locale'
		| 'author.node.name'
		| 'author.node.nicename'
		| 'author.node.nickname'
		| 'author.node.nodeType'
		| 'author.node.pages.nodes'
		| 'author.node.parent.children'
		| 'author.node.parent.id'
		| 'author.node.posts.nodes'
		| 'author.node.registeredDate'
		| 'author.node.roles.nodes'
		| 'author.node.slug'
		| 'author.node.uri'
		| 'author.node.url'
		| 'author.node.username'
		| 'children'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'commentCount'
		| 'commentStatus'
		| 'comments.nodes'
		| 'comments.nodes.agent'
		| 'comments.nodes.authorIp'
		| 'comments.nodes.children'
		| 'comments.nodes.children.children'
		| 'comments.nodes.children.id'
		| 'comments.nodes.content'
		| 'comments.nodes.databaseId'
		| 'comments.nodes.date'
		| 'comments.nodes.dateGmt'
		| 'comments.nodes.id'
		| 'comments.nodes.internal.content'
		| 'comments.nodes.internal.contentDigest'
		| 'comments.nodes.internal.contentFilePath'
		| 'comments.nodes.internal.description'
		| 'comments.nodes.internal.fieldOwners'
		| 'comments.nodes.internal.ignoreType'
		| 'comments.nodes.internal.mediaType'
		| 'comments.nodes.internal.owner'
		| 'comments.nodes.internal.type'
		| 'comments.nodes.karma'
		| 'comments.nodes.nodeType'
		| 'comments.nodes.parentDatabaseId'
		| 'comments.nodes.parentId'
		| 'comments.nodes.parent.children'
		| 'comments.nodes.parent.id'
		| 'comments.nodes.replies.nodes'
		| 'comments.nodes.status'
		| 'comments.nodes.type'
		| 'content'
		| 'contentTypeName'
		| 'contentType.node.archivePath'
		| 'contentType.node.canExport'
		| 'contentType.node.children'
		| 'contentType.node.children.children'
		| 'contentType.node.children.id'
		| 'contentType.node.connectedTaxonomies.nodes'
		| 'contentType.node.contentNodes.nodes'
		| 'contentType.node.deleteWithUser'
		| 'contentType.node.description'
		| 'contentType.node.excludeFromSearch'
		| 'contentType.node.graphqlPluralName'
		| 'contentType.node.graphqlSingleName'
		| 'contentType.node.hasArchive'
		| 'contentType.node.hierarchical'
		| 'contentType.node.id'
		| 'contentType.node.internal.content'
		| 'contentType.node.internal.contentDigest'
		| 'contentType.node.internal.contentFilePath'
		| 'contentType.node.internal.description'
		| 'contentType.node.internal.fieldOwners'
		| 'contentType.node.internal.ignoreType'
		| 'contentType.node.internal.mediaType'
		| 'contentType.node.internal.owner'
		| 'contentType.node.internal.type'
		| 'contentType.node.isContentNode'
		| 'contentType.node.isFrontPage'
		| 'contentType.node.isPostsPage'
		| 'contentType.node.isTermNode'
		| 'contentType.node.label'
		| 'contentType.node.labels.addNew'
		| 'contentType.node.labels.addNewItem'
		| 'contentType.node.labels.allItems'
		| 'contentType.node.labels.archives'
		| 'contentType.node.labels.attributes'
		| 'contentType.node.labels.editItem'
		| 'contentType.node.labels.featuredImage'
		| 'contentType.node.labels.filterItemsList'
		| 'contentType.node.labels.insertIntoItem'
		| 'contentType.node.labels.itemsList'
		| 'contentType.node.labels.itemsListNavigation'
		| 'contentType.node.labels.menuName'
		| 'contentType.node.labels.name'
		| 'contentType.node.labels.newItem'
		| 'contentType.node.labels.notFound'
		| 'contentType.node.labels.notFoundInTrash'
		| 'contentType.node.labels.parentItemColon'
		| 'contentType.node.labels.removeFeaturedImage'
		| 'contentType.node.labels.searchItems'
		| 'contentType.node.labels.setFeaturedImage'
		| 'contentType.node.labels.singularName'
		| 'contentType.node.labels.uploadedToThisItem'
		| 'contentType.node.labels.useFeaturedImage'
		| 'contentType.node.labels.viewItem'
		| 'contentType.node.labels.viewItems'
		| 'contentType.node.menuIcon'
		| 'contentType.node.menuPosition'
		| 'contentType.node.name'
		| 'contentType.node.nodeType'
		| 'contentType.node.parent.children'
		| 'contentType.node.parent.id'
		| 'contentType.node.public'
		| 'contentType.node.publiclyQueryable'
		| 'contentType.node.restBase'
		| 'contentType.node.restControllerClass'
		| 'contentType.node.showInAdminBar'
		| 'contentType.node.showInGraphql'
		| 'contentType.node.showInMenu'
		| 'contentType.node.showInNavMenus'
		| 'contentType.node.showInRest'
		| 'contentType.node.showUi'
		| 'contentType.node.uri'
		| 'databaseId'
		| 'date'
		| 'dateGmt'
		| 'desiredSlug'
		| 'enclosure'
		| 'featuredImageDatabaseId'
		| 'featuredImageId'
		| 'featuredImage.node.altText'
		| 'featuredImage.node.ancestors.nodes'
		| 'featuredImage.node.authorDatabaseId'
		| 'featuredImage.node.authorId'
		| 'featuredImage.node.caption'
		| 'featuredImage.node.children'
		| 'featuredImage.node.children.children'
		| 'featuredImage.node.children.id'
		| 'featuredImage.node.commentCount'
		| 'featuredImage.node.commentStatus'
		| 'featuredImage.node.comments.nodes'
		| 'featuredImage.node.contentTypeName'
		| 'featuredImage.node.databaseId'
		| 'featuredImage.node.date'
		| 'featuredImage.node.dateGmt'
		| 'featuredImage.node.description'
		| 'featuredImage.node.desiredSlug'
		| 'featuredImage.node.enclosure'
		| 'featuredImage.node.fileSize'
		| 'featuredImage.node.filename'
		| 'featuredImage.node.filesize'
		| 'featuredImage.node.gatsbyImage'
		| 'featuredImage.node.guid'
		| 'featuredImage.node.height'
		| 'featuredImage.node.id'
		| 'featuredImage.node.internal.content'
		| 'featuredImage.node.internal.contentDigest'
		| 'featuredImage.node.internal.contentFilePath'
		| 'featuredImage.node.internal.description'
		| 'featuredImage.node.internal.fieldOwners'
		| 'featuredImage.node.internal.ignoreType'
		| 'featuredImage.node.internal.mediaType'
		| 'featuredImage.node.internal.owner'
		| 'featuredImage.node.internal.type'
		| 'featuredImage.node.isContentNode'
		| 'featuredImage.node.isTermNode'
		| 'featuredImage.node.link'
		| 'featuredImage.node.localFile.absolutePath'
		| 'featuredImage.node.localFile.accessTime'
		| 'featuredImage.node.localFile.atime'
		| 'featuredImage.node.localFile.atimeMs'
		| 'featuredImage.node.localFile.base'
		| 'featuredImage.node.localFile.birthTime'
		| 'featuredImage.node.localFile.birthtime'
		| 'featuredImage.node.localFile.birthtimeMs'
		| 'featuredImage.node.localFile.blksize'
		| 'featuredImage.node.localFile.blocks'
		| 'featuredImage.node.localFile.changeTime'
		| 'featuredImage.node.localFile.children'
		| 'featuredImage.node.localFile.childrenImageSharp'
		| 'featuredImage.node.localFile.ctime'
		| 'featuredImage.node.localFile.ctimeMs'
		| 'featuredImage.node.localFile.dev'
		| 'featuredImage.node.localFile.dir'
		| 'featuredImage.node.localFile.ext'
		| 'featuredImage.node.localFile.extension'
		| 'featuredImage.node.localFile.gid'
		| 'featuredImage.node.localFile.id'
		| 'featuredImage.node.localFile.ino'
		| 'featuredImage.node.localFile.mode'
		| 'featuredImage.node.localFile.modifiedTime'
		| 'featuredImage.node.localFile.mtime'
		| 'featuredImage.node.localFile.mtimeMs'
		| 'featuredImage.node.localFile.name'
		| 'featuredImage.node.localFile.nlink'
		| 'featuredImage.node.localFile.prettySize'
		| 'featuredImage.node.localFile.publicURL'
		| 'featuredImage.node.localFile.rdev'
		| 'featuredImage.node.localFile.relativeDirectory'
		| 'featuredImage.node.localFile.relativePath'
		| 'featuredImage.node.localFile.root'
		| 'featuredImage.node.localFile.size'
		| 'featuredImage.node.localFile.sourceInstanceName'
		| 'featuredImage.node.localFile.uid'
		| 'featuredImage.node.localFile.url'
		| 'featuredImage.node.mediaDetails.file'
		| 'featuredImage.node.mediaDetails.height'
		| 'featuredImage.node.mediaDetails.sizes'
		| 'featuredImage.node.mediaDetails.width'
		| 'featuredImage.node.mediaItemUrl'
		| 'featuredImage.node.mediaType'
		| 'featuredImage.node.mimeType'
		| 'featuredImage.node.modified'
		| 'featuredImage.node.modifiedGmt'
		| 'featuredImage.node.nodeType'
		| 'featuredImage.node.parentDatabaseId'
		| 'featuredImage.node.parentId'
		| 'featuredImage.node.parent.children'
		| 'featuredImage.node.parent.id'
		| 'featuredImage.node.publicUrl'
		| 'featuredImage.node.resize.height'
		| 'featuredImage.node.resize.src'
		| 'featuredImage.node.resize.width'
		| 'featuredImage.node.sizes'
		| 'featuredImage.node.slug'
		| 'featuredImage.node.sourceUrl'
		| 'featuredImage.node.srcSet'
		| 'featuredImage.node.status'
		| 'featuredImage.node.template.templateName'
		| 'featuredImage.node.title'
		| 'featuredImage.node.uri'
		| 'featuredImage.node.width'
		| 'featuredImage.node.wpChildren.nodes'
		| 'guid'
		| 'id'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'isContentNode'
		| 'isFrontPage'
		| 'isPostsPage'
		| 'isPrivacyPage'
		| 'isRevision'
		| 'isTermNode'
		| 'lastEditedBy.node.avatar.default'
		| 'lastEditedBy.node.avatar.extraAttr'
		| 'lastEditedBy.node.avatar.forceDefault'
		| 'lastEditedBy.node.avatar.foundAvatar'
		| 'lastEditedBy.node.avatar.height'
		| 'lastEditedBy.node.avatar.rating'
		| 'lastEditedBy.node.avatar.scheme'
		| 'lastEditedBy.node.avatar.size'
		| 'lastEditedBy.node.avatar.url'
		| 'lastEditedBy.node.avatar.width'
		| 'lastEditedBy.node.capKey'
		| 'lastEditedBy.node.capabilities'
		| 'lastEditedBy.node.children'
		| 'lastEditedBy.node.children.children'
		| 'lastEditedBy.node.children.id'
		| 'lastEditedBy.node.comments.nodes'
		| 'lastEditedBy.node.databaseId'
		| 'lastEditedBy.node.description'
		| 'lastEditedBy.node.email'
		| 'lastEditedBy.node.extraCapabilities'
		| 'lastEditedBy.node.firstName'
		| 'lastEditedBy.node.id'
		| 'lastEditedBy.node.internal.content'
		| 'lastEditedBy.node.internal.contentDigest'
		| 'lastEditedBy.node.internal.contentFilePath'
		| 'lastEditedBy.node.internal.description'
		| 'lastEditedBy.node.internal.fieldOwners'
		| 'lastEditedBy.node.internal.ignoreType'
		| 'lastEditedBy.node.internal.mediaType'
		| 'lastEditedBy.node.internal.owner'
		| 'lastEditedBy.node.internal.type'
		| 'lastEditedBy.node.isContentNode'
		| 'lastEditedBy.node.isTermNode'
		| 'lastEditedBy.node.lastName'
		| 'lastEditedBy.node.locale'
		| 'lastEditedBy.node.name'
		| 'lastEditedBy.node.nicename'
		| 'lastEditedBy.node.nickname'
		| 'lastEditedBy.node.nodeType'
		| 'lastEditedBy.node.pages.nodes'
		| 'lastEditedBy.node.parent.children'
		| 'lastEditedBy.node.parent.id'
		| 'lastEditedBy.node.posts.nodes'
		| 'lastEditedBy.node.registeredDate'
		| 'lastEditedBy.node.roles.nodes'
		| 'lastEditedBy.node.slug'
		| 'lastEditedBy.node.uri'
		| 'lastEditedBy.node.url'
		| 'lastEditedBy.node.username'
		| 'link'
		| 'menuOrder'
		| 'modified'
		| 'modifiedGmt'
		| 'nodeType'
		| 'parentDatabaseId'
		| 'parentId'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id'
		| 'slug'
		| 'status'
		| 'template.templateName'
		| 'title'
		| 'uri'
		| 'wpChildren.nodes'
		| 'wpChildren.nodes.children'
		| 'wpChildren.nodes.children.children'
		| 'wpChildren.nodes.children.id'
		| 'wpChildren.nodes.contentTypeName'
		| 'wpChildren.nodes.databaseId'
		| 'wpChildren.nodes.date'
		| 'wpChildren.nodes.dateGmt'
		| 'wpChildren.nodes.desiredSlug'
		| 'wpChildren.nodes.enclosure'
		| 'wpChildren.nodes.guid'
		| 'wpChildren.nodes.id'
		| 'wpChildren.nodes.internal.content'
		| 'wpChildren.nodes.internal.contentDigest'
		| 'wpChildren.nodes.internal.contentFilePath'
		| 'wpChildren.nodes.internal.description'
		| 'wpChildren.nodes.internal.fieldOwners'
		| 'wpChildren.nodes.internal.ignoreType'
		| 'wpChildren.nodes.internal.mediaType'
		| 'wpChildren.nodes.internal.owner'
		| 'wpChildren.nodes.internal.type'
		| 'wpChildren.nodes.isContentNode'
		| 'wpChildren.nodes.isTermNode'
		| 'wpChildren.nodes.link'
		| 'wpChildren.nodes.modified'
		| 'wpChildren.nodes.modifiedGmt'
		| 'wpChildren.nodes.nodeType'
		| 'wpChildren.nodes.parent.children'
		| 'wpChildren.nodes.parent.id'
		| 'wpChildren.nodes.slug'
		| 'wpChildren.nodes.status'
		| 'wpChildren.nodes.template.templateName'
		| 'wpChildren.nodes.uri'
		| 'wpParent.node.children'
		| 'wpParent.node.children.children'
		| 'wpParent.node.children.id'
		| 'wpParent.node.contentTypeName'
		| 'wpParent.node.databaseId'
		| 'wpParent.node.date'
		| 'wpParent.node.dateGmt'
		| 'wpParent.node.desiredSlug'
		| 'wpParent.node.enclosure'
		| 'wpParent.node.guid'
		| 'wpParent.node.id'
		| 'wpParent.node.internal.content'
		| 'wpParent.node.internal.contentDigest'
		| 'wpParent.node.internal.contentFilePath'
		| 'wpParent.node.internal.description'
		| 'wpParent.node.internal.fieldOwners'
		| 'wpParent.node.internal.ignoreType'
		| 'wpParent.node.internal.mediaType'
		| 'wpParent.node.internal.owner'
		| 'wpParent.node.internal.type'
		| 'wpParent.node.isContentNode'
		| 'wpParent.node.isTermNode'
		| 'wpParent.node.link'
		| 'wpParent.node.modified'
		| 'wpParent.node.modifiedGmt'
		| 'wpParent.node.nodeType'
		| 'wpParent.node.parent.children'
		| 'wpParent.node.parent.id'
		| 'wpParent.node.slug'
		| 'wpParent.node.status'
		| 'wpParent.node.template.templateName'
		| 'wpParent.node.uri';

	type WpPageFilterInput = {
		readonly ancestors: InputMaybe<WpHierarchicalContentNodeToContentNodeAncestorsConnectionTypeFilterInput>;
		readonly author: InputMaybe<WpNodeWithAuthorToUserConnectionEdgeTypeFilterInput>;
		readonly authorDatabaseId: InputMaybe<IntQueryOperatorInput>;
		readonly authorId: InputMaybe<IDQueryOperatorInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly commentCount: InputMaybe<IntQueryOperatorInput>;
		readonly commentStatus: InputMaybe<StringQueryOperatorInput>;
		readonly comments: InputMaybe<WpPageToCommentConnectionTypeFilterInput>;
		readonly content: InputMaybe<StringQueryOperatorInput>;
		readonly contentType: InputMaybe<WpContentNodeToContentTypeConnectionEdgeTypeFilterInput>;
		readonly contentTypeName: InputMaybe<StringQueryOperatorInput>;
		readonly databaseId: InputMaybe<IntQueryOperatorInput>;
		readonly date: InputMaybe<DateQueryOperatorInput>;
		readonly dateGmt: InputMaybe<DateQueryOperatorInput>;
		readonly desiredSlug: InputMaybe<StringQueryOperatorInput>;
		readonly enclosure: InputMaybe<StringQueryOperatorInput>;
		readonly featuredImage: InputMaybe<WpNodeWithFeaturedImageToMediaItemConnectionEdgeTypeFilterInput>;
		readonly featuredImageDatabaseId: InputMaybe<IntQueryOperatorInput>;
		readonly featuredImageId: InputMaybe<IDQueryOperatorInput>;
		readonly guid: InputMaybe<StringQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly isContentNode: InputMaybe<BooleanQueryOperatorInput>;
		readonly isFrontPage: InputMaybe<BooleanQueryOperatorInput>;
		readonly isPostsPage: InputMaybe<BooleanQueryOperatorInput>;
		readonly isPrivacyPage: InputMaybe<BooleanQueryOperatorInput>;
		readonly isRevision: InputMaybe<BooleanQueryOperatorInput>;
		readonly isTermNode: InputMaybe<BooleanQueryOperatorInput>;
		readonly lastEditedBy: InputMaybe<WpContentNodeToEditLastConnectionEdgeTypeFilterInput>;
		readonly link: InputMaybe<StringQueryOperatorInput>;
		readonly menuOrder: InputMaybe<IntQueryOperatorInput>;
		readonly modified: InputMaybe<DateQueryOperatorInput>;
		readonly modifiedGmt: InputMaybe<DateQueryOperatorInput>;
		readonly nodeType: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly parentDatabaseId: InputMaybe<IntQueryOperatorInput>;
		readonly parentId: InputMaybe<IDQueryOperatorInput>;
		readonly slug: InputMaybe<StringQueryOperatorInput>;
		readonly status: InputMaybe<StringQueryOperatorInput>;
		readonly template: InputMaybe<WpContentTemplateFilterInput>;
		readonly title: InputMaybe<StringQueryOperatorInput>;
		readonly uri: InputMaybe<StringQueryOperatorInput>;
		readonly wpChildren: InputMaybe<WpHierarchicalContentNodeToContentNodeChildrenConnectionTypeFilterInput>;
		readonly wpParent: InputMaybe<WpHierarchicalContentNodeToParentContentNodeConnectionEdgeTypeFilterInput>;
	};

	type WpPageFilterListInput = {
		readonly elemMatch: InputMaybe<WpPageFilterInput>;
	};

	type WpPageGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpPageEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<WpPageGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpPage>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpPageGroupConnection_distinctArgs = {
		field: WpPageFieldsEnum;
	};

	type WpPageGroupConnection_groupArgs = {
		field: WpPageFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpPageGroupConnection_maxArgs = {
		field: WpPageFieldsEnum;
	};

	type WpPageGroupConnection_minArgs = {
		field: WpPageFieldsEnum;
	};

	type WpPageGroupConnection_sumArgs = {
		field: WpPageFieldsEnum;
	};

	type WpPageSortInput = {
		readonly fields: InputMaybe<ReadonlyArray<InputMaybe<WpPageFieldsEnum>>>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	/** Connection between the Page type and the Comment type */
	type WpPageToCommentConnectionType = WpCommentConnectionType &
		WpConnectionType & {
			/** The nodes of the connection, without the edges */
			readonly nodes: ReadonlyArray<WpComment>;
		};

	type WpPageToCommentConnectionTypeFilterInput = {
		readonly nodes: InputMaybe<WpCommentFilterListInput>;
	};

	/** The post type */
	type WpPost = Node &
		WpContentNode &
		WpDatabaseIdentifier &
		WpMenuItemLinkable &
		WpNode &
		WpNodeWithAuthor &
		WpNodeWithComments &
		WpNodeWithContentEditor &
		WpNodeWithExcerpt &
		WpNodeWithFeaturedImage &
		WpNodeWithRevisions &
		WpNodeWithTemplate &
		WpNodeWithTitle &
		WpNodeWithTrackbacks &
		WpUniformResourceIdentifiable & {
			/** Connection between the NodeWithAuthor type and the User type */
			readonly author: Maybe<WpNodeWithAuthorToUserConnectionEdgeType>;
			/** The database identifier of the author of the node */
			readonly authorDatabaseId: Maybe<Scalars['Int']>;
			/** The globally unique identifier of the author of the node */
			readonly authorId: Maybe<Scalars['ID']>;
			/** Connection between the Post type and the category type */
			readonly categories: Maybe<WpPostToCategoryConnectionType>;
			readonly children: ReadonlyArray<Node>;
			/** The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility. */
			readonly commentCount: Maybe<Scalars['Int']>;
			/** Whether the comments are open or closed for this particular post. */
			readonly commentStatus: Maybe<Scalars['String']>;
			/** Connection between the Post type and the Comment type */
			readonly comments: Maybe<WpPostToCommentConnectionType>;
			/** The content of the post. */
			readonly content: Maybe<Scalars['String']>;
			/** Connection between the ContentNode type and the ContentType type */
			readonly contentType: Maybe<WpContentNodeToContentTypeConnectionEdgeType>;
			/** The name of the Content Type the node belongs to */
			readonly contentTypeName: Scalars['String'];
			/** The unique identifier stored in the database */
			readonly databaseId: Scalars['Int'];
			/** Post publishing date. */
			readonly date: Maybe<Scalars['Date']>;
			/** The publishing date set in GMT. */
			readonly dateGmt: Maybe<Scalars['Date']>;
			/** The desired slug of the post */
			readonly desiredSlug: Maybe<Scalars['String']>;
			/** The RSS enclosure for the object */
			readonly enclosure: Maybe<Scalars['String']>;
			/** The excerpt of the post. */
			readonly excerpt: Maybe<Scalars['String']>;
			/** Connection between the NodeWithFeaturedImage type and the MediaItem type */
			readonly featuredImage: Maybe<WpNodeWithFeaturedImageToMediaItemConnectionEdgeType>;
			/** The database identifier for the featured image node assigned to the content node */
			readonly featuredImageDatabaseId: Maybe<Scalars['Int']>;
			/** Globally unique ID of the featured image assigned to the node */
			readonly featuredImageId: Maybe<Scalars['ID']>;
			/** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
			readonly guid: Maybe<Scalars['String']>;
			readonly id: Scalars['ID'];
			readonly internal: Internal;
			/** Whether the node is a Content Node */
			readonly isContentNode: Scalars['Boolean'];
			/** True if the node is a revision of another node */
			readonly isRevision: Maybe<Scalars['Boolean']>;
			/** Whether this page is sticky */
			readonly isSticky: Scalars['Boolean'];
			/** Whether the node is a Term */
			readonly isTermNode: Scalars['Boolean'];
			/** The user that most recently edited the node */
			readonly lastEditedBy: Maybe<WpContentNodeToEditLastConnectionEdgeType>;
			/** The permalink of the post */
			readonly link: Maybe<Scalars['String']>;
			/** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
			readonly modified: Maybe<Scalars['Date']>;
			/** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
			readonly modifiedGmt: Maybe<Scalars['Date']>;
			readonly nodeType: Maybe<Scalars['String']>;
			readonly parent: Maybe<Node>;
			/** Whether the pings are open or closed for this particular post. */
			readonly pingStatus: Maybe<Scalars['String']>;
			/** URLs that have been pinged. */
			readonly pinged: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
			/** Connection between the Post type and the postFormat type */
			readonly postFormats: Maybe<WpPostToPostFormatConnectionType>;
			/** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
			readonly slug: Maybe<Scalars['String']>;
			/** The current status of the object */
			readonly status: Maybe<Scalars['String']>;
			/** Connection between the Post type and the tag type */
			readonly tags: Maybe<WpPostToTagConnectionType>;
			/** The template assigned to the node */
			readonly template: Maybe<WpContentTemplate>;
			/** Connection between the Post type and the TermNode type */
			readonly terms: Maybe<WpPostToTermNodeConnectionType>;
			/** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
			readonly title: Maybe<Scalars['String']>;
			/** URLs queued to be pinged. */
			readonly toPing: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
			/** The unique resource identifier path */
			readonly uri: Maybe<Scalars['String']>;
		};

	/** The post type */
	type WpPost_dateArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	/** The post type */
	type WpPost_dateGmtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	/** The post type */
	type WpPost_modifiedArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	/** The post type */
	type WpPost_modifiedGmtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type WpPostConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpPostEdge>;
		readonly group: ReadonlyArray<WpPostGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpPost>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpPostConnection_distinctArgs = {
		field: WpPostFieldsEnum;
	};

	type WpPostConnection_groupArgs = {
		field: WpPostFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpPostConnection_maxArgs = {
		field: WpPostFieldsEnum;
	};

	type WpPostConnection_minArgs = {
		field: WpPostFieldsEnum;
	};

	type WpPostConnection_sumArgs = {
		field: WpPostFieldsEnum;
	};

	type WpPostConnectionEdgeType = {
		/** The connected post Node */
		readonly node: WpPost;
	};

	type WpPostConnectionType = {
		/** A list of connected post Nodes */
		readonly nodes: ReadonlyArray<WpPost>;
	};

	type WpPostEdge = {
		readonly next: Maybe<WpPost>;
		readonly node: WpPost;
		readonly previous: Maybe<WpPost>;
	};

	type WpPostFieldsEnum =
		| 'authorDatabaseId'
		| 'authorId'
		| 'author.node.avatar.default'
		| 'author.node.avatar.extraAttr'
		| 'author.node.avatar.forceDefault'
		| 'author.node.avatar.foundAvatar'
		| 'author.node.avatar.height'
		| 'author.node.avatar.rating'
		| 'author.node.avatar.scheme'
		| 'author.node.avatar.size'
		| 'author.node.avatar.url'
		| 'author.node.avatar.width'
		| 'author.node.capKey'
		| 'author.node.capabilities'
		| 'author.node.children'
		| 'author.node.children.children'
		| 'author.node.children.id'
		| 'author.node.comments.nodes'
		| 'author.node.databaseId'
		| 'author.node.description'
		| 'author.node.email'
		| 'author.node.extraCapabilities'
		| 'author.node.firstName'
		| 'author.node.id'
		| 'author.node.internal.content'
		| 'author.node.internal.contentDigest'
		| 'author.node.internal.contentFilePath'
		| 'author.node.internal.description'
		| 'author.node.internal.fieldOwners'
		| 'author.node.internal.ignoreType'
		| 'author.node.internal.mediaType'
		| 'author.node.internal.owner'
		| 'author.node.internal.type'
		| 'author.node.isContentNode'
		| 'author.node.isTermNode'
		| 'author.node.lastName'
		| 'author.node.locale'
		| 'author.node.name'
		| 'author.node.nicename'
		| 'author.node.nickname'
		| 'author.node.nodeType'
		| 'author.node.pages.nodes'
		| 'author.node.parent.children'
		| 'author.node.parent.id'
		| 'author.node.posts.nodes'
		| 'author.node.registeredDate'
		| 'author.node.roles.nodes'
		| 'author.node.slug'
		| 'author.node.uri'
		| 'author.node.url'
		| 'author.node.username'
		| 'categories.nodes'
		| 'categories.nodes.ancestors.nodes'
		| 'categories.nodes.children'
		| 'categories.nodes.children.children'
		| 'categories.nodes.children.id'
		| 'categories.nodes.contentNodes.nodes'
		| 'categories.nodes.count'
		| 'categories.nodes.databaseId'
		| 'categories.nodes.description'
		| 'categories.nodes.id'
		| 'categories.nodes.internal.content'
		| 'categories.nodes.internal.contentDigest'
		| 'categories.nodes.internal.contentFilePath'
		| 'categories.nodes.internal.description'
		| 'categories.nodes.internal.fieldOwners'
		| 'categories.nodes.internal.ignoreType'
		| 'categories.nodes.internal.mediaType'
		| 'categories.nodes.internal.owner'
		| 'categories.nodes.internal.type'
		| 'categories.nodes.isContentNode'
		| 'categories.nodes.isTermNode'
		| 'categories.nodes.link'
		| 'categories.nodes.name'
		| 'categories.nodes.nodeType'
		| 'categories.nodes.parentDatabaseId'
		| 'categories.nodes.parentId'
		| 'categories.nodes.parent.children'
		| 'categories.nodes.parent.id'
		| 'categories.nodes.posts.nodes'
		| 'categories.nodes.slug'
		| 'categories.nodes.taxonomyName'
		| 'categories.nodes.termGroupId'
		| 'categories.nodes.termTaxonomyId'
		| 'categories.nodes.uri'
		| 'categories.nodes.wpChildren.nodes'
		| 'children'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'commentCount'
		| 'commentStatus'
		| 'comments.nodes'
		| 'comments.nodes.agent'
		| 'comments.nodes.authorIp'
		| 'comments.nodes.children'
		| 'comments.nodes.children.children'
		| 'comments.nodes.children.id'
		| 'comments.nodes.content'
		| 'comments.nodes.databaseId'
		| 'comments.nodes.date'
		| 'comments.nodes.dateGmt'
		| 'comments.nodes.id'
		| 'comments.nodes.internal.content'
		| 'comments.nodes.internal.contentDigest'
		| 'comments.nodes.internal.contentFilePath'
		| 'comments.nodes.internal.description'
		| 'comments.nodes.internal.fieldOwners'
		| 'comments.nodes.internal.ignoreType'
		| 'comments.nodes.internal.mediaType'
		| 'comments.nodes.internal.owner'
		| 'comments.nodes.internal.type'
		| 'comments.nodes.karma'
		| 'comments.nodes.nodeType'
		| 'comments.nodes.parentDatabaseId'
		| 'comments.nodes.parentId'
		| 'comments.nodes.parent.children'
		| 'comments.nodes.parent.id'
		| 'comments.nodes.replies.nodes'
		| 'comments.nodes.status'
		| 'comments.nodes.type'
		| 'content'
		| 'contentTypeName'
		| 'contentType.node.archivePath'
		| 'contentType.node.canExport'
		| 'contentType.node.children'
		| 'contentType.node.children.children'
		| 'contentType.node.children.id'
		| 'contentType.node.connectedTaxonomies.nodes'
		| 'contentType.node.contentNodes.nodes'
		| 'contentType.node.deleteWithUser'
		| 'contentType.node.description'
		| 'contentType.node.excludeFromSearch'
		| 'contentType.node.graphqlPluralName'
		| 'contentType.node.graphqlSingleName'
		| 'contentType.node.hasArchive'
		| 'contentType.node.hierarchical'
		| 'contentType.node.id'
		| 'contentType.node.internal.content'
		| 'contentType.node.internal.contentDigest'
		| 'contentType.node.internal.contentFilePath'
		| 'contentType.node.internal.description'
		| 'contentType.node.internal.fieldOwners'
		| 'contentType.node.internal.ignoreType'
		| 'contentType.node.internal.mediaType'
		| 'contentType.node.internal.owner'
		| 'contentType.node.internal.type'
		| 'contentType.node.isContentNode'
		| 'contentType.node.isFrontPage'
		| 'contentType.node.isPostsPage'
		| 'contentType.node.isTermNode'
		| 'contentType.node.label'
		| 'contentType.node.labels.addNew'
		| 'contentType.node.labels.addNewItem'
		| 'contentType.node.labels.allItems'
		| 'contentType.node.labels.archives'
		| 'contentType.node.labels.attributes'
		| 'contentType.node.labels.editItem'
		| 'contentType.node.labels.featuredImage'
		| 'contentType.node.labels.filterItemsList'
		| 'contentType.node.labels.insertIntoItem'
		| 'contentType.node.labels.itemsList'
		| 'contentType.node.labels.itemsListNavigation'
		| 'contentType.node.labels.menuName'
		| 'contentType.node.labels.name'
		| 'contentType.node.labels.newItem'
		| 'contentType.node.labels.notFound'
		| 'contentType.node.labels.notFoundInTrash'
		| 'contentType.node.labels.parentItemColon'
		| 'contentType.node.labels.removeFeaturedImage'
		| 'contentType.node.labels.searchItems'
		| 'contentType.node.labels.setFeaturedImage'
		| 'contentType.node.labels.singularName'
		| 'contentType.node.labels.uploadedToThisItem'
		| 'contentType.node.labels.useFeaturedImage'
		| 'contentType.node.labels.viewItem'
		| 'contentType.node.labels.viewItems'
		| 'contentType.node.menuIcon'
		| 'contentType.node.menuPosition'
		| 'contentType.node.name'
		| 'contentType.node.nodeType'
		| 'contentType.node.parent.children'
		| 'contentType.node.parent.id'
		| 'contentType.node.public'
		| 'contentType.node.publiclyQueryable'
		| 'contentType.node.restBase'
		| 'contentType.node.restControllerClass'
		| 'contentType.node.showInAdminBar'
		| 'contentType.node.showInGraphql'
		| 'contentType.node.showInMenu'
		| 'contentType.node.showInNavMenus'
		| 'contentType.node.showInRest'
		| 'contentType.node.showUi'
		| 'contentType.node.uri'
		| 'databaseId'
		| 'date'
		| 'dateGmt'
		| 'desiredSlug'
		| 'enclosure'
		| 'excerpt'
		| 'featuredImageDatabaseId'
		| 'featuredImageId'
		| 'featuredImage.node.altText'
		| 'featuredImage.node.ancestors.nodes'
		| 'featuredImage.node.authorDatabaseId'
		| 'featuredImage.node.authorId'
		| 'featuredImage.node.caption'
		| 'featuredImage.node.children'
		| 'featuredImage.node.children.children'
		| 'featuredImage.node.children.id'
		| 'featuredImage.node.commentCount'
		| 'featuredImage.node.commentStatus'
		| 'featuredImage.node.comments.nodes'
		| 'featuredImage.node.contentTypeName'
		| 'featuredImage.node.databaseId'
		| 'featuredImage.node.date'
		| 'featuredImage.node.dateGmt'
		| 'featuredImage.node.description'
		| 'featuredImage.node.desiredSlug'
		| 'featuredImage.node.enclosure'
		| 'featuredImage.node.fileSize'
		| 'featuredImage.node.filename'
		| 'featuredImage.node.filesize'
		| 'featuredImage.node.gatsbyImage'
		| 'featuredImage.node.guid'
		| 'featuredImage.node.height'
		| 'featuredImage.node.id'
		| 'featuredImage.node.internal.content'
		| 'featuredImage.node.internal.contentDigest'
		| 'featuredImage.node.internal.contentFilePath'
		| 'featuredImage.node.internal.description'
		| 'featuredImage.node.internal.fieldOwners'
		| 'featuredImage.node.internal.ignoreType'
		| 'featuredImage.node.internal.mediaType'
		| 'featuredImage.node.internal.owner'
		| 'featuredImage.node.internal.type'
		| 'featuredImage.node.isContentNode'
		| 'featuredImage.node.isTermNode'
		| 'featuredImage.node.link'
		| 'featuredImage.node.localFile.absolutePath'
		| 'featuredImage.node.localFile.accessTime'
		| 'featuredImage.node.localFile.atime'
		| 'featuredImage.node.localFile.atimeMs'
		| 'featuredImage.node.localFile.base'
		| 'featuredImage.node.localFile.birthTime'
		| 'featuredImage.node.localFile.birthtime'
		| 'featuredImage.node.localFile.birthtimeMs'
		| 'featuredImage.node.localFile.blksize'
		| 'featuredImage.node.localFile.blocks'
		| 'featuredImage.node.localFile.changeTime'
		| 'featuredImage.node.localFile.children'
		| 'featuredImage.node.localFile.childrenImageSharp'
		| 'featuredImage.node.localFile.ctime'
		| 'featuredImage.node.localFile.ctimeMs'
		| 'featuredImage.node.localFile.dev'
		| 'featuredImage.node.localFile.dir'
		| 'featuredImage.node.localFile.ext'
		| 'featuredImage.node.localFile.extension'
		| 'featuredImage.node.localFile.gid'
		| 'featuredImage.node.localFile.id'
		| 'featuredImage.node.localFile.ino'
		| 'featuredImage.node.localFile.mode'
		| 'featuredImage.node.localFile.modifiedTime'
		| 'featuredImage.node.localFile.mtime'
		| 'featuredImage.node.localFile.mtimeMs'
		| 'featuredImage.node.localFile.name'
		| 'featuredImage.node.localFile.nlink'
		| 'featuredImage.node.localFile.prettySize'
		| 'featuredImage.node.localFile.publicURL'
		| 'featuredImage.node.localFile.rdev'
		| 'featuredImage.node.localFile.relativeDirectory'
		| 'featuredImage.node.localFile.relativePath'
		| 'featuredImage.node.localFile.root'
		| 'featuredImage.node.localFile.size'
		| 'featuredImage.node.localFile.sourceInstanceName'
		| 'featuredImage.node.localFile.uid'
		| 'featuredImage.node.localFile.url'
		| 'featuredImage.node.mediaDetails.file'
		| 'featuredImage.node.mediaDetails.height'
		| 'featuredImage.node.mediaDetails.sizes'
		| 'featuredImage.node.mediaDetails.width'
		| 'featuredImage.node.mediaItemUrl'
		| 'featuredImage.node.mediaType'
		| 'featuredImage.node.mimeType'
		| 'featuredImage.node.modified'
		| 'featuredImage.node.modifiedGmt'
		| 'featuredImage.node.nodeType'
		| 'featuredImage.node.parentDatabaseId'
		| 'featuredImage.node.parentId'
		| 'featuredImage.node.parent.children'
		| 'featuredImage.node.parent.id'
		| 'featuredImage.node.publicUrl'
		| 'featuredImage.node.resize.height'
		| 'featuredImage.node.resize.src'
		| 'featuredImage.node.resize.width'
		| 'featuredImage.node.sizes'
		| 'featuredImage.node.slug'
		| 'featuredImage.node.sourceUrl'
		| 'featuredImage.node.srcSet'
		| 'featuredImage.node.status'
		| 'featuredImage.node.template.templateName'
		| 'featuredImage.node.title'
		| 'featuredImage.node.uri'
		| 'featuredImage.node.width'
		| 'featuredImage.node.wpChildren.nodes'
		| 'guid'
		| 'id'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'isContentNode'
		| 'isRevision'
		| 'isSticky'
		| 'isTermNode'
		| 'lastEditedBy.node.avatar.default'
		| 'lastEditedBy.node.avatar.extraAttr'
		| 'lastEditedBy.node.avatar.forceDefault'
		| 'lastEditedBy.node.avatar.foundAvatar'
		| 'lastEditedBy.node.avatar.height'
		| 'lastEditedBy.node.avatar.rating'
		| 'lastEditedBy.node.avatar.scheme'
		| 'lastEditedBy.node.avatar.size'
		| 'lastEditedBy.node.avatar.url'
		| 'lastEditedBy.node.avatar.width'
		| 'lastEditedBy.node.capKey'
		| 'lastEditedBy.node.capabilities'
		| 'lastEditedBy.node.children'
		| 'lastEditedBy.node.children.children'
		| 'lastEditedBy.node.children.id'
		| 'lastEditedBy.node.comments.nodes'
		| 'lastEditedBy.node.databaseId'
		| 'lastEditedBy.node.description'
		| 'lastEditedBy.node.email'
		| 'lastEditedBy.node.extraCapabilities'
		| 'lastEditedBy.node.firstName'
		| 'lastEditedBy.node.id'
		| 'lastEditedBy.node.internal.content'
		| 'lastEditedBy.node.internal.contentDigest'
		| 'lastEditedBy.node.internal.contentFilePath'
		| 'lastEditedBy.node.internal.description'
		| 'lastEditedBy.node.internal.fieldOwners'
		| 'lastEditedBy.node.internal.ignoreType'
		| 'lastEditedBy.node.internal.mediaType'
		| 'lastEditedBy.node.internal.owner'
		| 'lastEditedBy.node.internal.type'
		| 'lastEditedBy.node.isContentNode'
		| 'lastEditedBy.node.isTermNode'
		| 'lastEditedBy.node.lastName'
		| 'lastEditedBy.node.locale'
		| 'lastEditedBy.node.name'
		| 'lastEditedBy.node.nicename'
		| 'lastEditedBy.node.nickname'
		| 'lastEditedBy.node.nodeType'
		| 'lastEditedBy.node.pages.nodes'
		| 'lastEditedBy.node.parent.children'
		| 'lastEditedBy.node.parent.id'
		| 'lastEditedBy.node.posts.nodes'
		| 'lastEditedBy.node.registeredDate'
		| 'lastEditedBy.node.roles.nodes'
		| 'lastEditedBy.node.slug'
		| 'lastEditedBy.node.uri'
		| 'lastEditedBy.node.url'
		| 'lastEditedBy.node.username'
		| 'link'
		| 'modified'
		| 'modifiedGmt'
		| 'nodeType'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id'
		| 'pingStatus'
		| 'pinged'
		| 'postFormats.nodes'
		| 'postFormats.nodes.children'
		| 'postFormats.nodes.children.children'
		| 'postFormats.nodes.children.id'
		| 'postFormats.nodes.contentNodes.nodes'
		| 'postFormats.nodes.count'
		| 'postFormats.nodes.databaseId'
		| 'postFormats.nodes.description'
		| 'postFormats.nodes.id'
		| 'postFormats.nodes.internal.content'
		| 'postFormats.nodes.internal.contentDigest'
		| 'postFormats.nodes.internal.contentFilePath'
		| 'postFormats.nodes.internal.description'
		| 'postFormats.nodes.internal.fieldOwners'
		| 'postFormats.nodes.internal.ignoreType'
		| 'postFormats.nodes.internal.mediaType'
		| 'postFormats.nodes.internal.owner'
		| 'postFormats.nodes.internal.type'
		| 'postFormats.nodes.isContentNode'
		| 'postFormats.nodes.isTermNode'
		| 'postFormats.nodes.link'
		| 'postFormats.nodes.name'
		| 'postFormats.nodes.nodeType'
		| 'postFormats.nodes.parent.children'
		| 'postFormats.nodes.parent.id'
		| 'postFormats.nodes.posts.nodes'
		| 'postFormats.nodes.slug'
		| 'postFormats.nodes.taxonomyName'
		| 'postFormats.nodes.termGroupId'
		| 'postFormats.nodes.termTaxonomyId'
		| 'postFormats.nodes.uri'
		| 'slug'
		| 'status'
		| 'tags.nodes'
		| 'tags.nodes.children'
		| 'tags.nodes.children.children'
		| 'tags.nodes.children.id'
		| 'tags.nodes.contentNodes.nodes'
		| 'tags.nodes.count'
		| 'tags.nodes.databaseId'
		| 'tags.nodes.description'
		| 'tags.nodes.id'
		| 'tags.nodes.internal.content'
		| 'tags.nodes.internal.contentDigest'
		| 'tags.nodes.internal.contentFilePath'
		| 'tags.nodes.internal.description'
		| 'tags.nodes.internal.fieldOwners'
		| 'tags.nodes.internal.ignoreType'
		| 'tags.nodes.internal.mediaType'
		| 'tags.nodes.internal.owner'
		| 'tags.nodes.internal.type'
		| 'tags.nodes.isContentNode'
		| 'tags.nodes.isTermNode'
		| 'tags.nodes.link'
		| 'tags.nodes.name'
		| 'tags.nodes.nodeType'
		| 'tags.nodes.parent.children'
		| 'tags.nodes.parent.id'
		| 'tags.nodes.posts.nodes'
		| 'tags.nodes.slug'
		| 'tags.nodes.taxonomyName'
		| 'tags.nodes.termGroupId'
		| 'tags.nodes.termTaxonomyId'
		| 'tags.nodes.uri'
		| 'template.templateName'
		| 'terms.nodes'
		| 'terms.nodes.children'
		| 'terms.nodes.children.children'
		| 'terms.nodes.children.id'
		| 'terms.nodes.count'
		| 'terms.nodes.databaseId'
		| 'terms.nodes.description'
		| 'terms.nodes.id'
		| 'terms.nodes.internal.content'
		| 'terms.nodes.internal.contentDigest'
		| 'terms.nodes.internal.contentFilePath'
		| 'terms.nodes.internal.description'
		| 'terms.nodes.internal.fieldOwners'
		| 'terms.nodes.internal.ignoreType'
		| 'terms.nodes.internal.mediaType'
		| 'terms.nodes.internal.owner'
		| 'terms.nodes.internal.type'
		| 'terms.nodes.isContentNode'
		| 'terms.nodes.isTermNode'
		| 'terms.nodes.link'
		| 'terms.nodes.name'
		| 'terms.nodes.nodeType'
		| 'terms.nodes.parent.children'
		| 'terms.nodes.parent.id'
		| 'terms.nodes.slug'
		| 'terms.nodes.taxonomyName'
		| 'terms.nodes.termGroupId'
		| 'terms.nodes.termTaxonomyId'
		| 'terms.nodes.uri'
		| 'title'
		| 'toPing'
		| 'uri';

	type WpPostFilterInput = {
		readonly author: InputMaybe<WpNodeWithAuthorToUserConnectionEdgeTypeFilterInput>;
		readonly authorDatabaseId: InputMaybe<IntQueryOperatorInput>;
		readonly authorId: InputMaybe<IDQueryOperatorInput>;
		readonly categories: InputMaybe<WpPostToCategoryConnectionTypeFilterInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly commentCount: InputMaybe<IntQueryOperatorInput>;
		readonly commentStatus: InputMaybe<StringQueryOperatorInput>;
		readonly comments: InputMaybe<WpPostToCommentConnectionTypeFilterInput>;
		readonly content: InputMaybe<StringQueryOperatorInput>;
		readonly contentType: InputMaybe<WpContentNodeToContentTypeConnectionEdgeTypeFilterInput>;
		readonly contentTypeName: InputMaybe<StringQueryOperatorInput>;
		readonly databaseId: InputMaybe<IntQueryOperatorInput>;
		readonly date: InputMaybe<DateQueryOperatorInput>;
		readonly dateGmt: InputMaybe<DateQueryOperatorInput>;
		readonly desiredSlug: InputMaybe<StringQueryOperatorInput>;
		readonly enclosure: InputMaybe<StringQueryOperatorInput>;
		readonly excerpt: InputMaybe<StringQueryOperatorInput>;
		readonly featuredImage: InputMaybe<WpNodeWithFeaturedImageToMediaItemConnectionEdgeTypeFilterInput>;
		readonly featuredImageDatabaseId: InputMaybe<IntQueryOperatorInput>;
		readonly featuredImageId: InputMaybe<IDQueryOperatorInput>;
		readonly guid: InputMaybe<StringQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly isContentNode: InputMaybe<BooleanQueryOperatorInput>;
		readonly isRevision: InputMaybe<BooleanQueryOperatorInput>;
		readonly isSticky: InputMaybe<BooleanQueryOperatorInput>;
		readonly isTermNode: InputMaybe<BooleanQueryOperatorInput>;
		readonly lastEditedBy: InputMaybe<WpContentNodeToEditLastConnectionEdgeTypeFilterInput>;
		readonly link: InputMaybe<StringQueryOperatorInput>;
		readonly modified: InputMaybe<DateQueryOperatorInput>;
		readonly modifiedGmt: InputMaybe<DateQueryOperatorInput>;
		readonly nodeType: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly pingStatus: InputMaybe<StringQueryOperatorInput>;
		readonly pinged: InputMaybe<StringQueryOperatorInput>;
		readonly postFormats: InputMaybe<WpPostToPostFormatConnectionTypeFilterInput>;
		readonly slug: InputMaybe<StringQueryOperatorInput>;
		readonly status: InputMaybe<StringQueryOperatorInput>;
		readonly tags: InputMaybe<WpPostToTagConnectionTypeFilterInput>;
		readonly template: InputMaybe<WpContentTemplateFilterInput>;
		readonly terms: InputMaybe<WpPostToTermNodeConnectionTypeFilterInput>;
		readonly title: InputMaybe<StringQueryOperatorInput>;
		readonly toPing: InputMaybe<StringQueryOperatorInput>;
		readonly uri: InputMaybe<StringQueryOperatorInput>;
	};

	type WpPostFilterListInput = {
		readonly elemMatch: InputMaybe<WpPostFilterInput>;
	};

	/** The postFormat type */
	type WpPostFormat = Node &
		WpDatabaseIdentifier &
		WpNode &
		WpTermNode &
		WpUniformResourceIdentifiable & {
			readonly children: ReadonlyArray<Node>;
			/** Connection between the PostFormat type and the ContentNode type */
			readonly contentNodes: Maybe<WpPostFormatToContentNodeConnectionType>;
			/** The number of objects connected to the object */
			readonly count: Maybe<Scalars['Int']>;
			/** The unique identifier stored in the database */
			readonly databaseId: Scalars['Int'];
			/** The description of the object */
			readonly description: Maybe<Scalars['String']>;
			readonly id: Scalars['ID'];
			readonly internal: Internal;
			/** Whether the node is a Content Node */
			readonly isContentNode: Scalars['Boolean'];
			/** Whether the node is a Term */
			readonly isTermNode: Scalars['Boolean'];
			/** The link to the term */
			readonly link: Maybe<Scalars['String']>;
			/** The human friendly name of the object. */
			readonly name: Maybe<Scalars['String']>;
			readonly nodeType: Maybe<Scalars['String']>;
			readonly parent: Maybe<Node>;
			/** Connection between the PostFormat type and the post type */
			readonly posts: Maybe<WpPostFormatToPostConnectionType>;
			/** An alphanumeric identifier for the object unique to its type. */
			readonly slug: Maybe<Scalars['String']>;
			/** Connection between the PostFormat type and the Taxonomy type */
			readonly taxonomy: Maybe<WpPostFormatToTaxonomyConnectionEdgeType>;
			/** The name of the taxonomy that the object is associated with */
			readonly taxonomyName: Maybe<Scalars['String']>;
			/** The ID of the term group that this term object belongs to */
			readonly termGroupId: Maybe<Scalars['Int']>;
			/** The taxonomy ID that the object is associated with */
			readonly termTaxonomyId: Maybe<Scalars['Int']>;
			/** The unique resource identifier path */
			readonly uri: Maybe<Scalars['String']>;
		};

	type WpPostFormatConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpPostFormatEdge>;
		readonly group: ReadonlyArray<WpPostFormatGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpPostFormat>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpPostFormatConnection_distinctArgs = {
		field: WpPostFormatFieldsEnum;
	};

	type WpPostFormatConnection_groupArgs = {
		field: WpPostFormatFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpPostFormatConnection_maxArgs = {
		field: WpPostFormatFieldsEnum;
	};

	type WpPostFormatConnection_minArgs = {
		field: WpPostFormatFieldsEnum;
	};

	type WpPostFormatConnection_sumArgs = {
		field: WpPostFormatFieldsEnum;
	};

	type WpPostFormatConnectionEdgeType = {
		/** The connected postFormat Node */
		readonly node: WpPostFormat;
	};

	type WpPostFormatConnectionType = {
		/** A list of connected postFormat Nodes */
		readonly nodes: ReadonlyArray<WpPostFormat>;
	};

	type WpPostFormatEdge = {
		readonly next: Maybe<WpPostFormat>;
		readonly node: WpPostFormat;
		readonly previous: Maybe<WpPostFormat>;
	};

	type WpPostFormatFieldsEnum =
		| 'children'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'contentNodes.nodes'
		| 'contentNodes.nodes.children'
		| 'contentNodes.nodes.children.children'
		| 'contentNodes.nodes.children.id'
		| 'contentNodes.nodes.contentTypeName'
		| 'contentNodes.nodes.databaseId'
		| 'contentNodes.nodes.date'
		| 'contentNodes.nodes.dateGmt'
		| 'contentNodes.nodes.desiredSlug'
		| 'contentNodes.nodes.enclosure'
		| 'contentNodes.nodes.guid'
		| 'contentNodes.nodes.id'
		| 'contentNodes.nodes.internal.content'
		| 'contentNodes.nodes.internal.contentDigest'
		| 'contentNodes.nodes.internal.contentFilePath'
		| 'contentNodes.nodes.internal.description'
		| 'contentNodes.nodes.internal.fieldOwners'
		| 'contentNodes.nodes.internal.ignoreType'
		| 'contentNodes.nodes.internal.mediaType'
		| 'contentNodes.nodes.internal.owner'
		| 'contentNodes.nodes.internal.type'
		| 'contentNodes.nodes.isContentNode'
		| 'contentNodes.nodes.isTermNode'
		| 'contentNodes.nodes.link'
		| 'contentNodes.nodes.modified'
		| 'contentNodes.nodes.modifiedGmt'
		| 'contentNodes.nodes.nodeType'
		| 'contentNodes.nodes.parent.children'
		| 'contentNodes.nodes.parent.id'
		| 'contentNodes.nodes.slug'
		| 'contentNodes.nodes.status'
		| 'contentNodes.nodes.template.templateName'
		| 'contentNodes.nodes.uri'
		| 'count'
		| 'databaseId'
		| 'description'
		| 'id'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'isContentNode'
		| 'isTermNode'
		| 'link'
		| 'name'
		| 'nodeType'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id'
		| 'posts.nodes'
		| 'posts.nodes.authorDatabaseId'
		| 'posts.nodes.authorId'
		| 'posts.nodes.categories.nodes'
		| 'posts.nodes.children'
		| 'posts.nodes.children.children'
		| 'posts.nodes.children.id'
		| 'posts.nodes.commentCount'
		| 'posts.nodes.commentStatus'
		| 'posts.nodes.comments.nodes'
		| 'posts.nodes.content'
		| 'posts.nodes.contentTypeName'
		| 'posts.nodes.databaseId'
		| 'posts.nodes.date'
		| 'posts.nodes.dateGmt'
		| 'posts.nodes.desiredSlug'
		| 'posts.nodes.enclosure'
		| 'posts.nodes.excerpt'
		| 'posts.nodes.featuredImageDatabaseId'
		| 'posts.nodes.featuredImageId'
		| 'posts.nodes.guid'
		| 'posts.nodes.id'
		| 'posts.nodes.internal.content'
		| 'posts.nodes.internal.contentDigest'
		| 'posts.nodes.internal.contentFilePath'
		| 'posts.nodes.internal.description'
		| 'posts.nodes.internal.fieldOwners'
		| 'posts.nodes.internal.ignoreType'
		| 'posts.nodes.internal.mediaType'
		| 'posts.nodes.internal.owner'
		| 'posts.nodes.internal.type'
		| 'posts.nodes.isContentNode'
		| 'posts.nodes.isRevision'
		| 'posts.nodes.isSticky'
		| 'posts.nodes.isTermNode'
		| 'posts.nodes.link'
		| 'posts.nodes.modified'
		| 'posts.nodes.modifiedGmt'
		| 'posts.nodes.nodeType'
		| 'posts.nodes.parent.children'
		| 'posts.nodes.parent.id'
		| 'posts.nodes.pingStatus'
		| 'posts.nodes.pinged'
		| 'posts.nodes.postFormats.nodes'
		| 'posts.nodes.slug'
		| 'posts.nodes.status'
		| 'posts.nodes.tags.nodes'
		| 'posts.nodes.template.templateName'
		| 'posts.nodes.terms.nodes'
		| 'posts.nodes.title'
		| 'posts.nodes.toPing'
		| 'posts.nodes.uri'
		| 'slug'
		| 'taxonomyName'
		| 'taxonomy.node.archivePath'
		| 'taxonomy.node.children'
		| 'taxonomy.node.children.children'
		| 'taxonomy.node.children.id'
		| 'taxonomy.node.connectedContentTypes.nodes'
		| 'taxonomy.node.description'
		| 'taxonomy.node.graphqlPluralName'
		| 'taxonomy.node.graphqlSingleName'
		| 'taxonomy.node.hierarchical'
		| 'taxonomy.node.id'
		| 'taxonomy.node.internal.content'
		| 'taxonomy.node.internal.contentDigest'
		| 'taxonomy.node.internal.contentFilePath'
		| 'taxonomy.node.internal.description'
		| 'taxonomy.node.internal.fieldOwners'
		| 'taxonomy.node.internal.ignoreType'
		| 'taxonomy.node.internal.mediaType'
		| 'taxonomy.node.internal.owner'
		| 'taxonomy.node.internal.type'
		| 'taxonomy.node.label'
		| 'taxonomy.node.name'
		| 'taxonomy.node.nodeType'
		| 'taxonomy.node.parent.children'
		| 'taxonomy.node.parent.id'
		| 'taxonomy.node.public'
		| 'taxonomy.node.restBase'
		| 'taxonomy.node.restControllerClass'
		| 'taxonomy.node.showCloud'
		| 'taxonomy.node.showInAdminColumn'
		| 'taxonomy.node.showInGraphql'
		| 'taxonomy.node.showInMenu'
		| 'taxonomy.node.showInNavMenus'
		| 'taxonomy.node.showInQuickEdit'
		| 'taxonomy.node.showInRest'
		| 'taxonomy.node.showUi'
		| 'termGroupId'
		| 'termTaxonomyId'
		| 'uri';

	type WpPostFormatFilterInput = {
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly contentNodes: InputMaybe<WpPostFormatToContentNodeConnectionTypeFilterInput>;
		readonly count: InputMaybe<IntQueryOperatorInput>;
		readonly databaseId: InputMaybe<IntQueryOperatorInput>;
		readonly description: InputMaybe<StringQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly isContentNode: InputMaybe<BooleanQueryOperatorInput>;
		readonly isTermNode: InputMaybe<BooleanQueryOperatorInput>;
		readonly link: InputMaybe<StringQueryOperatorInput>;
		readonly name: InputMaybe<StringQueryOperatorInput>;
		readonly nodeType: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly posts: InputMaybe<WpPostFormatToPostConnectionTypeFilterInput>;
		readonly slug: InputMaybe<StringQueryOperatorInput>;
		readonly taxonomy: InputMaybe<WpPostFormatToTaxonomyConnectionEdgeTypeFilterInput>;
		readonly taxonomyName: InputMaybe<StringQueryOperatorInput>;
		readonly termGroupId: InputMaybe<IntQueryOperatorInput>;
		readonly termTaxonomyId: InputMaybe<IntQueryOperatorInput>;
		readonly uri: InputMaybe<StringQueryOperatorInput>;
	};

	type WpPostFormatFilterListInput = {
		readonly elemMatch: InputMaybe<WpPostFormatFilterInput>;
	};

	type WpPostFormatGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpPostFormatEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<WpPostFormatGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpPostFormat>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpPostFormatGroupConnection_distinctArgs = {
		field: WpPostFormatFieldsEnum;
	};

	type WpPostFormatGroupConnection_groupArgs = {
		field: WpPostFormatFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpPostFormatGroupConnection_maxArgs = {
		field: WpPostFormatFieldsEnum;
	};

	type WpPostFormatGroupConnection_minArgs = {
		field: WpPostFormatFieldsEnum;
	};

	type WpPostFormatGroupConnection_sumArgs = {
		field: WpPostFormatFieldsEnum;
	};

	type WpPostFormatSortInput = {
		readonly fields: InputMaybe<
			ReadonlyArray<InputMaybe<WpPostFormatFieldsEnum>>
		>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	/** Connection between the PostFormat type and the ContentNode type */
	type WpPostFormatToContentNodeConnectionType = WpConnectionType &
		WpContentNodeConnectionType & {
			/** The nodes of the connection, without the edges */
			readonly nodes: ReadonlyArray<WpContentNode>;
		};

	type WpPostFormatToContentNodeConnectionTypeFilterInput = {
		readonly nodes: InputMaybe<WpContentNodeFilterListInput>;
	};

	/** Connection between the PostFormat type and the post type */
	type WpPostFormatToPostConnectionType = WpConnectionType &
		WpPostConnectionType & {
			/** The nodes of the connection, without the edges */
			readonly nodes: ReadonlyArray<WpPost>;
		};

	type WpPostFormatToPostConnectionTypeFilterInput = {
		readonly nodes: InputMaybe<WpPostFilterListInput>;
	};

	/** Connection between the PostFormat type and the Taxonomy type */
	type WpPostFormatToTaxonomyConnectionEdgeType = WpEdgeType &
		WpOneToOneConnectionType &
		WpTaxonomyConnectionEdgeType & {
			/** The node of the connection, without the edges */
			readonly node: WpTaxonomy;
		};

	type WpPostFormatToTaxonomyConnectionEdgeTypeFilterInput = {
		readonly node: InputMaybe<WpTaxonomyFilterInput>;
	};

	type WpPostGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpPostEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<WpPostGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpPost>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpPostGroupConnection_distinctArgs = {
		field: WpPostFieldsEnum;
	};

	type WpPostGroupConnection_groupArgs = {
		field: WpPostFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpPostGroupConnection_maxArgs = {
		field: WpPostFieldsEnum;
	};

	type WpPostGroupConnection_minArgs = {
		field: WpPostFieldsEnum;
	};

	type WpPostGroupConnection_sumArgs = {
		field: WpPostFieldsEnum;
	};

	type WpPostSortInput = {
		readonly fields: InputMaybe<ReadonlyArray<InputMaybe<WpPostFieldsEnum>>>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	/** Connection between the Post type and the category type */
	type WpPostToCategoryConnectionType = WpCategoryConnectionType &
		WpConnectionType & {
			/** The nodes of the connection, without the edges */
			readonly nodes: ReadonlyArray<WpCategory>;
		};

	type WpPostToCategoryConnectionTypeFilterInput = {
		readonly nodes: InputMaybe<WpCategoryFilterListInput>;
	};

	/** Connection between the Post type and the Comment type */
	type WpPostToCommentConnectionType = WpCommentConnectionType &
		WpConnectionType & {
			/** The nodes of the connection, without the edges */
			readonly nodes: ReadonlyArray<WpComment>;
		};

	type WpPostToCommentConnectionTypeFilterInput = {
		readonly nodes: InputMaybe<WpCommentFilterListInput>;
	};

	/** Connection between the Post type and the postFormat type */
	type WpPostToPostFormatConnectionType = WpConnectionType &
		WpPostFormatConnectionType & {
			/** The nodes of the connection, without the edges */
			readonly nodes: ReadonlyArray<WpPostFormat>;
		};

	type WpPostToPostFormatConnectionTypeFilterInput = {
		readonly nodes: InputMaybe<WpPostFormatFilterListInput>;
	};

	/** Connection between the Post type and the tag type */
	type WpPostToTagConnectionType = WpConnectionType &
		WpTagConnectionType & {
			/** The nodes of the connection, without the edges */
			readonly nodes: ReadonlyArray<WpTag>;
		};

	type WpPostToTagConnectionTypeFilterInput = {
		readonly nodes: InputMaybe<WpTagFilterListInput>;
	};

	/** Connection between the Post type and the TermNode type */
	type WpPostToTermNodeConnectionType = WpConnectionType &
		WpTermNodeConnectionType & {
			/** The nodes of the connection, without the edges */
			readonly nodes: ReadonlyArray<WpTermNode>;
		};

	type WpPostToTermNodeConnectionTypeFilterInput = {
		readonly nodes: InputMaybe<WpTermNodeFilterListInput>;
	};

	/** Details for labels of the PostType */
	type WpPostTypeLabelDetails = {
		/** Default is ‘Add New’ for both hierarchical and non-hierarchical types. */
		readonly addNew: Maybe<Scalars['String']>;
		/** Label for adding a new singular item. */
		readonly addNewItem: Maybe<Scalars['String']>;
		/** Label to signify all items in a submenu link. */
		readonly allItems: Maybe<Scalars['String']>;
		/** Label for archives in nav menus */
		readonly archives: Maybe<Scalars['String']>;
		/** Label for the attributes meta box. */
		readonly attributes: Maybe<Scalars['String']>;
		/** Label for editing a singular item. */
		readonly editItem: Maybe<Scalars['String']>;
		/** Label for the Featured Image meta box title. */
		readonly featuredImage: Maybe<Scalars['String']>;
		/** Label for the table views hidden heading. */
		readonly filterItemsList: Maybe<Scalars['String']>;
		/** Label for the media frame button. */
		readonly insertIntoItem: Maybe<Scalars['String']>;
		/** Label for the table hidden heading. */
		readonly itemsList: Maybe<Scalars['String']>;
		/** Label for the table pagination hidden heading. */
		readonly itemsListNavigation: Maybe<Scalars['String']>;
		/** Label for the menu name. */
		readonly menuName: Maybe<Scalars['String']>;
		/** General name for the post type, usually plural. */
		readonly name: Maybe<Scalars['String']>;
		/** Label for the new item page title. */
		readonly newItem: Maybe<Scalars['String']>;
		/** Label used when no items are found. */
		readonly notFound: Maybe<Scalars['String']>;
		/** Label used when no items are in the trash. */
		readonly notFoundInTrash: Maybe<Scalars['String']>;
		/** Label used to prefix parents of hierarchical items. */
		readonly parentItemColon: Maybe<Scalars['String']>;
		/** Label for removing the featured image. */
		readonly removeFeaturedImage: Maybe<Scalars['String']>;
		/** Label for searching plural items. */
		readonly searchItems: Maybe<Scalars['String']>;
		/** Label for setting the featured image. */
		readonly setFeaturedImage: Maybe<Scalars['String']>;
		/** Name for one object of this post type. */
		readonly singularName: Maybe<Scalars['String']>;
		/** Label for the media frame filter. */
		readonly uploadedToThisItem: Maybe<Scalars['String']>;
		/** Label in the media frame for using a featured image. */
		readonly useFeaturedImage: Maybe<Scalars['String']>;
		/** Label for viewing a singular item. */
		readonly viewItem: Maybe<Scalars['String']>;
		/** Label for viewing post type archives. */
		readonly viewItems: Maybe<Scalars['String']>;
	};

	type WpPostTypeLabelDetailsFilterInput = {
		readonly addNew: InputMaybe<StringQueryOperatorInput>;
		readonly addNewItem: InputMaybe<StringQueryOperatorInput>;
		readonly allItems: InputMaybe<StringQueryOperatorInput>;
		readonly archives: InputMaybe<StringQueryOperatorInput>;
		readonly attributes: InputMaybe<StringQueryOperatorInput>;
		readonly editItem: InputMaybe<StringQueryOperatorInput>;
		readonly featuredImage: InputMaybe<StringQueryOperatorInput>;
		readonly filterItemsList: InputMaybe<StringQueryOperatorInput>;
		readonly insertIntoItem: InputMaybe<StringQueryOperatorInput>;
		readonly itemsList: InputMaybe<StringQueryOperatorInput>;
		readonly itemsListNavigation: InputMaybe<StringQueryOperatorInput>;
		readonly menuName: InputMaybe<StringQueryOperatorInput>;
		readonly name: InputMaybe<StringQueryOperatorInput>;
		readonly newItem: InputMaybe<StringQueryOperatorInput>;
		readonly notFound: InputMaybe<StringQueryOperatorInput>;
		readonly notFoundInTrash: InputMaybe<StringQueryOperatorInput>;
		readonly parentItemColon: InputMaybe<StringQueryOperatorInput>;
		readonly removeFeaturedImage: InputMaybe<StringQueryOperatorInput>;
		readonly searchItems: InputMaybe<StringQueryOperatorInput>;
		readonly setFeaturedImage: InputMaybe<StringQueryOperatorInput>;
		readonly singularName: InputMaybe<StringQueryOperatorInput>;
		readonly uploadedToThisItem: InputMaybe<StringQueryOperatorInput>;
		readonly useFeaturedImage: InputMaybe<StringQueryOperatorInput>;
		readonly viewItem: InputMaybe<StringQueryOperatorInput>;
		readonly viewItems: InputMaybe<StringQueryOperatorInput>;
	};

	/** The reading setting type */
	type WpReadingSettings = {
		/** The ID of the page that should display the latest posts */
		readonly pageForPosts: Maybe<Scalars['Int']>;
		/** The ID of the page that should be displayed on the front page */
		readonly pageOnFront: Maybe<Scalars['Int']>;
		/** Blog pages show at most. */
		readonly postsPerPage: Maybe<Scalars['Int']>;
		/** What to show on the front page */
		readonly showOnFront: Maybe<Scalars['String']>;
	};

	type WpReadingSettingsFilterInput = {
		readonly pageForPosts: InputMaybe<IntQueryOperatorInput>;
		readonly pageOnFront: InputMaybe<IntQueryOperatorInput>;
		readonly postsPerPage: InputMaybe<IntQueryOperatorInput>;
		readonly showOnFront: InputMaybe<StringQueryOperatorInput>;
	};

	/** All of the registered settings */
	type WpSettings = {
		/** Settings of the the string Settings Group */
		readonly discussionSettingsDefaultCommentStatus: Maybe<Scalars['String']>;
		/** Settings of the the string Settings Group */
		readonly discussionSettingsDefaultPingStatus: Maybe<Scalars['String']>;
		/** Settings of the the string Settings Group */
		readonly generalSettingsDateFormat: Maybe<Scalars['String']>;
		/** Settings of the the string Settings Group */
		readonly generalSettingsDescription: Maybe<Scalars['String']>;
		/** Settings of the the string Settings Group */
		readonly generalSettingsEmail: Maybe<Scalars['String']>;
		/** Settings of the the string Settings Group */
		readonly generalSettingsLanguage: Maybe<Scalars['String']>;
		/** Settings of the the integer Settings Group */
		readonly generalSettingsStartOfWeek: Maybe<Scalars['Int']>;
		/** Settings of the the string Settings Group */
		readonly generalSettingsTimeFormat: Maybe<Scalars['String']>;
		/** Settings of the the string Settings Group */
		readonly generalSettingsTimezone: Maybe<Scalars['String']>;
		/** Settings of the the string Settings Group */
		readonly generalSettingsTitle: Maybe<Scalars['String']>;
		/** Settings of the the string Settings Group */
		readonly generalSettingsUrl: Maybe<Scalars['String']>;
		/** Settings of the the integer Settings Group */
		readonly readingSettingsPageForPosts: Maybe<Scalars['Int']>;
		/** Settings of the the integer Settings Group */
		readonly readingSettingsPageOnFront: Maybe<Scalars['Int']>;
		/** Settings of the the integer Settings Group */
		readonly readingSettingsPostsPerPage: Maybe<Scalars['Int']>;
		/** Settings of the the string Settings Group */
		readonly readingSettingsShowOnFront: Maybe<Scalars['String']>;
		/** Settings of the the integer Settings Group */
		readonly writingSettingsDefaultCategory: Maybe<Scalars['Int']>;
		/** Settings of the the string Settings Group */
		readonly writingSettingsDefaultPostFormat: Maybe<Scalars['String']>;
		/** Settings of the the boolean Settings Group */
		readonly writingSettingsUseSmilies: Maybe<Scalars['Boolean']>;
	};

	type WpSettingsFilterInput = {
		readonly discussionSettingsDefaultCommentStatus: InputMaybe<StringQueryOperatorInput>;
		readonly discussionSettingsDefaultPingStatus: InputMaybe<StringQueryOperatorInput>;
		readonly generalSettingsDateFormat: InputMaybe<StringQueryOperatorInput>;
		readonly generalSettingsDescription: InputMaybe<StringQueryOperatorInput>;
		readonly generalSettingsEmail: InputMaybe<StringQueryOperatorInput>;
		readonly generalSettingsLanguage: InputMaybe<StringQueryOperatorInput>;
		readonly generalSettingsStartOfWeek: InputMaybe<IntQueryOperatorInput>;
		readonly generalSettingsTimeFormat: InputMaybe<StringQueryOperatorInput>;
		readonly generalSettingsTimezone: InputMaybe<StringQueryOperatorInput>;
		readonly generalSettingsTitle: InputMaybe<StringQueryOperatorInput>;
		readonly generalSettingsUrl: InputMaybe<StringQueryOperatorInput>;
		readonly readingSettingsPageForPosts: InputMaybe<IntQueryOperatorInput>;
		readonly readingSettingsPageOnFront: InputMaybe<IntQueryOperatorInput>;
		readonly readingSettingsPostsPerPage: InputMaybe<IntQueryOperatorInput>;
		readonly readingSettingsShowOnFront: InputMaybe<StringQueryOperatorInput>;
		readonly writingSettingsDefaultCategory: InputMaybe<IntQueryOperatorInput>;
		readonly writingSettingsDefaultPostFormat: InputMaybe<StringQueryOperatorInput>;
		readonly writingSettingsUseSmilies: InputMaybe<BooleanQueryOperatorInput>;
	};

	type WpSortInput = {
		readonly fields: InputMaybe<ReadonlyArray<InputMaybe<WpFieldsEnum>>>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	/** The tag type */
	type WpTag = Node &
		WpDatabaseIdentifier &
		WpMenuItemLinkable &
		WpNode &
		WpTermNode &
		WpUniformResourceIdentifiable & {
			readonly children: ReadonlyArray<Node>;
			/** Connection between the Tag type and the ContentNode type */
			readonly contentNodes: Maybe<WpTagToContentNodeConnectionType>;
			/** The number of objects connected to the object */
			readonly count: Maybe<Scalars['Int']>;
			/** The unique identifier stored in the database */
			readonly databaseId: Scalars['Int'];
			/** The description of the object */
			readonly description: Maybe<Scalars['String']>;
			readonly id: Scalars['ID'];
			readonly internal: Internal;
			/** Whether the node is a Content Node */
			readonly isContentNode: Scalars['Boolean'];
			/** Whether the node is a Term */
			readonly isTermNode: Scalars['Boolean'];
			/** The link to the term */
			readonly link: Maybe<Scalars['String']>;
			/** The human friendly name of the object. */
			readonly name: Maybe<Scalars['String']>;
			readonly nodeType: Maybe<Scalars['String']>;
			readonly parent: Maybe<Node>;
			/** Connection between the Tag type and the post type */
			readonly posts: Maybe<WpTagToPostConnectionType>;
			/** An alphanumeric identifier for the object unique to its type. */
			readonly slug: Maybe<Scalars['String']>;
			/** Connection between the Tag type and the Taxonomy type */
			readonly taxonomy: Maybe<WpTagToTaxonomyConnectionEdgeType>;
			/** The name of the taxonomy that the object is associated with */
			readonly taxonomyName: Maybe<Scalars['String']>;
			/** The ID of the term group that this term object belongs to */
			readonly termGroupId: Maybe<Scalars['Int']>;
			/** The taxonomy ID that the object is associated with */
			readonly termTaxonomyId: Maybe<Scalars['Int']>;
			/** The unique resource identifier path */
			readonly uri: Maybe<Scalars['String']>;
		};

	type WpTagConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpTagEdge>;
		readonly group: ReadonlyArray<WpTagGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpTag>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpTagConnection_distinctArgs = {
		field: WpTagFieldsEnum;
	};

	type WpTagConnection_groupArgs = {
		field: WpTagFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpTagConnection_maxArgs = {
		field: WpTagFieldsEnum;
	};

	type WpTagConnection_minArgs = {
		field: WpTagFieldsEnum;
	};

	type WpTagConnection_sumArgs = {
		field: WpTagFieldsEnum;
	};

	type WpTagConnectionEdgeType = {
		/** The connected tag Node */
		readonly node: WpTag;
	};

	type WpTagConnectionType = {
		/** A list of connected tag Nodes */
		readonly nodes: ReadonlyArray<WpTag>;
	};

	type WpTagEdge = {
		readonly next: Maybe<WpTag>;
		readonly node: WpTag;
		readonly previous: Maybe<WpTag>;
	};

	type WpTagFieldsEnum =
		| 'children'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'contentNodes.nodes'
		| 'contentNodes.nodes.children'
		| 'contentNodes.nodes.children.children'
		| 'contentNodes.nodes.children.id'
		| 'contentNodes.nodes.contentTypeName'
		| 'contentNodes.nodes.databaseId'
		| 'contentNodes.nodes.date'
		| 'contentNodes.nodes.dateGmt'
		| 'contentNodes.nodes.desiredSlug'
		| 'contentNodes.nodes.enclosure'
		| 'contentNodes.nodes.guid'
		| 'contentNodes.nodes.id'
		| 'contentNodes.nodes.internal.content'
		| 'contentNodes.nodes.internal.contentDigest'
		| 'contentNodes.nodes.internal.contentFilePath'
		| 'contentNodes.nodes.internal.description'
		| 'contentNodes.nodes.internal.fieldOwners'
		| 'contentNodes.nodes.internal.ignoreType'
		| 'contentNodes.nodes.internal.mediaType'
		| 'contentNodes.nodes.internal.owner'
		| 'contentNodes.nodes.internal.type'
		| 'contentNodes.nodes.isContentNode'
		| 'contentNodes.nodes.isTermNode'
		| 'contentNodes.nodes.link'
		| 'contentNodes.nodes.modified'
		| 'contentNodes.nodes.modifiedGmt'
		| 'contentNodes.nodes.nodeType'
		| 'contentNodes.nodes.parent.children'
		| 'contentNodes.nodes.parent.id'
		| 'contentNodes.nodes.slug'
		| 'contentNodes.nodes.status'
		| 'contentNodes.nodes.template.templateName'
		| 'contentNodes.nodes.uri'
		| 'count'
		| 'databaseId'
		| 'description'
		| 'id'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'isContentNode'
		| 'isTermNode'
		| 'link'
		| 'name'
		| 'nodeType'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id'
		| 'posts.nodes'
		| 'posts.nodes.authorDatabaseId'
		| 'posts.nodes.authorId'
		| 'posts.nodes.categories.nodes'
		| 'posts.nodes.children'
		| 'posts.nodes.children.children'
		| 'posts.nodes.children.id'
		| 'posts.nodes.commentCount'
		| 'posts.nodes.commentStatus'
		| 'posts.nodes.comments.nodes'
		| 'posts.nodes.content'
		| 'posts.nodes.contentTypeName'
		| 'posts.nodes.databaseId'
		| 'posts.nodes.date'
		| 'posts.nodes.dateGmt'
		| 'posts.nodes.desiredSlug'
		| 'posts.nodes.enclosure'
		| 'posts.nodes.excerpt'
		| 'posts.nodes.featuredImageDatabaseId'
		| 'posts.nodes.featuredImageId'
		| 'posts.nodes.guid'
		| 'posts.nodes.id'
		| 'posts.nodes.internal.content'
		| 'posts.nodes.internal.contentDigest'
		| 'posts.nodes.internal.contentFilePath'
		| 'posts.nodes.internal.description'
		| 'posts.nodes.internal.fieldOwners'
		| 'posts.nodes.internal.ignoreType'
		| 'posts.nodes.internal.mediaType'
		| 'posts.nodes.internal.owner'
		| 'posts.nodes.internal.type'
		| 'posts.nodes.isContentNode'
		| 'posts.nodes.isRevision'
		| 'posts.nodes.isSticky'
		| 'posts.nodes.isTermNode'
		| 'posts.nodes.link'
		| 'posts.nodes.modified'
		| 'posts.nodes.modifiedGmt'
		| 'posts.nodes.nodeType'
		| 'posts.nodes.parent.children'
		| 'posts.nodes.parent.id'
		| 'posts.nodes.pingStatus'
		| 'posts.nodes.pinged'
		| 'posts.nodes.postFormats.nodes'
		| 'posts.nodes.slug'
		| 'posts.nodes.status'
		| 'posts.nodes.tags.nodes'
		| 'posts.nodes.template.templateName'
		| 'posts.nodes.terms.nodes'
		| 'posts.nodes.title'
		| 'posts.nodes.toPing'
		| 'posts.nodes.uri'
		| 'slug'
		| 'taxonomyName'
		| 'taxonomy.node.archivePath'
		| 'taxonomy.node.children'
		| 'taxonomy.node.children.children'
		| 'taxonomy.node.children.id'
		| 'taxonomy.node.connectedContentTypes.nodes'
		| 'taxonomy.node.description'
		| 'taxonomy.node.graphqlPluralName'
		| 'taxonomy.node.graphqlSingleName'
		| 'taxonomy.node.hierarchical'
		| 'taxonomy.node.id'
		| 'taxonomy.node.internal.content'
		| 'taxonomy.node.internal.contentDigest'
		| 'taxonomy.node.internal.contentFilePath'
		| 'taxonomy.node.internal.description'
		| 'taxonomy.node.internal.fieldOwners'
		| 'taxonomy.node.internal.ignoreType'
		| 'taxonomy.node.internal.mediaType'
		| 'taxonomy.node.internal.owner'
		| 'taxonomy.node.internal.type'
		| 'taxonomy.node.label'
		| 'taxonomy.node.name'
		| 'taxonomy.node.nodeType'
		| 'taxonomy.node.parent.children'
		| 'taxonomy.node.parent.id'
		| 'taxonomy.node.public'
		| 'taxonomy.node.restBase'
		| 'taxonomy.node.restControllerClass'
		| 'taxonomy.node.showCloud'
		| 'taxonomy.node.showInAdminColumn'
		| 'taxonomy.node.showInGraphql'
		| 'taxonomy.node.showInMenu'
		| 'taxonomy.node.showInNavMenus'
		| 'taxonomy.node.showInQuickEdit'
		| 'taxonomy.node.showInRest'
		| 'taxonomy.node.showUi'
		| 'termGroupId'
		| 'termTaxonomyId'
		| 'uri';

	type WpTagFilterInput = {
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly contentNodes: InputMaybe<WpTagToContentNodeConnectionTypeFilterInput>;
		readonly count: InputMaybe<IntQueryOperatorInput>;
		readonly databaseId: InputMaybe<IntQueryOperatorInput>;
		readonly description: InputMaybe<StringQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly isContentNode: InputMaybe<BooleanQueryOperatorInput>;
		readonly isTermNode: InputMaybe<BooleanQueryOperatorInput>;
		readonly link: InputMaybe<StringQueryOperatorInput>;
		readonly name: InputMaybe<StringQueryOperatorInput>;
		readonly nodeType: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly posts: InputMaybe<WpTagToPostConnectionTypeFilterInput>;
		readonly slug: InputMaybe<StringQueryOperatorInput>;
		readonly taxonomy: InputMaybe<WpTagToTaxonomyConnectionEdgeTypeFilterInput>;
		readonly taxonomyName: InputMaybe<StringQueryOperatorInput>;
		readonly termGroupId: InputMaybe<IntQueryOperatorInput>;
		readonly termTaxonomyId: InputMaybe<IntQueryOperatorInput>;
		readonly uri: InputMaybe<StringQueryOperatorInput>;
	};

	type WpTagFilterListInput = {
		readonly elemMatch: InputMaybe<WpTagFilterInput>;
	};

	type WpTagGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpTagEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<WpTagGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpTag>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpTagGroupConnection_distinctArgs = {
		field: WpTagFieldsEnum;
	};

	type WpTagGroupConnection_groupArgs = {
		field: WpTagFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpTagGroupConnection_maxArgs = {
		field: WpTagFieldsEnum;
	};

	type WpTagGroupConnection_minArgs = {
		field: WpTagFieldsEnum;
	};

	type WpTagGroupConnection_sumArgs = {
		field: WpTagFieldsEnum;
	};

	type WpTagSortInput = {
		readonly fields: InputMaybe<ReadonlyArray<InputMaybe<WpTagFieldsEnum>>>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	/** Connection between the Tag type and the ContentNode type */
	type WpTagToContentNodeConnectionType = WpConnectionType &
		WpContentNodeConnectionType & {
			/** The nodes of the connection, without the edges */
			readonly nodes: ReadonlyArray<WpContentNode>;
		};

	type WpTagToContentNodeConnectionTypeFilterInput = {
		readonly nodes: InputMaybe<WpContentNodeFilterListInput>;
	};

	/** Connection between the Tag type and the post type */
	type WpTagToPostConnectionType = WpConnectionType &
		WpPostConnectionType & {
			/** The nodes of the connection, without the edges */
			readonly nodes: ReadonlyArray<WpPost>;
		};

	type WpTagToPostConnectionTypeFilterInput = {
		readonly nodes: InputMaybe<WpPostFilterListInput>;
	};

	/** Connection between the Tag type and the Taxonomy type */
	type WpTagToTaxonomyConnectionEdgeType = WpEdgeType &
		WpOneToOneConnectionType &
		WpTaxonomyConnectionEdgeType & {
			/** The node of the connection, without the edges */
			readonly node: WpTaxonomy;
		};

	type WpTagToTaxonomyConnectionEdgeTypeFilterInput = {
		readonly node: InputMaybe<WpTaxonomyFilterInput>;
	};

	/** A taxonomy object */
	type WpTaxonomy = Node &
		WpNode & {
			/** The url path of the first page of the archive page for this content type. */
			readonly archivePath: Maybe<Scalars['String']>;
			readonly children: ReadonlyArray<Node>;
			/** List of Content Types associated with the Taxonomy */
			readonly connectedContentTypes: Maybe<WpTaxonomyToContentTypeConnectionType>;
			/** Description of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;description */
			readonly description: Maybe<Scalars['String']>;
			/** The plural name of the post type within the GraphQL Schema. */
			readonly graphqlPluralName: Maybe<Scalars['String']>;
			/** The singular name of the post type within the GraphQL Schema. */
			readonly graphqlSingleName: Maybe<Scalars['String']>;
			/** Whether the taxonomy is hierarchical */
			readonly hierarchical: Maybe<Scalars['Boolean']>;
			readonly id: Scalars['ID'];
			readonly internal: Internal;
			/** Name of the taxonomy shown in the menu. Usually plural. */
			readonly label: Maybe<Scalars['String']>;
			/** The display name of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;label */
			readonly name: Maybe<Scalars['String']>;
			readonly nodeType: Maybe<Scalars['String']>;
			readonly parent: Maybe<Node>;
			/** Whether the taxonomy is publicly queryable */
			readonly public: Maybe<Scalars['Boolean']>;
			/** Name of content type to diplay in REST API &quot;wp/v2&quot; namespace. */
			readonly restBase: Maybe<Scalars['String']>;
			/** The REST Controller class assigned to handling this content type. */
			readonly restControllerClass: Maybe<Scalars['String']>;
			/** Whether to show the taxonomy as part of a tag cloud widget. This field is equivalent to WP_Taxonomy-&gt;show_tagcloud */
			readonly showCloud: Maybe<Scalars['Boolean']>;
			/** Whether to display a column for the taxonomy on its post type listing screens. */
			readonly showInAdminColumn: Maybe<Scalars['Boolean']>;
			/** Whether to add the post type to the GraphQL Schema. */
			readonly showInGraphql: Maybe<Scalars['Boolean']>;
			/** Whether to show the taxonomy in the admin menu */
			readonly showInMenu: Maybe<Scalars['Boolean']>;
			/** Whether the taxonomy is available for selection in navigation menus. */
			readonly showInNavMenus: Maybe<Scalars['Boolean']>;
			/** Whether to show the taxonomy in the quick/bulk edit panel. */
			readonly showInQuickEdit: Maybe<Scalars['Boolean']>;
			/** Whether to add the post type route in the REST API &quot;wp/v2&quot; namespace. */
			readonly showInRest: Maybe<Scalars['Boolean']>;
			/** Whether to generate and allow a UI for managing terms in this taxonomy in the admin */
			readonly showUi: Maybe<Scalars['Boolean']>;
		};

	type WpTaxonomyConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpTaxonomyEdge>;
		readonly group: ReadonlyArray<WpTaxonomyGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpTaxonomy>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpTaxonomyConnection_distinctArgs = {
		field: WpTaxonomyFieldsEnum;
	};

	type WpTaxonomyConnection_groupArgs = {
		field: WpTaxonomyFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpTaxonomyConnection_maxArgs = {
		field: WpTaxonomyFieldsEnum;
	};

	type WpTaxonomyConnection_minArgs = {
		field: WpTaxonomyFieldsEnum;
	};

	type WpTaxonomyConnection_sumArgs = {
		field: WpTaxonomyFieldsEnum;
	};

	type WpTaxonomyConnectionEdgeType = {
		/** The connected Taxonomy Node */
		readonly node: WpTaxonomy;
	};

	type WpTaxonomyConnectionType = {
		/** A list of connected Taxonomy Nodes */
		readonly nodes: ReadonlyArray<WpTaxonomy>;
	};

	type WpTaxonomyEdge = {
		readonly next: Maybe<WpTaxonomy>;
		readonly node: WpTaxonomy;
		readonly previous: Maybe<WpTaxonomy>;
	};

	type WpTaxonomyFieldsEnum =
		| 'archivePath'
		| 'children'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'connectedContentTypes.nodes'
		| 'connectedContentTypes.nodes.archivePath'
		| 'connectedContentTypes.nodes.canExport'
		| 'connectedContentTypes.nodes.children'
		| 'connectedContentTypes.nodes.children.children'
		| 'connectedContentTypes.nodes.children.id'
		| 'connectedContentTypes.nodes.connectedTaxonomies.nodes'
		| 'connectedContentTypes.nodes.contentNodes.nodes'
		| 'connectedContentTypes.nodes.deleteWithUser'
		| 'connectedContentTypes.nodes.description'
		| 'connectedContentTypes.nodes.excludeFromSearch'
		| 'connectedContentTypes.nodes.graphqlPluralName'
		| 'connectedContentTypes.nodes.graphqlSingleName'
		| 'connectedContentTypes.nodes.hasArchive'
		| 'connectedContentTypes.nodes.hierarchical'
		| 'connectedContentTypes.nodes.id'
		| 'connectedContentTypes.nodes.internal.content'
		| 'connectedContentTypes.nodes.internal.contentDigest'
		| 'connectedContentTypes.nodes.internal.contentFilePath'
		| 'connectedContentTypes.nodes.internal.description'
		| 'connectedContentTypes.nodes.internal.fieldOwners'
		| 'connectedContentTypes.nodes.internal.ignoreType'
		| 'connectedContentTypes.nodes.internal.mediaType'
		| 'connectedContentTypes.nodes.internal.owner'
		| 'connectedContentTypes.nodes.internal.type'
		| 'connectedContentTypes.nodes.isContentNode'
		| 'connectedContentTypes.nodes.isFrontPage'
		| 'connectedContentTypes.nodes.isPostsPage'
		| 'connectedContentTypes.nodes.isTermNode'
		| 'connectedContentTypes.nodes.label'
		| 'connectedContentTypes.nodes.labels.addNew'
		| 'connectedContentTypes.nodes.labels.addNewItem'
		| 'connectedContentTypes.nodes.labels.allItems'
		| 'connectedContentTypes.nodes.labels.archives'
		| 'connectedContentTypes.nodes.labels.attributes'
		| 'connectedContentTypes.nodes.labels.editItem'
		| 'connectedContentTypes.nodes.labels.featuredImage'
		| 'connectedContentTypes.nodes.labels.filterItemsList'
		| 'connectedContentTypes.nodes.labels.insertIntoItem'
		| 'connectedContentTypes.nodes.labels.itemsList'
		| 'connectedContentTypes.nodes.labels.itemsListNavigation'
		| 'connectedContentTypes.nodes.labels.menuName'
		| 'connectedContentTypes.nodes.labels.name'
		| 'connectedContentTypes.nodes.labels.newItem'
		| 'connectedContentTypes.nodes.labels.notFound'
		| 'connectedContentTypes.nodes.labels.notFoundInTrash'
		| 'connectedContentTypes.nodes.labels.parentItemColon'
		| 'connectedContentTypes.nodes.labels.removeFeaturedImage'
		| 'connectedContentTypes.nodes.labels.searchItems'
		| 'connectedContentTypes.nodes.labels.setFeaturedImage'
		| 'connectedContentTypes.nodes.labels.singularName'
		| 'connectedContentTypes.nodes.labels.uploadedToThisItem'
		| 'connectedContentTypes.nodes.labels.useFeaturedImage'
		| 'connectedContentTypes.nodes.labels.viewItem'
		| 'connectedContentTypes.nodes.labels.viewItems'
		| 'connectedContentTypes.nodes.menuIcon'
		| 'connectedContentTypes.nodes.menuPosition'
		| 'connectedContentTypes.nodes.name'
		| 'connectedContentTypes.nodes.nodeType'
		| 'connectedContentTypes.nodes.parent.children'
		| 'connectedContentTypes.nodes.parent.id'
		| 'connectedContentTypes.nodes.public'
		| 'connectedContentTypes.nodes.publiclyQueryable'
		| 'connectedContentTypes.nodes.restBase'
		| 'connectedContentTypes.nodes.restControllerClass'
		| 'connectedContentTypes.nodes.showInAdminBar'
		| 'connectedContentTypes.nodes.showInGraphql'
		| 'connectedContentTypes.nodes.showInMenu'
		| 'connectedContentTypes.nodes.showInNavMenus'
		| 'connectedContentTypes.nodes.showInRest'
		| 'connectedContentTypes.nodes.showUi'
		| 'connectedContentTypes.nodes.uri'
		| 'description'
		| 'graphqlPluralName'
		| 'graphqlSingleName'
		| 'hierarchical'
		| 'id'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'label'
		| 'name'
		| 'nodeType'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id'
		| 'public'
		| 'restBase'
		| 'restControllerClass'
		| 'showCloud'
		| 'showInAdminColumn'
		| 'showInGraphql'
		| 'showInMenu'
		| 'showInNavMenus'
		| 'showInQuickEdit'
		| 'showInRest'
		| 'showUi';

	type WpTaxonomyFilterInput = {
		readonly archivePath: InputMaybe<StringQueryOperatorInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly connectedContentTypes: InputMaybe<WpTaxonomyToContentTypeConnectionTypeFilterInput>;
		readonly description: InputMaybe<StringQueryOperatorInput>;
		readonly graphqlPluralName: InputMaybe<StringQueryOperatorInput>;
		readonly graphqlSingleName: InputMaybe<StringQueryOperatorInput>;
		readonly hierarchical: InputMaybe<BooleanQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly label: InputMaybe<StringQueryOperatorInput>;
		readonly name: InputMaybe<StringQueryOperatorInput>;
		readonly nodeType: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly public: InputMaybe<BooleanQueryOperatorInput>;
		readonly restBase: InputMaybe<StringQueryOperatorInput>;
		readonly restControllerClass: InputMaybe<StringQueryOperatorInput>;
		readonly showCloud: InputMaybe<BooleanQueryOperatorInput>;
		readonly showInAdminColumn: InputMaybe<BooleanQueryOperatorInput>;
		readonly showInGraphql: InputMaybe<BooleanQueryOperatorInput>;
		readonly showInMenu: InputMaybe<BooleanQueryOperatorInput>;
		readonly showInNavMenus: InputMaybe<BooleanQueryOperatorInput>;
		readonly showInQuickEdit: InputMaybe<BooleanQueryOperatorInput>;
		readonly showInRest: InputMaybe<BooleanQueryOperatorInput>;
		readonly showUi: InputMaybe<BooleanQueryOperatorInput>;
	};

	type WpTaxonomyFilterListInput = {
		readonly elemMatch: InputMaybe<WpTaxonomyFilterInput>;
	};

	type WpTaxonomyGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpTaxonomyEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<WpTaxonomyGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpTaxonomy>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpTaxonomyGroupConnection_distinctArgs = {
		field: WpTaxonomyFieldsEnum;
	};

	type WpTaxonomyGroupConnection_groupArgs = {
		field: WpTaxonomyFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpTaxonomyGroupConnection_maxArgs = {
		field: WpTaxonomyFieldsEnum;
	};

	type WpTaxonomyGroupConnection_minArgs = {
		field: WpTaxonomyFieldsEnum;
	};

	type WpTaxonomyGroupConnection_sumArgs = {
		field: WpTaxonomyFieldsEnum;
	};

	type WpTaxonomySortInput = {
		readonly fields: InputMaybe<
			ReadonlyArray<InputMaybe<WpTaxonomyFieldsEnum>>
		>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	/** Connection between the Taxonomy type and the ContentType type */
	type WpTaxonomyToContentTypeConnectionType = WpConnectionType &
		WpContentTypeConnectionType & {
			/** The nodes of the connection, without the edges */
			readonly nodes: ReadonlyArray<WpContentType>;
		};

	type WpTaxonomyToContentTypeConnectionTypeFilterInput = {
		readonly nodes: InputMaybe<WpContentTypeFilterListInput>;
	};

	/** The template assigned to the node */
	type WpTemplate_Blank = WpContentTemplate & {
		/** The name of the template */
		readonly templateName: Maybe<Scalars['String']>;
	};

	/** The template assigned to the node */
	type WpTemplate_PageLargeHeader = WpContentTemplate & {
		/** The name of the template */
		readonly templateName: Maybe<Scalars['String']>;
	};

	/** The template assigned to the node */
	type WpTemplate_PageNoSeparators = WpContentTemplate & {
		/** The name of the template */
		readonly templateName: Maybe<Scalars['String']>;
	};

	/** The template assigned to the node */
	type WpTemplate_SinglePostNoSeparators = WpContentTemplate & {
		/** The name of the template */
		readonly templateName: Maybe<Scalars['String']>;
	};

	type WpTermNode = {
		readonly children: ReadonlyArray<Node>;
		/** The number of objects connected to the object */
		readonly count: Maybe<Scalars['Int']>;
		/** Identifies the primary key from the database. */
		readonly databaseId: Scalars['Int'];
		/** The description of the object */
		readonly description: Maybe<Scalars['String']>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		/** Whether the node is a Content Node */
		readonly isContentNode: Scalars['Boolean'];
		/** Whether the node is a Term */
		readonly isTermNode: Scalars['Boolean'];
		/** The link to the term */
		readonly link: Maybe<Scalars['String']>;
		/** The human friendly name of the object. */
		readonly name: Maybe<Scalars['String']>;
		readonly nodeType: Maybe<Scalars['String']>;
		readonly parent: Maybe<Node>;
		/** An alphanumeric identifier for the object unique to its type. */
		readonly slug: Maybe<Scalars['String']>;
		/** The name of the taxonomy that the object is associated with */
		readonly taxonomyName: Maybe<Scalars['String']>;
		/** The ID of the term group that this term object belongs to */
		readonly termGroupId: Maybe<Scalars['Int']>;
		/** The taxonomy ID that the object is associated with */
		readonly termTaxonomyId: Maybe<Scalars['Int']>;
		/** The unique resource identifier path */
		readonly uri: Maybe<Scalars['String']>;
	};

	type WpTermNodeConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpTermNodeEdge>;
		readonly group: ReadonlyArray<WpTermNodeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpTermNode>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpTermNodeConnection_distinctArgs = {
		field: WpTermNodeFieldsEnum;
	};

	type WpTermNodeConnection_groupArgs = {
		field: WpTermNodeFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpTermNodeConnection_maxArgs = {
		field: WpTermNodeFieldsEnum;
	};

	type WpTermNodeConnection_minArgs = {
		field: WpTermNodeFieldsEnum;
	};

	type WpTermNodeConnection_sumArgs = {
		field: WpTermNodeFieldsEnum;
	};

	type WpTermNodeConnectionEdgeType = {
		/** The connected TermNode Node */
		readonly node: WpTermNode;
	};

	type WpTermNodeConnectionType = {
		/** A list of connected TermNode Nodes */
		readonly nodes: ReadonlyArray<WpTermNode>;
	};

	type WpTermNodeEdge = {
		readonly next: Maybe<WpTermNode>;
		readonly node: WpTermNode;
		readonly previous: Maybe<WpTermNode>;
	};

	type WpTermNodeFieldsEnum =
		| 'children'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'count'
		| 'databaseId'
		| 'description'
		| 'id'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'isContentNode'
		| 'isTermNode'
		| 'link'
		| 'name'
		| 'nodeType'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id'
		| 'slug'
		| 'taxonomyName'
		| 'termGroupId'
		| 'termTaxonomyId'
		| 'uri';

	type WpTermNodeFilterInput = {
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly count: InputMaybe<IntQueryOperatorInput>;
		readonly databaseId: InputMaybe<IntQueryOperatorInput>;
		readonly description: InputMaybe<StringQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly isContentNode: InputMaybe<BooleanQueryOperatorInput>;
		readonly isTermNode: InputMaybe<BooleanQueryOperatorInput>;
		readonly link: InputMaybe<StringQueryOperatorInput>;
		readonly name: InputMaybe<StringQueryOperatorInput>;
		readonly nodeType: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly slug: InputMaybe<StringQueryOperatorInput>;
		readonly taxonomyName: InputMaybe<StringQueryOperatorInput>;
		readonly termGroupId: InputMaybe<IntQueryOperatorInput>;
		readonly termTaxonomyId: InputMaybe<IntQueryOperatorInput>;
		readonly uri: InputMaybe<StringQueryOperatorInput>;
	};

	type WpTermNodeFilterListInput = {
		readonly elemMatch: InputMaybe<WpTermNodeFilterInput>;
	};

	type WpTermNodeGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpTermNodeEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<WpTermNodeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpTermNode>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpTermNodeGroupConnection_distinctArgs = {
		field: WpTermNodeFieldsEnum;
	};

	type WpTermNodeGroupConnection_groupArgs = {
		field: WpTermNodeFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpTermNodeGroupConnection_maxArgs = {
		field: WpTermNodeFieldsEnum;
	};

	type WpTermNodeGroupConnection_minArgs = {
		field: WpTermNodeFieldsEnum;
	};

	type WpTermNodeGroupConnection_sumArgs = {
		field: WpTermNodeFieldsEnum;
	};

	type WpTermNodeSortInput = {
		readonly fields: InputMaybe<
			ReadonlyArray<InputMaybe<WpTermNodeFieldsEnum>>
		>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	type WpUniformResourceIdentifiable = {
		readonly children: ReadonlyArray<Node>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		/** Whether the node is a Content Node */
		readonly isContentNode: Scalars['Boolean'];
		/** Whether the node is a Term */
		readonly isTermNode: Scalars['Boolean'];
		readonly nodeType: Maybe<Scalars['String']>;
		readonly parent: Maybe<Node>;
		/** The unique resource identifier path */
		readonly uri: Maybe<Scalars['String']>;
	};

	type WpUniformResourceIdentifiableConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpUniformResourceIdentifiableEdge>;
		readonly group: ReadonlyArray<WpUniformResourceIdentifiableGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpUniformResourceIdentifiable>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpUniformResourceIdentifiableConnection_distinctArgs = {
		field: WpUniformResourceIdentifiableFieldsEnum;
	};

	type WpUniformResourceIdentifiableConnection_groupArgs = {
		field: WpUniformResourceIdentifiableFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpUniformResourceIdentifiableConnection_maxArgs = {
		field: WpUniformResourceIdentifiableFieldsEnum;
	};

	type WpUniformResourceIdentifiableConnection_minArgs = {
		field: WpUniformResourceIdentifiableFieldsEnum;
	};

	type WpUniformResourceIdentifiableConnection_sumArgs = {
		field: WpUniformResourceIdentifiableFieldsEnum;
	};

	type WpUniformResourceIdentifiableEdge = {
		readonly next: Maybe<WpUniformResourceIdentifiable>;
		readonly node: WpUniformResourceIdentifiable;
		readonly previous: Maybe<WpUniformResourceIdentifiable>;
	};

	type WpUniformResourceIdentifiableFieldsEnum =
		| 'children'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'id'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'isContentNode'
		| 'isTermNode'
		| 'nodeType'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id'
		| 'uri';

	type WpUniformResourceIdentifiableFilterInput = {
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly isContentNode: InputMaybe<BooleanQueryOperatorInput>;
		readonly isTermNode: InputMaybe<BooleanQueryOperatorInput>;
		readonly nodeType: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly uri: InputMaybe<StringQueryOperatorInput>;
	};

	type WpUniformResourceIdentifiableGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpUniformResourceIdentifiableEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<WpUniformResourceIdentifiableGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpUniformResourceIdentifiable>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpUniformResourceIdentifiableGroupConnection_distinctArgs = {
		field: WpUniformResourceIdentifiableFieldsEnum;
	};

	type WpUniformResourceIdentifiableGroupConnection_groupArgs = {
		field: WpUniformResourceIdentifiableFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpUniformResourceIdentifiableGroupConnection_maxArgs = {
		field: WpUniformResourceIdentifiableFieldsEnum;
	};

	type WpUniformResourceIdentifiableGroupConnection_minArgs = {
		field: WpUniformResourceIdentifiableFieldsEnum;
	};

	type WpUniformResourceIdentifiableGroupConnection_sumArgs = {
		field: WpUniformResourceIdentifiableFieldsEnum;
	};

	type WpUniformResourceIdentifiableSortInput = {
		readonly fields: InputMaybe<
			ReadonlyArray<InputMaybe<WpUniformResourceIdentifiableFieldsEnum>>
		>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	/** A User object */
	type WpUser = Node &
		WpCommenter &
		WpDatabaseIdentifier &
		WpNode &
		WpUniformResourceIdentifiable & {
			/** Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument. */
			readonly avatar: Maybe<WpAvatar>;
			/** User metadata option name. Usually it will be &quot;wp_capabilities&quot;. */
			readonly capKey: Maybe<Scalars['String']>;
			/** A list of capabilities (permissions) granted to the user */
			readonly capabilities: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
			readonly children: ReadonlyArray<Node>;
			/** Connection between the User type and the Comment type */
			readonly comments: Maybe<WpUserToCommentConnectionType>;
			/** Identifies the primary key from the database. */
			readonly databaseId: Scalars['Int'];
			/** Description of the user. */
			readonly description: Maybe<Scalars['String']>;
			/** Email address of the user. This is equivalent to the WP_User-&gt;user_email property. */
			readonly email: Maybe<Scalars['String']>;
			/** A complete list of capabilities including capabilities inherited from a role. This is equivalent to the array keys of WP_User-&gt;allcaps. */
			readonly extraCapabilities: Maybe<
				ReadonlyArray<Maybe<Scalars['String']>>
			>;
			/** First name of the user. This is equivalent to the WP_User-&gt;user_first_name property. */
			readonly firstName: Maybe<Scalars['String']>;
			readonly id: Scalars['ID'];
			readonly internal: Internal;
			/** Whether the node is a Content Node */
			readonly isContentNode: Scalars['Boolean'];
			/** Whether the node is a Term */
			readonly isTermNode: Scalars['Boolean'];
			/** Last name of the user. This is equivalent to the WP_User-&gt;user_last_name property. */
			readonly lastName: Maybe<Scalars['String']>;
			/** The preferred language locale set for the user. Value derived from get_user_locale(). */
			readonly locale: Maybe<Scalars['String']>;
			/** Display name of the user. This is equivalent to the WP_User-&gt;dispaly_name property. */
			readonly name: Maybe<Scalars['String']>;
			/** The nicename for the user. This field is equivalent to WP_User-&gt;user_nicename */
			readonly nicename: Maybe<Scalars['String']>;
			/** Nickname of the user. */
			readonly nickname: Maybe<Scalars['String']>;
			readonly nodeType: Maybe<Scalars['String']>;
			/** Connection between the User type and the page type */
			readonly pages: Maybe<WpUserToPageConnectionType>;
			readonly parent: Maybe<Node>;
			/** Connection between the User type and the post type */
			readonly posts: Maybe<WpUserToPostConnectionType>;
			/** The date the user registered or was created. The field follows a full ISO8601 date string format. */
			readonly registeredDate: Maybe<Scalars['String']>;
			/** Connection between the User type and the UserRole type */
			readonly roles: Maybe<WpUserToUserRoleConnectionType>;
			/** The slug for the user. This field is equivalent to WP_User-&gt;user_nicename */
			readonly slug: Maybe<Scalars['String']>;
			/** The unique resource identifier path */
			readonly uri: Maybe<Scalars['String']>;
			/** A website url that is associated with the user. */
			readonly url: Maybe<Scalars['String']>;
			/** Username for the user. This field is equivalent to WP_User-&gt;user_login. */
			readonly username: Maybe<Scalars['String']>;
		};

	type WpUserConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpUserEdge>;
		readonly group: ReadonlyArray<WpUserGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpUser>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpUserConnection_distinctArgs = {
		field: WpUserFieldsEnum;
	};

	type WpUserConnection_groupArgs = {
		field: WpUserFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpUserConnection_maxArgs = {
		field: WpUserFieldsEnum;
	};

	type WpUserConnection_minArgs = {
		field: WpUserFieldsEnum;
	};

	type WpUserConnection_sumArgs = {
		field: WpUserFieldsEnum;
	};

	type WpUserConnectionEdgeType = {
		/** The connected User Node */
		readonly node: WpUser;
	};

	type WpUserConnectionType = {
		/** A list of connected User Nodes */
		readonly nodes: ReadonlyArray<WpUser>;
	};

	type WpUserEdge = {
		readonly next: Maybe<WpUser>;
		readonly node: WpUser;
		readonly previous: Maybe<WpUser>;
	};

	type WpUserFieldsEnum =
		| 'avatar.default'
		| 'avatar.extraAttr'
		| 'avatar.forceDefault'
		| 'avatar.foundAvatar'
		| 'avatar.height'
		| 'avatar.rating'
		| 'avatar.scheme'
		| 'avatar.size'
		| 'avatar.url'
		| 'avatar.width'
		| 'capKey'
		| 'capabilities'
		| 'children'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'comments.nodes'
		| 'comments.nodes.agent'
		| 'comments.nodes.authorIp'
		| 'comments.nodes.children'
		| 'comments.nodes.children.children'
		| 'comments.nodes.children.id'
		| 'comments.nodes.content'
		| 'comments.nodes.databaseId'
		| 'comments.nodes.date'
		| 'comments.nodes.dateGmt'
		| 'comments.nodes.id'
		| 'comments.nodes.internal.content'
		| 'comments.nodes.internal.contentDigest'
		| 'comments.nodes.internal.contentFilePath'
		| 'comments.nodes.internal.description'
		| 'comments.nodes.internal.fieldOwners'
		| 'comments.nodes.internal.ignoreType'
		| 'comments.nodes.internal.mediaType'
		| 'comments.nodes.internal.owner'
		| 'comments.nodes.internal.type'
		| 'comments.nodes.karma'
		| 'comments.nodes.nodeType'
		| 'comments.nodes.parentDatabaseId'
		| 'comments.nodes.parentId'
		| 'comments.nodes.parent.children'
		| 'comments.nodes.parent.id'
		| 'comments.nodes.replies.nodes'
		| 'comments.nodes.status'
		| 'comments.nodes.type'
		| 'databaseId'
		| 'description'
		| 'email'
		| 'extraCapabilities'
		| 'firstName'
		| 'id'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'isContentNode'
		| 'isTermNode'
		| 'lastName'
		| 'locale'
		| 'name'
		| 'nicename'
		| 'nickname'
		| 'nodeType'
		| 'pages.nodes'
		| 'pages.nodes.ancestors.nodes'
		| 'pages.nodes.authorDatabaseId'
		| 'pages.nodes.authorId'
		| 'pages.nodes.children'
		| 'pages.nodes.children.children'
		| 'pages.nodes.children.id'
		| 'pages.nodes.commentCount'
		| 'pages.nodes.commentStatus'
		| 'pages.nodes.comments.nodes'
		| 'pages.nodes.content'
		| 'pages.nodes.contentTypeName'
		| 'pages.nodes.databaseId'
		| 'pages.nodes.date'
		| 'pages.nodes.dateGmt'
		| 'pages.nodes.desiredSlug'
		| 'pages.nodes.enclosure'
		| 'pages.nodes.featuredImageDatabaseId'
		| 'pages.nodes.featuredImageId'
		| 'pages.nodes.guid'
		| 'pages.nodes.id'
		| 'pages.nodes.internal.content'
		| 'pages.nodes.internal.contentDigest'
		| 'pages.nodes.internal.contentFilePath'
		| 'pages.nodes.internal.description'
		| 'pages.nodes.internal.fieldOwners'
		| 'pages.nodes.internal.ignoreType'
		| 'pages.nodes.internal.mediaType'
		| 'pages.nodes.internal.owner'
		| 'pages.nodes.internal.type'
		| 'pages.nodes.isContentNode'
		| 'pages.nodes.isFrontPage'
		| 'pages.nodes.isPostsPage'
		| 'pages.nodes.isPrivacyPage'
		| 'pages.nodes.isRevision'
		| 'pages.nodes.isTermNode'
		| 'pages.nodes.link'
		| 'pages.nodes.menuOrder'
		| 'pages.nodes.modified'
		| 'pages.nodes.modifiedGmt'
		| 'pages.nodes.nodeType'
		| 'pages.nodes.parentDatabaseId'
		| 'pages.nodes.parentId'
		| 'pages.nodes.parent.children'
		| 'pages.nodes.parent.id'
		| 'pages.nodes.slug'
		| 'pages.nodes.status'
		| 'pages.nodes.template.templateName'
		| 'pages.nodes.title'
		| 'pages.nodes.uri'
		| 'pages.nodes.wpChildren.nodes'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id'
		| 'posts.nodes'
		| 'posts.nodes.authorDatabaseId'
		| 'posts.nodes.authorId'
		| 'posts.nodes.categories.nodes'
		| 'posts.nodes.children'
		| 'posts.nodes.children.children'
		| 'posts.nodes.children.id'
		| 'posts.nodes.commentCount'
		| 'posts.nodes.commentStatus'
		| 'posts.nodes.comments.nodes'
		| 'posts.nodes.content'
		| 'posts.nodes.contentTypeName'
		| 'posts.nodes.databaseId'
		| 'posts.nodes.date'
		| 'posts.nodes.dateGmt'
		| 'posts.nodes.desiredSlug'
		| 'posts.nodes.enclosure'
		| 'posts.nodes.excerpt'
		| 'posts.nodes.featuredImageDatabaseId'
		| 'posts.nodes.featuredImageId'
		| 'posts.nodes.guid'
		| 'posts.nodes.id'
		| 'posts.nodes.internal.content'
		| 'posts.nodes.internal.contentDigest'
		| 'posts.nodes.internal.contentFilePath'
		| 'posts.nodes.internal.description'
		| 'posts.nodes.internal.fieldOwners'
		| 'posts.nodes.internal.ignoreType'
		| 'posts.nodes.internal.mediaType'
		| 'posts.nodes.internal.owner'
		| 'posts.nodes.internal.type'
		| 'posts.nodes.isContentNode'
		| 'posts.nodes.isRevision'
		| 'posts.nodes.isSticky'
		| 'posts.nodes.isTermNode'
		| 'posts.nodes.link'
		| 'posts.nodes.modified'
		| 'posts.nodes.modifiedGmt'
		| 'posts.nodes.nodeType'
		| 'posts.nodes.parent.children'
		| 'posts.nodes.parent.id'
		| 'posts.nodes.pingStatus'
		| 'posts.nodes.pinged'
		| 'posts.nodes.postFormats.nodes'
		| 'posts.nodes.slug'
		| 'posts.nodes.status'
		| 'posts.nodes.tags.nodes'
		| 'posts.nodes.template.templateName'
		| 'posts.nodes.terms.nodes'
		| 'posts.nodes.title'
		| 'posts.nodes.toPing'
		| 'posts.nodes.uri'
		| 'registeredDate'
		| 'roles.nodes'
		| 'roles.nodes.capabilities'
		| 'roles.nodes.children'
		| 'roles.nodes.children.children'
		| 'roles.nodes.children.id'
		| 'roles.nodes.displayName'
		| 'roles.nodes.id'
		| 'roles.nodes.internal.content'
		| 'roles.nodes.internal.contentDigest'
		| 'roles.nodes.internal.contentFilePath'
		| 'roles.nodes.internal.description'
		| 'roles.nodes.internal.fieldOwners'
		| 'roles.nodes.internal.ignoreType'
		| 'roles.nodes.internal.mediaType'
		| 'roles.nodes.internal.owner'
		| 'roles.nodes.internal.type'
		| 'roles.nodes.name'
		| 'roles.nodes.nodeType'
		| 'roles.nodes.parent.children'
		| 'roles.nodes.parent.id'
		| 'slug'
		| 'uri'
		| 'url'
		| 'username';

	type WpUserFilterInput = {
		readonly avatar: InputMaybe<WpAvatarFilterInput>;
		readonly capKey: InputMaybe<StringQueryOperatorInput>;
		readonly capabilities: InputMaybe<StringQueryOperatorInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly comments: InputMaybe<WpUserToCommentConnectionTypeFilterInput>;
		readonly databaseId: InputMaybe<IntQueryOperatorInput>;
		readonly description: InputMaybe<StringQueryOperatorInput>;
		readonly email: InputMaybe<StringQueryOperatorInput>;
		readonly extraCapabilities: InputMaybe<StringQueryOperatorInput>;
		readonly firstName: InputMaybe<StringQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly isContentNode: InputMaybe<BooleanQueryOperatorInput>;
		readonly isTermNode: InputMaybe<BooleanQueryOperatorInput>;
		readonly lastName: InputMaybe<StringQueryOperatorInput>;
		readonly locale: InputMaybe<StringQueryOperatorInput>;
		readonly name: InputMaybe<StringQueryOperatorInput>;
		readonly nicename: InputMaybe<StringQueryOperatorInput>;
		readonly nickname: InputMaybe<StringQueryOperatorInput>;
		readonly nodeType: InputMaybe<StringQueryOperatorInput>;
		readonly pages: InputMaybe<WpUserToPageConnectionTypeFilterInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly posts: InputMaybe<WpUserToPostConnectionTypeFilterInput>;
		readonly registeredDate: InputMaybe<StringQueryOperatorInput>;
		readonly roles: InputMaybe<WpUserToUserRoleConnectionTypeFilterInput>;
		readonly slug: InputMaybe<StringQueryOperatorInput>;
		readonly uri: InputMaybe<StringQueryOperatorInput>;
		readonly url: InputMaybe<StringQueryOperatorInput>;
		readonly username: InputMaybe<StringQueryOperatorInput>;
	};

	type WpUserGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpUserEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<WpUserGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpUser>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpUserGroupConnection_distinctArgs = {
		field: WpUserFieldsEnum;
	};

	type WpUserGroupConnection_groupArgs = {
		field: WpUserFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpUserGroupConnection_maxArgs = {
		field: WpUserFieldsEnum;
	};

	type WpUserGroupConnection_minArgs = {
		field: WpUserFieldsEnum;
	};

	type WpUserGroupConnection_sumArgs = {
		field: WpUserFieldsEnum;
	};

	/** A user role object */
	type WpUserRole = Node &
		WpNode & {
			/** The capabilities that belong to this role */
			readonly capabilities: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
			readonly children: ReadonlyArray<Node>;
			/** The display name of the role */
			readonly displayName: Maybe<Scalars['String']>;
			readonly id: Scalars['ID'];
			readonly internal: Internal;
			/** The registered name of the role */
			readonly name: Maybe<Scalars['String']>;
			readonly nodeType: Maybe<Scalars['String']>;
			readonly parent: Maybe<Node>;
		};

	type WpUserRoleConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpUserRoleEdge>;
		readonly group: ReadonlyArray<WpUserRoleGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpUserRole>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpUserRoleConnection_distinctArgs = {
		field: WpUserRoleFieldsEnum;
	};

	type WpUserRoleConnection_groupArgs = {
		field: WpUserRoleFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpUserRoleConnection_maxArgs = {
		field: WpUserRoleFieldsEnum;
	};

	type WpUserRoleConnection_minArgs = {
		field: WpUserRoleFieldsEnum;
	};

	type WpUserRoleConnection_sumArgs = {
		field: WpUserRoleFieldsEnum;
	};

	type WpUserRoleConnectionEdgeType = {
		/** The connected UserRole Node */
		readonly node: WpUserRole;
	};

	type WpUserRoleConnectionType = {
		/** A list of connected UserRole Nodes */
		readonly nodes: ReadonlyArray<WpUserRole>;
	};

	type WpUserRoleEdge = {
		readonly next: Maybe<WpUserRole>;
		readonly node: WpUserRole;
		readonly previous: Maybe<WpUserRole>;
	};

	type WpUserRoleFieldsEnum =
		| 'capabilities'
		| 'children'
		| 'children.children'
		| 'children.children.children'
		| 'children.children.children.children'
		| 'children.children.children.id'
		| 'children.children.id'
		| 'children.children.internal.content'
		| 'children.children.internal.contentDigest'
		| 'children.children.internal.contentFilePath'
		| 'children.children.internal.description'
		| 'children.children.internal.fieldOwners'
		| 'children.children.internal.ignoreType'
		| 'children.children.internal.mediaType'
		| 'children.children.internal.owner'
		| 'children.children.internal.type'
		| 'children.children.parent.children'
		| 'children.children.parent.id'
		| 'children.id'
		| 'children.internal.content'
		| 'children.internal.contentDigest'
		| 'children.internal.contentFilePath'
		| 'children.internal.description'
		| 'children.internal.fieldOwners'
		| 'children.internal.ignoreType'
		| 'children.internal.mediaType'
		| 'children.internal.owner'
		| 'children.internal.type'
		| 'children.parent.children'
		| 'children.parent.children.children'
		| 'children.parent.children.id'
		| 'children.parent.id'
		| 'children.parent.internal.content'
		| 'children.parent.internal.contentDigest'
		| 'children.parent.internal.contentFilePath'
		| 'children.parent.internal.description'
		| 'children.parent.internal.fieldOwners'
		| 'children.parent.internal.ignoreType'
		| 'children.parent.internal.mediaType'
		| 'children.parent.internal.owner'
		| 'children.parent.internal.type'
		| 'children.parent.parent.children'
		| 'children.parent.parent.id'
		| 'displayName'
		| 'id'
		| 'internal.content'
		| 'internal.contentDigest'
		| 'internal.contentFilePath'
		| 'internal.description'
		| 'internal.fieldOwners'
		| 'internal.ignoreType'
		| 'internal.mediaType'
		| 'internal.owner'
		| 'internal.type'
		| 'name'
		| 'nodeType'
		| 'parent.children'
		| 'parent.children.children'
		| 'parent.children.children.children'
		| 'parent.children.children.id'
		| 'parent.children.id'
		| 'parent.children.internal.content'
		| 'parent.children.internal.contentDigest'
		| 'parent.children.internal.contentFilePath'
		| 'parent.children.internal.description'
		| 'parent.children.internal.fieldOwners'
		| 'parent.children.internal.ignoreType'
		| 'parent.children.internal.mediaType'
		| 'parent.children.internal.owner'
		| 'parent.children.internal.type'
		| 'parent.children.parent.children'
		| 'parent.children.parent.id'
		| 'parent.id'
		| 'parent.internal.content'
		| 'parent.internal.contentDigest'
		| 'parent.internal.contentFilePath'
		| 'parent.internal.description'
		| 'parent.internal.fieldOwners'
		| 'parent.internal.ignoreType'
		| 'parent.internal.mediaType'
		| 'parent.internal.owner'
		| 'parent.internal.type'
		| 'parent.parent.children'
		| 'parent.parent.children.children'
		| 'parent.parent.children.id'
		| 'parent.parent.id'
		| 'parent.parent.internal.content'
		| 'parent.parent.internal.contentDigest'
		| 'parent.parent.internal.contentFilePath'
		| 'parent.parent.internal.description'
		| 'parent.parent.internal.fieldOwners'
		| 'parent.parent.internal.ignoreType'
		| 'parent.parent.internal.mediaType'
		| 'parent.parent.internal.owner'
		| 'parent.parent.internal.type'
		| 'parent.parent.parent.children'
		| 'parent.parent.parent.id';

	type WpUserRoleFilterInput = {
		readonly capabilities: InputMaybe<StringQueryOperatorInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly displayName: InputMaybe<StringQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly name: InputMaybe<StringQueryOperatorInput>;
		readonly nodeType: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
	};

	type WpUserRoleFilterListInput = {
		readonly elemMatch: InputMaybe<WpUserRoleFilterInput>;
	};

	type WpUserRoleGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<WpUserRoleEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<WpUserRoleGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<WpUserRole>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type WpUserRoleGroupConnection_distinctArgs = {
		field: WpUserRoleFieldsEnum;
	};

	type WpUserRoleGroupConnection_groupArgs = {
		field: WpUserRoleFieldsEnum;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type WpUserRoleGroupConnection_maxArgs = {
		field: WpUserRoleFieldsEnum;
	};

	type WpUserRoleGroupConnection_minArgs = {
		field: WpUserRoleFieldsEnum;
	};

	type WpUserRoleGroupConnection_sumArgs = {
		field: WpUserRoleFieldsEnum;
	};

	type WpUserRoleSortInput = {
		readonly fields: InputMaybe<
			ReadonlyArray<InputMaybe<WpUserRoleFieldsEnum>>
		>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	type WpUserSortInput = {
		readonly fields: InputMaybe<ReadonlyArray<InputMaybe<WpUserFieldsEnum>>>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	/** Connection between the User type and the Comment type */
	type WpUserToCommentConnectionType = WpCommentConnectionType &
		WpConnectionType & {
			/** The nodes of the connection, without the edges */
			readonly nodes: ReadonlyArray<WpComment>;
		};

	type WpUserToCommentConnectionTypeFilterInput = {
		readonly nodes: InputMaybe<WpCommentFilterListInput>;
	};

	/** Connection between the User type and the page type */
	type WpUserToPageConnectionType = WpConnectionType &
		WpPageConnectionType & {
			/** The nodes of the connection, without the edges */
			readonly nodes: ReadonlyArray<WpPage>;
		};

	type WpUserToPageConnectionTypeFilterInput = {
		readonly nodes: InputMaybe<WpPageFilterListInput>;
	};

	/** Connection between the User type and the post type */
	type WpUserToPostConnectionType = WpConnectionType &
		WpPostConnectionType & {
			/** The nodes of the connection, without the edges */
			readonly nodes: ReadonlyArray<WpPost>;
		};

	type WpUserToPostConnectionTypeFilterInput = {
		readonly nodes: InputMaybe<WpPostFilterListInput>;
	};

	/** Connection between the User type and the UserRole type */
	type WpUserToUserRoleConnectionType = WpConnectionType &
		WpUserRoleConnectionType & {
			/** The nodes of the connection, without the edges */
			readonly nodes: ReadonlyArray<WpUserRole>;
		};

	type WpUserToUserRoleConnectionTypeFilterInput = {
		readonly nodes: InputMaybe<WpUserRoleFilterListInput>;
	};

	/** Information needed by gatsby-source-wordpress. */
	type WpWPGatsby = {
		/** Returns wether or not pretty permalinks are enabled. */
		readonly arePrettyPermalinksEnabled: Maybe<Scalars['Boolean']>;
		/** Wether or not the Preview frontend URL is online. */
		readonly isPreviewFrontendOnline: Maybe<Scalars['Boolean']>;
	};

	type WpWPGatsbyFilterInput = {
		readonly arePrettyPermalinksEnabled: InputMaybe<BooleanQueryOperatorInput>;
		readonly isPreviewFrontendOnline: InputMaybe<BooleanQueryOperatorInput>;
	};

	/** The writing setting type */
	type WpWritingSettings = {
		/** Default post category. */
		readonly defaultCategory: Maybe<Scalars['Int']>;
		/** Default post format. */
		readonly defaultPostFormat: Maybe<Scalars['String']>;
		/** Convert emoticons like :-) and :-P to graphics on display. */
		readonly useSmilies: Maybe<Scalars['Boolean']>;
	};

	type WpWritingSettingsFilterInput = {
		readonly defaultCategory: InputMaybe<IntQueryOperatorInput>;
		readonly defaultPostFormat: InputMaybe<StringQueryOperatorInput>;
		readonly useSmilies: InputMaybe<BooleanQueryOperatorInput>;
	};

	type GatsbyImageSharpFixedFragment = {
		readonly base64: string | null;
		readonly width: number;
		readonly height: number;
		readonly src: string;
		readonly srcSet: string;
	};

	type GatsbyImageSharpFixed_noBase64Fragment = {
		readonly width: number;
		readonly height: number;
		readonly src: string;
		readonly srcSet: string;
	};

	type GatsbyImageSharpFixed_tracedSVGFragment = {
		readonly tracedSVG: string | null;
		readonly width: number;
		readonly height: number;
		readonly src: string;
		readonly srcSet: string;
	};

	type GatsbyImageSharpFixed_withWebpFragment = {
		readonly base64: string | null;
		readonly width: number;
		readonly height: number;
		readonly src: string;
		readonly srcSet: string;
		readonly srcWebp: string | null;
		readonly srcSetWebp: string | null;
	};

	type GatsbyImageSharpFixed_withWebp_noBase64Fragment = {
		readonly width: number;
		readonly height: number;
		readonly src: string;
		readonly srcSet: string;
		readonly srcWebp: string | null;
		readonly srcSetWebp: string | null;
	};

	type GatsbyImageSharpFixed_withWebp_tracedSVGFragment = {
		readonly tracedSVG: string | null;
		readonly width: number;
		readonly height: number;
		readonly src: string;
		readonly srcSet: string;
		readonly srcWebp: string | null;
		readonly srcSetWebp: string | null;
	};

	type GatsbyImageSharpFluidFragment = {
		readonly base64: string | null;
		readonly aspectRatio: number;
		readonly src: string;
		readonly srcSet: string;
		readonly sizes: string;
	};

	type GatsbyImageSharpFluid_noBase64Fragment = {
		readonly aspectRatio: number;
		readonly src: string;
		readonly srcSet: string;
		readonly sizes: string;
	};

	type GatsbyImageSharpFluid_tracedSVGFragment = {
		readonly tracedSVG: string | null;
		readonly aspectRatio: number;
		readonly src: string;
		readonly srcSet: string;
		readonly sizes: string;
	};

	type GatsbyImageSharpFluid_withWebpFragment = {
		readonly base64: string | null;
		readonly aspectRatio: number;
		readonly src: string;
		readonly srcSet: string;
		readonly srcWebp: string | null;
		readonly srcSetWebp: string | null;
		readonly sizes: string;
	};

	type GatsbyImageSharpFluid_withWebp_noBase64Fragment = {
		readonly aspectRatio: number;
		readonly src: string;
		readonly srcSet: string;
		readonly srcWebp: string | null;
		readonly srcSetWebp: string | null;
		readonly sizes: string;
	};

	type GatsbyImageSharpFluid_withWebp_tracedSVGFragment = {
		readonly tracedSVG: string | null;
		readonly aspectRatio: number;
		readonly src: string;
		readonly srcSet: string;
		readonly srcWebp: string | null;
		readonly srcSetWebp: string | null;
		readonly sizes: string;
	};

	type GatsbyImageSharpFluidLimitPresentationSizeFragment = {
		readonly maxHeight: number;
		readonly maxWidth: number;
	};

	type MenuQueryQueryVariables = Exact<{ [key: string]: never }>;

	type MenuQueryQuery = {
		readonly wpMenu: {
			readonly id: string;
			readonly menuItems: {
				readonly nodes: ReadonlyArray<{
					readonly id: string;
					readonly path: string | null;
					readonly label: string | null;
				}>;
			} | null;
		} | null;
	};
}
